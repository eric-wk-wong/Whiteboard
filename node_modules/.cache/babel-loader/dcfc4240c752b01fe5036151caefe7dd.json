{"ast":null,"code":"import { defaultCurrencyCode } from '../internationalization';\nimport { getValue, isNullOrUndefined, extend, isBlazor } from '../util';\nimport { ParserBase as parser } from './parser-base';\nimport { DateFormat } from './date-formatter';\nimport { NumberFormat } from './number-formatter';\nimport { isUndefined } from '../util';\nexport var blazorCultureFormats = {\n  'en-US': {\n    'd': 'M/d/y',\n    'D': 'EEEE, MMMM d, y',\n    'f': 'EEEE, MMMM d, y h:mm a',\n    'F': 'EEEE, MMMM d, y h:mm:s a',\n    'g': 'M/d/y h:mm a',\n    'G': 'M/d/yyyy h:mm:ss tt',\n    'm': 'MMMM d',\n    'M': 'MMMM d',\n    'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n    't': 'h:mm tt',\n    'T': 'h:m:s tt',\n    'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n    'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n    'y': 'MMMM yyyy',\n    'Y': 'MMMM yyyy'\n  }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\n\nexport var IntlBase;\n\n(function (IntlBase) {\n  // tslint:disable-next-line:max-line-length\n  IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n  var fractionRegex = /[0-9]/g;\n  IntlBase.defaultCurrency = '$';\n  var mapper = ['infinity', 'nan', 'group', 'decimal'];\n  var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n  var patternMatch = {\n    'G': '',\n    'M': 'm',\n    'L': 'm',\n    'H': 'h',\n    'c': 'd',\n    '\\'': '\"',\n    ' a': ' AM/PM',\n    'yy': 'yy',\n    'y': 'yyyy',\n    'EEEE': 'dddd',\n    'E': 'ddd'\n  };\n  IntlBase.dateConverterMapper = /dddd|ddd/ig;\n  var defaultFirstDay = 'sun';\n  IntlBase.islamicRegex = /^islamic/;\n  var firstDayMapper = {\n    'sun': 0,\n    'mon': 1,\n    'tue': 2,\n    'wed': 3,\n    'thu': 4,\n    'fri': 5,\n    'sat': 6\n  };\n  IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n  IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n  IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n  var typeMapper = {\n    '$': 'isCurrency',\n    '%': 'isPercent',\n    '-': 'isNegative',\n    0: 'nlead',\n    1: 'nend'\n  };\n  IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n  IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n  /* tslint:disable:quotemark */\n\n  IntlBase.defaultObject = {\n    'dates': {\n      'calendars': {\n        'gregorian': {\n          'months': {\n            'stand-alone': {\n              'abbreviated': {\n                '1': 'Jan',\n                '2': 'Feb',\n                '3': 'Mar',\n                '4': 'Apr',\n                '5': 'May',\n                '6': 'Jun',\n                '7': 'Jul',\n                '8': 'Aug',\n                '9': 'Sep',\n                '10': 'Oct',\n                '11': 'Nov',\n                '12': 'Dec'\n              },\n              'narrow': {\n                '1': 'J',\n                '2': 'F',\n                '3': 'M',\n                '4': 'A',\n                '5': 'M',\n                '6': 'J',\n                '7': 'J',\n                '8': 'A',\n                '9': 'S',\n                '10': 'O',\n                '11': 'N',\n                '12': 'D'\n              },\n              'wide': {\n                '1': 'January',\n                '2': 'February',\n                '3': 'March',\n                '4': 'April',\n                '5': 'May',\n                '6': 'June',\n                '7': 'July',\n                '8': 'August',\n                '9': 'September',\n                '10': 'October',\n                '11': 'November',\n                '12': 'December'\n              }\n            }\n          },\n          \"days\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"sun\": \"Sun\",\n                \"mon\": \"Mon\",\n                \"tue\": \"Tue\",\n                \"wed\": \"Wed\",\n                \"thu\": \"Thu\",\n                \"fri\": \"Fri\",\n                \"sat\": \"Sat\"\n              },\n              \"narrow\": {\n                \"sun\": \"S\",\n                \"mon\": \"M\",\n                \"tue\": \"T\",\n                \"wed\": \"W\",\n                \"thu\": \"T\",\n                \"fri\": \"F\",\n                \"sat\": \"S\"\n              },\n              \"short\": {\n                \"sun\": \"Su\",\n                \"mon\": \"Mo\",\n                \"tue\": \"Tu\",\n                \"wed\": \"We\",\n                \"thu\": \"Th\",\n                \"fri\": \"Fr\",\n                \"sat\": \"Sa\"\n              },\n              \"wide\": {\n                \"sun\": \"Sunday\",\n                \"mon\": \"Monday\",\n                \"tue\": \"Tuesday\",\n                \"wed\": \"Wednesday\",\n                \"thu\": \"Thursday\",\n                \"fri\": \"Friday\",\n                \"sat\": \"Saturday\"\n              }\n            }\n          },\n          \"dayPeriods\": {\n            \"format\": {\n              \"wide\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n              }\n            }\n          },\n          'eras': {\n            'eraNames': {\n              '0': 'Before Christ',\n              '0-alt-variant': 'Before Common Era',\n              '1': 'Anno Domini',\n              \"1-alt-variant\": \"Common Era\"\n            },\n            'eraAbbr': {\n              '0': 'BC',\n              '0-alt-variant': 'BCE',\n              '1': 'AD',\n              '1-alt-variant': 'CE'\n            },\n            'eraNarrow': {\n              '0': 'B',\n              '0-alt-variant': 'BCE',\n              '1': 'A',\n              '1-alt-variant': 'CE'\n            }\n          },\n          'dateFormats': {\n            'full': 'EEEE, MMMM d, y',\n            'long': 'MMMM d, y',\n            'medium': 'MMM d, y',\n            'short': 'M/d/yy'\n          },\n          'timeFormats': {\n            'full': 'h:mm:ss a zzzz',\n            'long': 'h:mm:ss a z',\n            'medium': 'h:mm:ss a',\n            'short': 'h:mm a'\n          },\n          'dateTimeFormats': {\n            'full': \"{1} 'at' {0}\",\n            'long': \"{1} 'at' {0}\",\n            'medium': '{1}, {0}',\n            'short': '{1}, {0}',\n            'availableFormats': {\n              'd': 'd',\n              'E': 'ccc',\n              'Ed': 'd E',\n              'Ehm': 'E h:mm a',\n              'EHm': 'E HH:mm',\n              'Ehms': 'E h:mm:ss a',\n              'EHms': 'E HH:mm:ss',\n              'Gy': 'y G',\n              'GyMMM': 'MMM y G',\n              'GyMMMd': 'MMM d, y G',\n              'GyMMMEd': 'E, MMM d, y G',\n              'h': 'h a',\n              'H': 'HH',\n              'hm': 'h:mm a',\n              'Hm': 'HH:mm',\n              'hms': 'h:mm:ss a',\n              'Hms': 'HH:mm:ss',\n              'hmsv': 'h:mm:ss a v',\n              'Hmsv': 'HH:mm:ss v',\n              'hmv': 'h:mm a v',\n              'Hmv': 'HH:mm v',\n              'M': 'L',\n              'Md': 'M/d',\n              'MEd': 'E, M/d',\n              'MMM': 'LLL',\n              'MMMd': 'MMM d',\n              'MMMEd': 'E, MMM d',\n              'MMMMd': 'MMMM d',\n              'ms': 'mm:ss',\n              'y': 'y',\n              'yM': 'M/y',\n              'yMd': 'M/d/y',\n              'yMEd': 'E, M/d/y',\n              'yMMM': 'MMM y',\n              'yMMMd': 'MMM d, y',\n              'yMMMEd': 'E, MMM d, y',\n              'yMMMM': 'MMMM y'\n            }\n          }\n        },\n        \"islamic\": {\n          \"months\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"1\": \"Muh.\",\n                \"2\": \"Saf.\",\n                \"3\": \"Rab. I\",\n                \"4\": \"Rab. II\",\n                \"5\": \"Jum. I\",\n                \"6\": \"Jum. II\",\n                \"7\": \"Raj.\",\n                \"8\": \"Sha.\",\n                \"9\": \"Ram.\",\n                \"10\": \"Shaw.\",\n                \"11\": \"Dhuʻl-Q.\",\n                \"12\": \"Dhuʻl-H.\"\n              },\n              \"narrow\": {\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\",\n                \"10\": \"10\",\n                \"11\": \"11\",\n                \"12\": \"12\"\n              },\n              \"wide\": {\n                \"1\": \"Muharram\",\n                \"2\": \"Safar\",\n                \"3\": \"Rabiʻ I\",\n                \"4\": \"Rabiʻ II\",\n                \"5\": \"Jumada I\",\n                \"6\": \"Jumada II\",\n                \"7\": \"Rajab\",\n                \"8\": \"Shaʻban\",\n                \"9\": \"Ramadan\",\n                \"10\": \"Shawwal\",\n                \"11\": \"Dhuʻl-Qiʻdah\",\n                \"12\": \"Dhuʻl-Hijjah\"\n              }\n            }\n          },\n          \"days\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"sun\": \"Sun\",\n                \"mon\": \"Mon\",\n                \"tue\": \"Tue\",\n                \"wed\": \"Wed\",\n                \"thu\": \"Thu\",\n                \"fri\": \"Fri\",\n                \"sat\": \"Sat\"\n              },\n              \"narrow\": {\n                \"sun\": \"S\",\n                \"mon\": \"M\",\n                \"tue\": \"T\",\n                \"wed\": \"W\",\n                \"thu\": \"T\",\n                \"fri\": \"F\",\n                \"sat\": \"S\"\n              },\n              \"short\": {\n                \"sun\": \"Su\",\n                \"mon\": \"Mo\",\n                \"tue\": \"Tu\",\n                \"wed\": \"We\",\n                \"thu\": \"Th\",\n                \"fri\": \"Fr\",\n                \"sat\": \"Sa\"\n              },\n              \"wide\": {\n                \"sun\": \"Sunday\",\n                \"mon\": \"Monday\",\n                \"tue\": \"Tuesday\",\n                \"wed\": \"Wednesday\",\n                \"thu\": \"Thursday\",\n                \"fri\": \"Friday\",\n                \"sat\": \"Saturday\"\n              }\n            }\n          },\n          \"dayPeriods\": {\n            \"format\": {\n              \"wide\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n              }\n            }\n          },\n          \"eras\": {\n            \"eraNames\": {\n              \"0\": \"AH\"\n            },\n            \"eraAbbr\": {\n              \"0\": \"AH\"\n            },\n            \"eraNarrow\": {\n              \"0\": \"AH\"\n            }\n          },\n          \"dateFormats\": {\n            \"full\": \"EEEE, MMMM d, y G\",\n            \"long\": \"MMMM d, y G\",\n            \"medium\": \"MMM d, y G\",\n            \"short\": \"M/d/y GGGGG\"\n          },\n          \"timeFormats\": {\n            \"full\": \"h:mm:ss a zzzz\",\n            \"long\": \"h:mm:ss a z\",\n            \"medium\": \"h:mm:ss a\",\n            \"short\": \"h:mm a\"\n          },\n          \"dateTimeFormats\": {\n            \"full\": \"{1} 'at' {0}\",\n            \"long\": \"{1} 'at' {0}\",\n            \"medium\": \"{1}, {0}\",\n            \"short\": \"{1}, {0}\",\n            \"availableFormats\": {\n              \"d\": \"d\",\n              \"E\": \"ccc\",\n              \"Ed\": \"d E\",\n              \"Ehm\": \"E h:mm a\",\n              \"EHm\": \"E HH:mm\",\n              \"Ehms\": \"E h:mm:ss a\",\n              \"EHms\": \"E HH:mm:ss\",\n              \"Gy\": \"y G\",\n              \"GyMMM\": \"MMM y G\",\n              \"GyMMMd\": \"MMM d, y G\",\n              \"GyMMMEd\": \"E, MMM d, y G\",\n              \"h\": \"h a\",\n              \"H\": \"HH\",\n              \"hm\": \"h:mm a\",\n              \"Hm\": \"HH:mm\",\n              \"hms\": \"h:mm:ss a\",\n              \"Hms\": \"HH:mm:ss\",\n              \"M\": \"L\",\n              \"Md\": \"M/d\",\n              \"MEd\": \"E, M/d\",\n              \"MMM\": \"LLL\",\n              \"MMMd\": \"MMM d\",\n              \"MMMEd\": \"E, MMM d\",\n              \"MMMMd\": \"MMMM d\",\n              \"ms\": \"mm:ss\",\n              \"y\": \"y G\",\n              \"yyyy\": \"y G\",\n              \"yyyyM\": \"M/y GGGGG\",\n              \"yyyyMd\": \"M/d/y GGGGG\",\n              \"yyyyMEd\": \"E, M/d/y GGGGG\",\n              \"yyyyMMM\": \"MMM y G\",\n              \"yyyyMMMd\": \"MMM d, y G\",\n              \"yyyyMMMEd\": \"E, MMM d, y G\",\n              \"yyyyMMMM\": \"MMMM y G\",\n              \"yyyyQQQ\": \"QQQ y G\",\n              \"yyyyQQQQ\": \"QQQQ y G\"\n            }\n          }\n        }\n      },\n      'timeZoneNames': {\n        \"hourFormat\": \"+HH:mm;-HH:mm\",\n        \"gmtFormat\": \"GMT{0}\",\n        \"gmtZeroFormat\": \"GMT\"\n      }\n    },\n    'numbers': {\n      'currencies': {\n        'USD': {\n          'displayName': 'US Dollar',\n          'symbol': '$',\n          'symbol-alt-narrow': '$'\n        },\n        'EUR': {\n          'displayName': 'Euro',\n          'symbol': '€',\n          'symbol-alt-narrow': '€'\n        },\n        'GBP': {\n          'displayName': 'British Pound',\n          'symbol-alt-narrow': '£'\n        }\n      },\n      'defaultNumberingSystem': 'latn',\n      'minimumGroupingDigits': '1',\n      'symbols-numberSystem-latn': {\n        'decimal': '.',\n        'group': ',',\n        'list': ';',\n        'percentSign': '%',\n        'plusSign': '+',\n        'minusSign': '-',\n        'exponential': 'E',\n        'superscriptingExponent': '×',\n        'perMille': '‰',\n        'infinity': '∞',\n        'nan': 'NaN',\n        'timeSeparator': ':'\n      },\n      'decimalFormats-numberSystem-latn': {\n        'standard': '#,##0.###'\n      },\n      'percentFormats-numberSystem-latn': {\n        'standard': '#,##0%'\n      },\n      'currencyFormats-numberSystem-latn': {\n        'standard': '¤#,##0.00',\n        'accounting': '¤#,##0.00;(¤#,##0.00)'\n      },\n      'scientificFormats-numberSystem-latn': {\n        'standard': '#E0'\n      }\n    }\n  };\n  IntlBase.blazorDefaultObject = {\n    \"numbers\": {\n      \"mapper\": {\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"4\": \"4\",\n        \"5\": \"5\",\n        \"6\": \"6\",\n        \"7\": \"7\",\n        \"8\": \"8\",\n        \"9\": \"9\"\n      },\n      \"mapperDigits\": \"0123456789\",\n      \"numberSymbols\": {\n        \"decimal\": \".\",\n        \"group\": \",\",\n        \"plusSign\": \"+\",\n        \"minusSign\": \"-\",\n        \"percentSign\": \"%\",\n        \"nan\": \"NaN\",\n        \"timeSeparator\": \":\",\n        \"infinity\": \"∞\"\n      },\n      \"timeSeparator\": \":\",\n      \"currencySymbol\": \"$\",\n      \"currencypData\": {\n        \"nlead\": \"$\",\n        \"nend\": \"\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"percentpData\": {\n        \"nlead\": \"\",\n        \"nend\": \"%\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"percentnData\": {\n        \"nlead\": \"-\",\n        \"nend\": \"%\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"currencynData\": {\n        \"nlead\": \"($\",\n        \"nend\": \")\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"decimalnData\": {\n        \"nlead\": \"-\",\n        \"nend\": \"\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"decimalpData\": {\n        \"nlead\": \"\",\n        \"nend\": \"\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      }\n    },\n    \"dates\": {\n      \"dayPeriods\": {\n        \"am\": \"AM\",\n        \"pm\": \"PM\"\n      },\n      \"dateSeperator\": \"/\",\n      \"days\": {\n        \"abbreviated\": {\n          \"sun\": \"Sun\",\n          \"mon\": \"Mon\",\n          \"tue\": \"Tue\",\n          \"wed\": \"Wed\",\n          \"thu\": \"Thu\",\n          \"fri\": \"Fri\",\n          \"sat\": \"Sat\"\n        },\n        \"short\": {\n          \"sun\": \"Su\",\n          \"mon\": \"Mo\",\n          \"tue\": \"Tu\",\n          \"wed\": \"We\",\n          \"thu\": \"Th\",\n          \"fri\": \"Fr\",\n          \"sat\": \"Sa\"\n        },\n        \"wide\": {\n          \"sun\": \"Sunday\",\n          \"mon\": \"Monday\",\n          \"tue\": \"Tuesday\",\n          \"wed\": \"Wednesday\",\n          \"thu\": \"Thursday\",\n          \"fri\": \"Friday\",\n          \"sat\": \"Saturday\"\n        }\n      },\n      \"months\": {\n        \"abbreviated\": {\n          \"1\": \"Jan\",\n          \"2\": \"Feb\",\n          \"3\": \"Mar\",\n          \"4\": \"Apr\",\n          \"5\": \"May\",\n          \"6\": \"Jun\",\n          \"7\": \"Jul\",\n          \"8\": \"Aug\",\n          \"9\": \"Sep\",\n          \"10\": \"Oct\",\n          \"11\": \"Nov\",\n          \"12\": \"Dec\"\n        },\n        \"wide\": {\n          \"1\": \"January\",\n          \"2\": \"February\",\n          \"3\": \"March\",\n          \"4\": \"April\",\n          \"5\": \"May\",\n          \"6\": \"June\",\n          \"7\": \"July\",\n          \"8\": \"August\",\n          \"9\": \"September\",\n          \"10\": \"October\",\n          \"11\": \"November\",\n          \"12\": \"December\"\n        }\n      },\n      \"eras\": {\n        \"1\": \"AD\"\n      }\n    }\n  };\n  /* tslint:enable:quotemark */\n\n  IntlBase.monthIndex = {\n    3: 'abbreviated',\n    4: 'wide',\n    5: 'narrow',\n    1: 'abbreviated'\n  };\n  /**\n   *\n   */\n\n  IntlBase.month = 'months';\n  IntlBase.days = 'days';\n  /**\n   * Default numerber Object\n   */\n\n  IntlBase.patternMatcher = {\n    C: 'currency',\n    P: 'percent',\n    N: 'decimal',\n    A: 'currency',\n    E: 'scientific'\n  };\n  /**\n   * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n   * @private\n   * @param {string} skeleton\n   * @param {Object} dateObject\n   * @param {string} type\n   * @returns {string}\n   */\n\n  function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n    var resPattern;\n    var iType = type || 'date';\n\n    if (blazorCulture) {\n      resPattern = compareBlazorDateFormats({\n        skeleton: skeleton\n      }, blazorCulture).format || compareBlazorDateFormats({\n        skeleton: 'd'\n      }, 'en-US').format;\n    } else {\n      if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n        resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n\n        if (iType === 'dateTime') {\n          var dPattern = getValue('dateFormats.' + skeleton, dateObject);\n          var tPattern = getValue('timeFormats.' + skeleton, dateObject);\n          resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n        }\n      } else {\n        resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n      }\n\n      if (isUndefined(resPattern) && skeleton === 'yMd') {\n        resPattern = 'M/d/y';\n      }\n    }\n\n    return resPattern;\n  }\n\n  IntlBase.getResultantPattern = getResultantPattern;\n  /**\n   * Returns the dependable object for provided cldr data and culture\n   * @private\n   * @param {Object} cldr\n   * @param {string} culture\n   * @param {boolean} isNumber\n   * @returns {Dependables}\n   */\n\n  function getDependables(cldr, culture, mode, isNumber) {\n    var ret = {};\n    var calendartype = mode || 'gregorian';\n    ret.parserObject = parser.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n\n    if (isNumber) {\n      ret.numericObject = getValue('numbers', ret.parserObject);\n    } else {\n      var dateString = isBlazor() ? 'dates' : 'dates.calendars.' + calendartype;\n      ret.dateObject = getValue(dateString, ret.parserObject);\n    }\n\n    return ret;\n  }\n\n  IntlBase.getDependables = getDependables;\n  /**\n   * Returns the symbol pattern for provided parameters\n   * @private\n   * @param {string} type\n   * @param {string} numSystem\n   * @param {Object} obj\n   * @param {boolean} isAccount\n   * @returns {string}\n   */\n\n  function getSymbolPattern(type, numSystem, obj, isAccount) {\n    return getValue(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');\n  }\n\n  IntlBase.getSymbolPattern = getSymbolPattern;\n\n  function ConvertDateToWeekFormat(format) {\n    var convertMapper = format.match(IntlBase.dateConverterMapper);\n\n    if (convertMapper && isBlazor()) {\n      var tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n      return format.replace(IntlBase.dateConverterMapper, tempString);\n    }\n\n    return format;\n  }\n\n  IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n\n  function compareBlazorDateFormats(formatOptions, culture) {\n    var format = formatOptions.format || formatOptions.skeleton;\n    var curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n\n    if (!curFormatMapper) {\n      curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n    }\n\n    if (curFormatMapper) {\n      curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n      formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n    }\n\n    return formatOptions;\n  }\n\n  IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n  /**\n   * Returns proper numeric skeleton\n   * @private\n   * @param {string} skeleton\n   * @returns {NumericSkeleton}\n   */\n\n  function getProperNumericSkeleton(skeleton) {\n    var matches = skeleton.match(IntlBase.formatRegex);\n    var ret = {};\n    var pattern = matches[1].toUpperCase();\n    ret.isAccount = pattern === 'A';\n    /* tslint:disable no-any */\n\n    ret.type = IntlBase.patternMatcher[pattern];\n\n    if (skeleton.length > 1) {\n      ret.fractionDigits = parseInt(matches[2], 10);\n    }\n\n    return ret;\n  }\n\n  IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n  /**\n   * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n   * @private\n   * @param {string} pattern\n   * @param {boolean} needFraction\n   * @param {string} cSymbol\n   * @param {boolean} fractionOnly\n   * @returns {NegativeData}\n   */\n\n  function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n    var nData = fractionOnly ? {} : {\n      nlead: '',\n      nend: ''\n    };\n    var match = pattern.match(IntlBase.customRegex);\n\n    if (match) {\n      if (!fractionOnly) {\n        nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n        nData.nend = changeCurrencySymbol(match[10], cSymbol);\n        nData.groupPattern = match[4];\n      }\n\n      var fraction = match[7];\n\n      if (fraction && needFraction) {\n        var fmatch = fraction.match(fractionRegex);\n\n        if (!isNullOrUndefined(fmatch)) {\n          nData.minimumFraction = fmatch.length;\n        } else {\n          nData.minimumFraction = 0;\n        }\n\n        nData.maximumFraction = fraction.length - 1;\n      }\n    }\n\n    return nData;\n  }\n\n  IntlBase.getFormatData = getFormatData;\n  /**\n   * Changes currency symbol\n   * @private\n   * @param {string} val\n   * @param {string} sym\n   * @returns {string}\n   */\n\n  function changeCurrencySymbol(val, sym) {\n    if (val) {\n      return val.replace(IntlBase.defaultCurrency, sym);\n    }\n\n    return '';\n  }\n  /**\n   * Returns currency symbol based on currency code\n   * @private\n   * @param {Object} numericObject\n   * @param {string} currencyCode\n   * @returns {string}\n   */\n\n\n  function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n    var symbol = altSymbol ? '.' + altSymbol : '.symbol';\n    var getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) || getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n    return getCurrency;\n  }\n\n  IntlBase.getCurrencySymbol = getCurrencySymbol;\n  /**\n   * Returns formatting options for custom number format\n   * @private\n   * @param {string} format\n   * @param {CommonOptions} dOptions\n   * @param {Dependables} obj\n   * @returns {GenericFormatOptions}\n   */\n\n  function customFormat(format, dOptions, obj) {\n    var options = {};\n    var formatSplit = format.split(';');\n    var data = ['pData', 'nData', 'zeroData'];\n\n    for (var i = 0; i < formatSplit.length; i++) {\n      options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n    }\n\n    if (isNullOrUndefined(options.nData)) {\n      options.nData = extend({}, options.pData);\n      options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n    }\n\n    return options;\n  }\n\n  IntlBase.customFormat = customFormat;\n  /**\n   * Returns custom formatting options\n   * @private\n   * @param {string} format\n   * @param {CommonOptions} dOptions\n   * @param {Object} numObject\n   * @returns {NegativeData}\n   */\n\n  function customNumberFormat(format, dOptions, numObject) {\n    var cOptions = {\n      type: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    };\n    var pattern = format.match(IntlBase.customRegex);\n\n    if (isNullOrUndefined(pattern) || pattern[5] === '' && format !== 'N/A') {\n      cOptions.type = undefined;\n      return cOptions;\n    }\n\n    cOptions.nlead = pattern[1];\n    cOptions.nend = pattern[10];\n    var integerPart = pattern[6];\n    cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n    integerPart = integerPart.replace(/,/g, '');\n    var fractionPart = pattern[7];\n\n    if (integerPart.indexOf('0') !== -1) {\n      cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n    }\n\n    if (!isNullOrUndefined(fractionPart)) {\n      cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n      cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n\n      if (cOptions.minimumFractionDigits === -1) {\n        cOptions.minimumFractionDigits = 0;\n      }\n\n      if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n        cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n      }\n    }\n\n    if (!isNullOrUndefined(dOptions)) {\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n\n      if (!cOptions.isCurrency) {\n        extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n      }\n    } else {\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n    }\n\n    if (!isNullOrUndefined(numObject)) {\n      var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n\n      if (cOptions.useGrouping) {\n        cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n        cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n      }\n\n      cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n      cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n    }\n\n    return cOptions;\n  }\n  /**\n   * Returns formatting options for currency or percent type\n   * @private\n   * @param {string[]} parts\n   * @param {string} actual\n   * @param {string} symbol\n   * @returns {NegativeData}\n   */\n\n\n  function isCurrencyPercent(parts, actual, symbol) {\n    var options = {\n      nlead: parts[0],\n      nend: parts[1]\n    };\n\n    for (var i = 0; i < 2; i++) {\n      var part = parts[i];\n      var loc = part.indexOf(actual);\n\n      if (loc !== -1 && (loc < part.indexOf('\\'') || loc > part.lastIndexOf('\\''))) {\n        options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n        options[typeMapper[actual]] = true;\n        options.type = options.isCurrency ? 'currency' : 'percent';\n        break;\n      }\n    }\n\n    return options;\n  }\n\n  IntlBase.isCurrencyPercent = isCurrencyPercent;\n  /**\n   * Returns culture based date separator\n   * @private\n   * @param {Object} dateObj\n   * @returns {string}\n   */\n\n  function getDateSeparator(dateObj) {\n    var value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n    return value ? value[1] : '/';\n  }\n\n  IntlBase.getDateSeparator = getDateSeparator;\n  /**\n   * Returns Native Date Time pattern\n   * @private\n   * @param {string} culture\n   * @param {DateFormatOptions} options\n   * @param {Object} cldr\n   * @returns {string}\n   */\n\n  function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n    var dependable = getDependables(cldr, culture, options.calendar);\n\n    if (isBlazor()) {\n      options = compareBlazorDateFormats(options, culture);\n    }\n\n    var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n\n    if (isExcelFormat) {\n      actualPattern = actualPattern.replace(patternRegex, function (pattern) {\n        return patternMatch[pattern];\n      });\n\n      if (actualPattern.indexOf('z') !== -1) {\n        var tLength = actualPattern.match(/z/g).length;\n        var timeZonePattern = void 0;\n        var options_1 = {\n          'timeZone': {}\n        };\n        options_1.numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n        options_1.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n        var value = new Date();\n        var timezone = value.getTimezoneOffset();\n        var pattern = tLength < 4 ? '+H;-H' : options_1.timeZone.hourFormat;\n        pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);\n\n        if (timezone === 0) {\n          timeZonePattern = options_1.timeZone.gmtZeroFormat;\n        } else {\n          timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n          timeZonePattern = options_1.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n        }\n\n        actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n      }\n\n      actualPattern = actualPattern.replace(/ $/, '');\n    }\n\n    return actualPattern;\n  }\n\n  IntlBase.getActualDateTimeFormat = getActualDateTimeFormat; // tslint:disable-next-line:no-any\n\n  function processSymbol(actual, option) {\n    for (var i = 0; i < actual.length; i++) {\n      var mapper_1 = {\n        '.': 'decimal',\n        ',': 'group'\n      }; // tslint:disable-next-line:no-any\n\n      var matched = mapper_1[actual[i]];\n\n      if (matched === 'decimal') {\n        actual = actual.replace(/\\./g, getValue('numberMapper.numberSymbols.decimal', option) || '.');\n      } else if (matched === 'group') {\n        actual = actual.replace(/,/g, getValue('numberMapper.numberSymbols.group', option) || '.');\n      }\n    }\n\n    return actual;\n  }\n  /**\n   * Returns Native Number pattern\n   * @private\n   * @param {string} culture\n   * @param {NumberFormatOptions} options\n   * @param {Object} cldr\n   * @returns {string}\n   */\n\n\n  function getActualNumberFormat(culture, options, cldr) {\n    var dependable = getDependables(cldr, culture, '', true);\n    var parseOptions = {\n      custom: true\n    };\n    var numrericObject = dependable.numericObject;\n    var minFrac;\n    var curObj = {};\n    var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n    var type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n    var dOptions = {};\n\n    if (curMatch) {\n      dOptions.numberMapper = isBlazor() ? extend({}, dependable.numericObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n      var curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) : getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n      var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));\n      symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n      var split = symbolPattern.split(';');\n      curObj.hasNegativePattern = isBlazor() ? true : split.length > 1;\n      curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) : getFormatData(split[1] || '-' + split[0], true, curCode);\n      curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) : getFormatData(split[0], false, curCode);\n\n      if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n        minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n      }\n    }\n\n    var actualPattern;\n\n    if (IntlBase.formatRegex.test(options.format) || !options.format) {\n      extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n      parseOptions.custom = false;\n      actualPattern = '###0';\n\n      if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n        var defaultMinimum = 0;\n\n        if (parseOptions.fractionDigits) {\n          options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n        }\n\n        actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n      }\n\n      if (options.minimumIntegerDigits) {\n        actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n      }\n\n      if (options.useGrouping) {\n        actualPattern = groupingPattern(actualPattern);\n      }\n\n      if (parseOptions.type === 'currency' || parseOptions.type && isBlazor()) {\n        if (isBlazor() && parseOptions.type !== 'currency') {\n          curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n          curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n        }\n\n        var cPattern = actualPattern;\n        actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n\n        if (curObj.hasNegativePattern || isBlazor()) {\n          actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n        }\n      }\n\n      if (parseOptions.type === 'percent' && !isBlazor()) {\n        actualPattern += ' %';\n      }\n    } else {\n      actualPattern = options.format.replace(/\\'/g, '\"');\n    }\n\n    if (Object.keys(dOptions).length > 0) {\n      actualPattern = processSymbol(actualPattern, dOptions);\n    }\n\n    return actualPattern;\n  }\n\n  IntlBase.getActualNumberFormat = getActualNumberFormat;\n\n  function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n    pattern += '.';\n\n    for (var a = 0; a < minDigits; a++) {\n      pattern += '0';\n    }\n\n    if (minDigits < maxDigits) {\n      var diff = maxDigits - minDigits;\n\n      for (var b = 0; b < diff; b++) {\n        pattern += '#';\n      }\n    }\n\n    return pattern;\n  }\n\n  function minimumIntegerPattern(pattern, digits) {\n    var temp = pattern.split('.');\n    var integer = '';\n\n    for (var x = 0; x < digits; x++) {\n      integer += '0';\n    }\n\n    return temp[1] ? integer + '.' + temp[1] : integer;\n  }\n\n  function groupingPattern(pattern) {\n    var temp = pattern.split('.');\n    var integer = temp[0];\n    var no = 3 - integer.length % 3;\n    var hash = no && no === 1 ? '#' : no === 2 ? '##' : '';\n    integer = hash + integer;\n    pattern = '';\n\n    for (var x = integer.length - 1; x > 0; x = x - 3) {\n      pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n    }\n\n    pattern = pattern.slice(1);\n    return temp[1] ? pattern + '.' + temp[1] : pattern;\n  }\n\n  function getWeekData(culture, cldr) {\n    var firstDay = defaultFirstDay;\n    var mapper = getValue('supplemental.weekData.firstDay', cldr);\n    var iCulture = culture;\n\n    if (/en-/.test(iCulture)) {\n      iCulture = iCulture.slice(3);\n    }\n\n    iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n\n    if (mapper) {\n      firstDay = mapper[iCulture] || defaultFirstDay;\n    }\n\n    return firstDayMapper[firstDay];\n  }\n\n  IntlBase.getWeekData = getWeekData;\n})(IntlBase || (IntlBase = {}));","map":{"version":3,"sources":["D:/developing/projects/whiteboard/node_modules/@syncfusion/ej2-base/src/intl/intl-base.js"],"names":["defaultCurrencyCode","getValue","isNullOrUndefined","extend","isBlazor","ParserBase","parser","DateFormat","NumberFormat","isUndefined","blazorCultureFormats","IntlBase","negativeDataRegex","customRegex","latnParseRegex","fractionRegex","defaultCurrency","mapper","patternRegex","patternMatch","dateConverterMapper","defaultFirstDay","islamicRegex","firstDayMapper","formatRegex","currencyFormatRegex","curWithoutNumberRegex","typeMapper","dateParseRegex","basicPatterns","defaultObject","blazorDefaultObject","monthIndex","month","days","patternMatcher","C","P","N","A","E","getResultantPattern","skeleton","dateObject","type","isIslamic","blazorCulture","resPattern","iType","compareBlazorDateFormats","format","indexOf","dPattern","tPattern","replace","getDependables","cldr","culture","mode","isNumber","ret","calendartype","parserObject","getMainObject","numericObject","dateString","getSymbolPattern","numSystem","obj","isAccount","ConvertDateToWeekFormat","convertMapper","match","tempString","length","formatOptions","curFormatMapper","getProperNumericSkeleton","matches","pattern","toUpperCase","fractionDigits","parseInt","getFormatData","needFraction","cSymbol","fractionOnly","nData","nlead","nend","changeCurrencySymbol","groupPattern","fraction","fmatch","minimumFraction","maximumFraction","val","sym","getCurrencySymbol","currencyCode","altSymbol","symbol","getCurrency","customFormat","dOptions","options","formatSplit","split","data","i","customNumberFormat","pData","minusSymbol","numObject","cOptions","minimumFractionDigits","maximumFractionDigits","undefined","integerPart","useGrouping","fractionPart","minimumIntegerDigits","lastIndexOf","isCurrencyPercent","currencySymbol","isCurrency","percentSymbol","symbolPattern","numberMapper","numberSystem","groupSeparator","numberSymbols","groupData","getGroupingDetails","parts","actual","part","loc","substr","getDateSeparator","dateObj","value","getActualDateTimeFormat","isExcelFormat","dependable","calendar","actualPattern","tLength","timeZonePattern","options_1","numMapper","getNumberMapper","getNumberingSystem","timeZone","Date","timezone","getTimezoneOffset","hourFormat","timeSeparator","gmtZeroFormat","getTimeZoneValue","gmtFormat","processSymbol","option","mapper_1","matched","getActualNumberFormat","parseOptions","custom","numrericObject","minFrac","curObj","curMatch","test","curCode","currency","hasNegativePattern","defaultMinimum","fractionDigitsPattern","minimumIntegerPattern","groupingPattern","cPattern","Object","keys","minDigits","maxDigits","a","diff","b","digits","temp","integer","x","no","hash","slice","getWeekData","firstDay","iCulture"],"mappings":"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","sourcesContent":["import { defaultCurrencyCode } from '../internationalization';\nimport { getValue, isNullOrUndefined, extend, isBlazor } from '../util';\nimport { ParserBase as parser } from './parser-base';\nimport { DateFormat } from './date-formatter';\nimport { NumberFormat } from './number-formatter';\nimport { isUndefined } from '../util';\nexport var blazorCultureFormats = {\n    'en-US': {\n        'd': 'M/d/y',\n        'D': 'EEEE, MMMM d, y',\n        'f': 'EEEE, MMMM d, y h:mm a',\n        'F': 'EEEE, MMMM d, y h:mm:s a',\n        'g': 'M/d/y h:mm a',\n        'G': 'M/d/yyyy h:mm:ss tt',\n        'm': 'MMMM d',\n        'M': 'MMMM d',\n        'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n        't': 'h:mm tt',\n        'T': 'h:m:s tt',\n        'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n        'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n        'y': 'MMMM yyyy',\n        'Y': 'MMMM yyyy'\n    }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\nexport var IntlBase;\n(function (IntlBase) {\n    // tslint:disable-next-line:max-line-length\n    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n    var fractionRegex = /[0-9]/g;\n    IntlBase.defaultCurrency = '$';\n    var mapper = ['infinity', 'nan', 'group', 'decimal'];\n    var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n    var patternMatch = {\n        'G': '',\n        'M': 'm',\n        'L': 'm',\n        'H': 'h',\n        'c': 'd',\n        '\\'': '\"',\n        ' a': ' AM/PM',\n        'yy': 'yy',\n        'y': 'yyyy',\n        'EEEE': 'dddd',\n        'E': 'ddd'\n    };\n    IntlBase.dateConverterMapper = /dddd|ddd/ig;\n    var defaultFirstDay = 'sun';\n    IntlBase.islamicRegex = /^islamic/;\n    var firstDayMapper = {\n        'sun': 0,\n        'mon': 1,\n        'tue': 2,\n        'wed': 3,\n        'thu': 4,\n        'fri': 5,\n        'sat': 6\n    };\n    IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n    var typeMapper = {\n        '$': 'isCurrency',\n        '%': 'isPercent',\n        '-': 'isNegative',\n        0: 'nlead',\n        1: 'nend'\n    };\n    IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n    /* tslint:disable:quotemark */\n    IntlBase.defaultObject = {\n        'dates': {\n            'calendars': {\n                'gregorian': {\n                    'months': {\n                        'stand-alone': {\n                            'abbreviated': {\n                                '1': 'Jan',\n                                '2': 'Feb',\n                                '3': 'Mar',\n                                '4': 'Apr',\n                                '5': 'May',\n                                '6': 'Jun',\n                                '7': 'Jul',\n                                '8': 'Aug',\n                                '9': 'Sep',\n                                '10': 'Oct',\n                                '11': 'Nov',\n                                '12': 'Dec'\n                            },\n                            'narrow': {\n                                '1': 'J',\n                                '2': 'F',\n                                '3': 'M',\n                                '4': 'A',\n                                '5': 'M',\n                                '6': 'J',\n                                '7': 'J',\n                                '8': 'A',\n                                '9': 'S',\n                                '10': 'O',\n                                '11': 'N',\n                                '12': 'D'\n                            },\n                            'wide': {\n                                '1': 'January',\n                                '2': 'February',\n                                '3': 'March',\n                                '4': 'April',\n                                '5': 'May',\n                                '6': 'June',\n                                '7': 'July',\n                                '8': 'August',\n                                '9': 'September',\n                                '10': 'October',\n                                '11': 'November',\n                                '12': 'December'\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    'eras': {\n                        'eraNames': {\n                            '0': 'Before Christ',\n                            '0-alt-variant': 'Before Common Era',\n                            '1': 'Anno Domini',\n                            \"1-alt-variant\": \"Common Era\"\n                        },\n                        'eraAbbr': {\n                            '0': 'BC',\n                            '0-alt-variant': 'BCE',\n                            '1': 'AD',\n                            '1-alt-variant': 'CE'\n                        },\n                        'eraNarrow': {\n                            '0': 'B',\n                            '0-alt-variant': 'BCE',\n                            '1': 'A',\n                            '1-alt-variant': 'CE'\n                        }\n                    },\n                    'dateFormats': {\n                        'full': 'EEEE, MMMM d, y',\n                        'long': 'MMMM d, y',\n                        'medium': 'MMM d, y',\n                        'short': 'M/d/yy'\n                    },\n                    'timeFormats': {\n                        'full': 'h:mm:ss a zzzz',\n                        'long': 'h:mm:ss a z',\n                        'medium': 'h:mm:ss a',\n                        'short': 'h:mm a'\n                    },\n                    'dateTimeFormats': {\n                        'full': \"{1} 'at' {0}\",\n                        'long': \"{1} 'at' {0}\",\n                        'medium': '{1}, {0}',\n                        'short': '{1}, {0}',\n                        'availableFormats': {\n                            'd': 'd',\n                            'E': 'ccc',\n                            'Ed': 'd E',\n                            'Ehm': 'E h:mm a',\n                            'EHm': 'E HH:mm',\n                            'Ehms': 'E h:mm:ss a',\n                            'EHms': 'E HH:mm:ss',\n                            'Gy': 'y G',\n                            'GyMMM': 'MMM y G',\n                            'GyMMMd': 'MMM d, y G',\n                            'GyMMMEd': 'E, MMM d, y G',\n                            'h': 'h a',\n                            'H': 'HH',\n                            'hm': 'h:mm a',\n                            'Hm': 'HH:mm',\n                            'hms': 'h:mm:ss a',\n                            'Hms': 'HH:mm:ss',\n                            'hmsv': 'h:mm:ss a v',\n                            'Hmsv': 'HH:mm:ss v',\n                            'hmv': 'h:mm a v',\n                            'Hmv': 'HH:mm v',\n                            'M': 'L',\n                            'Md': 'M/d',\n                            'MEd': 'E, M/d',\n                            'MMM': 'LLL',\n                            'MMMd': 'MMM d',\n                            'MMMEd': 'E, MMM d',\n                            'MMMMd': 'MMMM d',\n                            'ms': 'mm:ss',\n                            'y': 'y',\n                            'yM': 'M/y',\n                            'yMd': 'M/d/y',\n                            'yMEd': 'E, M/d/y',\n                            'yMMM': 'MMM y',\n                            'yMMMd': 'MMM d, y',\n                            'yMMMEd': 'E, MMM d, y',\n                            'yMMMM': 'MMMM y',\n                        },\n                    }\n                },\n                \"islamic\": {\n                    \"months\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"1\": \"Muh.\",\n                                \"2\": \"Saf.\",\n                                \"3\": \"Rab. I\",\n                                \"4\": \"Rab. II\",\n                                \"5\": \"Jum. I\",\n                                \"6\": \"Jum. II\",\n                                \"7\": \"Raj.\",\n                                \"8\": \"Sha.\",\n                                \"9\": \"Ram.\",\n                                \"10\": \"Shaw.\",\n                                \"11\": \"Dhuʻl-Q.\",\n                                \"12\": \"Dhuʻl-H.\"\n                            },\n                            \"narrow\": {\n                                \"1\": \"1\",\n                                \"2\": \"2\",\n                                \"3\": \"3\",\n                                \"4\": \"4\",\n                                \"5\": \"5\",\n                                \"6\": \"6\",\n                                \"7\": \"7\",\n                                \"8\": \"8\",\n                                \"9\": \"9\",\n                                \"10\": \"10\",\n                                \"11\": \"11\",\n                                \"12\": \"12\"\n                            },\n                            \"wide\": {\n                                \"1\": \"Muharram\",\n                                \"2\": \"Safar\",\n                                \"3\": \"Rabiʻ I\",\n                                \"4\": \"Rabiʻ II\",\n                                \"5\": \"Jumada I\",\n                                \"6\": \"Jumada II\",\n                                \"7\": \"Rajab\",\n                                \"8\": \"Shaʻban\",\n                                \"9\": \"Ramadan\",\n                                \"10\": \"Shawwal\",\n                                \"11\": \"Dhuʻl-Qiʻdah\",\n                                \"12\": \"Dhuʻl-Hijjah\"\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    \"eras\": {\n                        \"eraNames\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraAbbr\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraNarrow\": {\n                            \"0\": \"AH\"\n                        }\n                    },\n                    \"dateFormats\": {\n                        \"full\": \"EEEE, MMMM d, y G\",\n                        \"long\": \"MMMM d, y G\",\n                        \"medium\": \"MMM d, y G\",\n                        \"short\": \"M/d/y GGGGG\"\n                    },\n                    \"timeFormats\": {\n                        \"full\": \"h:mm:ss a zzzz\",\n                        \"long\": \"h:mm:ss a z\",\n                        \"medium\": \"h:mm:ss a\",\n                        \"short\": \"h:mm a\"\n                    },\n                    \"dateTimeFormats\": {\n                        \"full\": \"{1} 'at' {0}\",\n                        \"long\": \"{1} 'at' {0}\",\n                        \"medium\": \"{1}, {0}\",\n                        \"short\": \"{1}, {0}\",\n                        \"availableFormats\": {\n                            \"d\": \"d\",\n                            \"E\": \"ccc\",\n                            \"Ed\": \"d E\",\n                            \"Ehm\": \"E h:mm a\",\n                            \"EHm\": \"E HH:mm\",\n                            \"Ehms\": \"E h:mm:ss a\",\n                            \"EHms\": \"E HH:mm:ss\",\n                            \"Gy\": \"y G\",\n                            \"GyMMM\": \"MMM y G\",\n                            \"GyMMMd\": \"MMM d, y G\",\n                            \"GyMMMEd\": \"E, MMM d, y G\",\n                            \"h\": \"h a\",\n                            \"H\": \"HH\",\n                            \"hm\": \"h:mm a\",\n                            \"Hm\": \"HH:mm\",\n                            \"hms\": \"h:mm:ss a\",\n                            \"Hms\": \"HH:mm:ss\",\n                            \"M\": \"L\",\n                            \"Md\": \"M/d\",\n                            \"MEd\": \"E, M/d\",\n                            \"MMM\": \"LLL\",\n                            \"MMMd\": \"MMM d\",\n                            \"MMMEd\": \"E, MMM d\",\n                            \"MMMMd\": \"MMMM d\",\n                            \"ms\": \"mm:ss\",\n                            \"y\": \"y G\",\n                            \"yyyy\": \"y G\",\n                            \"yyyyM\": \"M/y GGGGG\",\n                            \"yyyyMd\": \"M/d/y GGGGG\",\n                            \"yyyyMEd\": \"E, M/d/y GGGGG\",\n                            \"yyyyMMM\": \"MMM y G\",\n                            \"yyyyMMMd\": \"MMM d, y G\",\n                            \"yyyyMMMEd\": \"E, MMM d, y G\",\n                            \"yyyyMMMM\": \"MMMM y G\",\n                            \"yyyyQQQ\": \"QQQ y G\",\n                            \"yyyyQQQQ\": \"QQQQ y G\"\n                        }\n                    }\n                }\n            },\n            'timeZoneNames': {\n                \"hourFormat\": \"+HH:mm;-HH:mm\",\n                \"gmtFormat\": \"GMT{0}\",\n                \"gmtZeroFormat\": \"GMT\",\n            }\n        },\n        'numbers': {\n            'currencies': {\n                'USD': {\n                    'displayName': 'US Dollar',\n                    'symbol': '$',\n                    'symbol-alt-narrow': '$'\n                },\n                'EUR': {\n                    'displayName': 'Euro',\n                    'symbol': '€',\n                    'symbol-alt-narrow': '€'\n                },\n                'GBP': {\n                    'displayName': 'British Pound',\n                    'symbol-alt-narrow': '£'\n                },\n            },\n            'defaultNumberingSystem': 'latn',\n            'minimumGroupingDigits': '1',\n            'symbols-numberSystem-latn': {\n                'decimal': '.',\n                'group': ',',\n                'list': ';',\n                'percentSign': '%',\n                'plusSign': '+',\n                'minusSign': '-',\n                'exponential': 'E',\n                'superscriptingExponent': '×',\n                'perMille': '‰',\n                'infinity': '∞',\n                'nan': 'NaN',\n                'timeSeparator': ':'\n            },\n            'decimalFormats-numberSystem-latn': {\n                'standard': '#,##0.###',\n            },\n            'percentFormats-numberSystem-latn': {\n                'standard': '#,##0%'\n            },\n            'currencyFormats-numberSystem-latn': {\n                'standard': '¤#,##0.00',\n                'accounting': '¤#,##0.00;(¤#,##0.00)'\n            },\n            'scientificFormats-numberSystem-latn': {\n                'standard': '#E0'\n            }\n        }\n    };\n    IntlBase.blazorDefaultObject = {\n        \"numbers\": {\n            \"mapper\": {\n                \"0\": \"0\",\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\"\n            },\n            \"mapperDigits\": \"0123456789\",\n            \"numberSymbols\": {\n                \"decimal\": \".\",\n                \"group\": \",\",\n                \"plusSign\": \"+\",\n                \"minusSign\": \"-\",\n                \"percentSign\": \"%\",\n                \"nan\": \"NaN\",\n                \"timeSeparator\": \":\",\n                \"infinity\": \"∞\"\n            },\n            \"timeSeparator\": \":\",\n            \"currencySymbol\": \"$\",\n            \"currencypData\": {\n                \"nlead\": \"$\",\n                \"nend\": \"\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"currencynData\": {\n                \"nlead\": \"($\",\n                \"nend\": \")\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            }\n        },\n        \"dates\": {\n            \"dayPeriods\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n            },\n            \"dateSeperator\": \"/\",\n            \"days\": {\n                \"abbreviated\": {\n                    \"sun\": \"Sun\",\n                    \"mon\": \"Mon\",\n                    \"tue\": \"Tue\",\n                    \"wed\": \"Wed\",\n                    \"thu\": \"Thu\",\n                    \"fri\": \"Fri\",\n                    \"sat\": \"Sat\"\n                },\n                \"short\": {\n                    \"sun\": \"Su\",\n                    \"mon\": \"Mo\",\n                    \"tue\": \"Tu\",\n                    \"wed\": \"We\",\n                    \"thu\": \"Th\",\n                    \"fri\": \"Fr\",\n                    \"sat\": \"Sa\"\n                },\n                \"wide\": {\n                    \"sun\": \"Sunday\",\n                    \"mon\": \"Monday\",\n                    \"tue\": \"Tuesday\",\n                    \"wed\": \"Wednesday\",\n                    \"thu\": \"Thursday\",\n                    \"fri\": \"Friday\",\n                    \"sat\": \"Saturday\"\n                }\n            },\n            \"months\": {\n                \"abbreviated\": {\n                    \"1\": \"Jan\",\n                    \"2\": \"Feb\",\n                    \"3\": \"Mar\",\n                    \"4\": \"Apr\",\n                    \"5\": \"May\",\n                    \"6\": \"Jun\",\n                    \"7\": \"Jul\",\n                    \"8\": \"Aug\",\n                    \"9\": \"Sep\",\n                    \"10\": \"Oct\",\n                    \"11\": \"Nov\",\n                    \"12\": \"Dec\"\n                },\n                \"wide\": {\n                    \"1\": \"January\",\n                    \"2\": \"February\",\n                    \"3\": \"March\",\n                    \"4\": \"April\",\n                    \"5\": \"May\",\n                    \"6\": \"June\",\n                    \"7\": \"July\",\n                    \"8\": \"August\",\n                    \"9\": \"September\",\n                    \"10\": \"October\",\n                    \"11\": \"November\",\n                    \"12\": \"December\"\n                }\n            },\n            \"eras\": {\n                \"1\": \"AD\"\n            }\n        }\n    };\n    /* tslint:enable:quotemark */\n    IntlBase.monthIndex = {\n        3: 'abbreviated',\n        4: 'wide',\n        5: 'narrow',\n        1: 'abbreviated'\n    };\n    /**\n     *\n     */\n    IntlBase.month = 'months';\n    IntlBase.days = 'days';\n    /**\n     * Default numerber Object\n     */\n    IntlBase.patternMatcher = {\n        C: 'currency',\n        P: 'percent',\n        N: 'decimal',\n        A: 'currency',\n        E: 'scientific'\n    };\n    /**\n     * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n     * @private\n     * @param {string} skeleton\n     * @param {Object} dateObject\n     * @param {string} type\n     * @returns {string}\n     */\n    function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n        var resPattern;\n        var iType = type || 'date';\n        if (blazorCulture) {\n            resPattern = compareBlazorDateFormats({ skeleton: skeleton }, blazorCulture).format ||\n                compareBlazorDateFormats({ skeleton: 'd' }, 'en-US').format;\n        }\n        else {\n            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n                resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n                if (iType === 'dateTime') {\n                    var dPattern = getValue('dateFormats.' + skeleton, dateObject);\n                    var tPattern = getValue('timeFormats.' + skeleton, dateObject);\n                    resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n                }\n            }\n            else {\n                resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n            }\n            if (isUndefined(resPattern) && skeleton === 'yMd') {\n                resPattern = 'M/d/y';\n            }\n        }\n        return resPattern;\n    }\n    IntlBase.getResultantPattern = getResultantPattern;\n    /**\n     * Returns the dependable object for provided cldr data and culture\n     * @private\n     * @param {Object} cldr\n     * @param {string} culture\n     * @param {boolean} isNumber\n     * @returns {Dependables}\n     */\n    function getDependables(cldr, culture, mode, isNumber) {\n        var ret = {};\n        var calendartype = mode || 'gregorian';\n        ret.parserObject = parser.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n        if (isNumber) {\n            ret.numericObject = getValue('numbers', ret.parserObject);\n        }\n        else {\n            var dateString = isBlazor() ? 'dates' : ('dates.calendars.' + calendartype);\n            ret.dateObject = getValue(dateString, ret.parserObject);\n        }\n        return ret;\n    }\n    IntlBase.getDependables = getDependables;\n    /**\n     * Returns the symbol pattern for provided parameters\n     * @private\n     * @param {string} type\n     * @param {string} numSystem\n     * @param {Object} obj\n     * @param {boolean} isAccount\n     * @returns {string}\n     */\n    function getSymbolPattern(type, numSystem, obj, isAccount) {\n        return getValue(type + 'Formats-numberSystem-' +\n            numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' +\n            numSystem + '.standard', obj) : '');\n    }\n    IntlBase.getSymbolPattern = getSymbolPattern;\n    function ConvertDateToWeekFormat(format) {\n        var convertMapper = format.match(IntlBase.dateConverterMapper);\n        if (convertMapper && isBlazor()) {\n            var tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n            return format.replace(IntlBase.dateConverterMapper, tempString);\n        }\n        return format;\n    }\n    IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n    function compareBlazorDateFormats(formatOptions, culture) {\n        var format = formatOptions.format || formatOptions.skeleton;\n        var curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n        if (!curFormatMapper) {\n            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n        }\n        if (curFormatMapper) {\n            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n            formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n        }\n        return formatOptions;\n    }\n    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n    /**\n     * Returns proper numeric skeleton\n     * @private\n     * @param {string} skeleton\n     * @returns {NumericSkeleton}\n     */\n    function getProperNumericSkeleton(skeleton) {\n        var matches = skeleton.match(IntlBase.formatRegex);\n        var ret = {};\n        var pattern = matches[1].toUpperCase();\n        ret.isAccount = (pattern === 'A');\n        /* tslint:disable no-any */\n        ret.type = IntlBase.patternMatcher[pattern];\n        if (skeleton.length > 1) {\n            ret.fractionDigits = parseInt(matches[2], 10);\n        }\n        return ret;\n    }\n    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n    /**\n     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n     * @private\n     * @param {string} pattern\n     * @param {boolean} needFraction\n     * @param {string} cSymbol\n     * @param {boolean} fractionOnly\n     * @returns {NegativeData}\n     */\n    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n        var nData = fractionOnly ? {} : { nlead: '', nend: '' };\n        var match = pattern.match(IntlBase.customRegex);\n        if (match) {\n            if (!fractionOnly) {\n                nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n                nData.nend = changeCurrencySymbol(match[10], cSymbol);\n                nData.groupPattern = match[4];\n            }\n            var fraction = match[7];\n            if (fraction && needFraction) {\n                var fmatch = fraction.match(fractionRegex);\n                if (!isNullOrUndefined(fmatch)) {\n                    nData.minimumFraction = fmatch.length;\n                }\n                else {\n                    nData.minimumFraction = 0;\n                }\n                nData.maximumFraction = fraction.length - 1;\n            }\n        }\n        return nData;\n    }\n    IntlBase.getFormatData = getFormatData;\n    /**\n     * Changes currency symbol\n     * @private\n     * @param {string} val\n     * @param {string} sym\n     * @returns {string}\n     */\n    function changeCurrencySymbol(val, sym) {\n        if (val) {\n            return val.replace(IntlBase.defaultCurrency, sym);\n        }\n        return '';\n    }\n    /**\n     * Returns currency symbol based on currency code\n     * @private\n     * @param {Object} numericObject\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n        var symbol = altSymbol ? ('.' + altSymbol) : '.symbol';\n        var getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) ||\n            getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n        return getCurrency;\n    }\n    IntlBase.getCurrencySymbol = getCurrencySymbol;\n    /**\n     * Returns formatting options for custom number format\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Dependables} obj\n     * @returns {GenericFormatOptions}\n     */\n    function customFormat(format, dOptions, obj) {\n        var options = {};\n        var formatSplit = format.split(';');\n        var data = ['pData', 'nData', 'zeroData'];\n        for (var i = 0; i < formatSplit.length; i++) {\n            options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n        }\n        if (isNullOrUndefined(options.nData)) {\n            options.nData = extend({}, options.pData);\n            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n        }\n        return options;\n    }\n    IntlBase.customFormat = customFormat;\n    /**\n     * Returns custom formatting options\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Object} numObject\n     * @returns {NegativeData}\n     */\n    function customNumberFormat(format, dOptions, numObject) {\n        var cOptions = { type: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 };\n        var pattern = format.match(IntlBase.customRegex);\n        if (isNullOrUndefined(pattern) || (pattern[5] === '' && format !== 'N/A')) {\n            cOptions.type = undefined;\n            return cOptions;\n        }\n        cOptions.nlead = pattern[1];\n        cOptions.nend = pattern[10];\n        var integerPart = pattern[6];\n        cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n        integerPart = integerPart.replace(/,/g, '');\n        var fractionPart = pattern[7];\n        if (integerPart.indexOf('0') !== -1) {\n            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n        }\n        if (!isNullOrUndefined(fractionPart)) {\n            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n            if (cOptions.minimumFractionDigits === -1) {\n                cOptions.minimumFractionDigits = 0;\n            }\n            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n                cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n            }\n        }\n        if (!isNullOrUndefined(dOptions)) {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n            if (!cOptions.isCurrency) {\n                extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n            }\n        }\n        else {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n        }\n        if (!isNullOrUndefined(numObject)) {\n            var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n            if (cOptions.useGrouping) {\n                cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n                cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n            }\n            cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n            cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n        }\n        return cOptions;\n    }\n    /**\n     * Returns formatting options for currency or percent type\n     * @private\n     * @param {string[]} parts\n     * @param {string} actual\n     * @param {string} symbol\n     * @returns {NegativeData}\n     */\n    function isCurrencyPercent(parts, actual, symbol) {\n        var options = { nlead: parts[0], nend: parts[1] };\n        for (var i = 0; i < 2; i++) {\n            var part = parts[i];\n            var loc = part.indexOf(actual);\n            if ((loc !== -1) && ((loc < part.indexOf('\\'')) || (loc > part.lastIndexOf('\\'')))) {\n                options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n                options[typeMapper[actual]] = true;\n                options.type = options.isCurrency ? 'currency' : 'percent';\n                break;\n            }\n        }\n        return options;\n    }\n    IntlBase.isCurrencyPercent = isCurrencyPercent;\n    /**\n     * Returns culture based date separator\n     * @private\n     * @param {Object} dateObj\n     * @returns {string}\n     */\n    function getDateSeparator(dateObj) {\n        var value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n        return value ? value[1] : '/';\n    }\n    IntlBase.getDateSeparator = getDateSeparator;\n    /**\n     * Returns Native Date Time pattern\n     * @private\n     * @param {string} culture\n     * @param {DateFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n        var dependable = getDependables(cldr, culture, options.calendar);\n        if (isBlazor()) {\n            options = compareBlazorDateFormats(options, culture);\n        }\n        var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n        if (isExcelFormat) {\n            actualPattern = actualPattern.replace(patternRegex, function (pattern) {\n                return patternMatch[pattern];\n            });\n            if (actualPattern.indexOf('z') !== -1) {\n                var tLength = actualPattern.match(/z/g).length;\n                var timeZonePattern = void 0;\n                var options_1 = { 'timeZone': {} };\n                options_1.numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n                options_1.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                var value = new Date();\n                var timezone = value.getTimezoneOffset();\n                var pattern = (tLength < 4) ? '+H;-H' : options_1.timeZone.hourFormat;\n                pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);\n                if (timezone === 0) {\n                    timeZonePattern = options_1.timeZone.gmtZeroFormat;\n                }\n                else {\n                    timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n                    timeZonePattern = options_1.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n                }\n                actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n            }\n            actualPattern = actualPattern.replace(/ $/, '');\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\n    // tslint:disable-next-line:no-any\n    function processSymbol(actual, option) {\n        for (var i = 0; i < actual.length; i++) {\n            var mapper_1 = { '.': 'decimal', ',': 'group' };\n            // tslint:disable-next-line:no-any\n            var matched = mapper_1[actual[i]];\n            if (matched === 'decimal') {\n                actual = actual.replace(/\\./g, getValue('numberMapper.numberSymbols.decimal', option) || '.');\n            }\n            else if (matched === 'group') {\n                actual = actual.replace(/,/g, getValue('numberMapper.numberSymbols.group', option) || '.');\n            }\n        }\n        return actual;\n    }\n    /**\n     * Returns Native Number pattern\n     * @private\n     * @param {string} culture\n     * @param {NumberFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualNumberFormat(culture, options, cldr) {\n        var dependable = getDependables(cldr, culture, '', true);\n        var parseOptions = { custom: true };\n        var numrericObject = dependable.numericObject;\n        var minFrac;\n        var curObj = {};\n        var curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n        var type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n        var dOptions = {};\n        if (curMatch) {\n            dOptions.numberMapper = isBlazor() ?\n                extend({}, dependable.numericObject) :\n                parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n            var curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) :\n                getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n            var symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, (/a/i).test(options.format));\n            symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n            var split = symbolPattern.split(';');\n            curObj.hasNegativePattern = isBlazor() ? true : (split.length > 1);\n            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) :\n                getFormatData(split[1] || '-' + split[0], true, curCode);\n            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) :\n                getFormatData(split[0], false, curCode);\n            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n                minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n            }\n        }\n        var actualPattern;\n        if ((IntlBase.formatRegex.test(options.format)) || !(options.format)) {\n            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n            parseOptions.custom = false;\n            actualPattern = '###0';\n            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n                var defaultMinimum = 0;\n                if (parseOptions.fractionDigits) {\n                    options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n                }\n                actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits ||\n                    options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n            }\n            if (options.minimumIntegerDigits) {\n                actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n            }\n            if (options.useGrouping) {\n                actualPattern = groupingPattern(actualPattern);\n            }\n            if (parseOptions.type === 'currency' || (parseOptions.type && isBlazor())) {\n                if (isBlazor() && parseOptions.type !== 'currency') {\n                    curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n                    curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n                }\n                var cPattern = actualPattern;\n                actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n                if (curObj.hasNegativePattern || isBlazor()) {\n                    actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n                }\n            }\n            if (parseOptions.type === 'percent' && !isBlazor()) {\n                actualPattern += ' %';\n            }\n        }\n        else {\n            actualPattern = options.format.replace(/\\'/g, '\"');\n        }\n        if (Object.keys(dOptions).length > 0) {\n            actualPattern = processSymbol(actualPattern, dOptions);\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualNumberFormat = getActualNumberFormat;\n    function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n        pattern += '.';\n        for (var a = 0; a < minDigits; a++) {\n            pattern += '0';\n        }\n        if (minDigits < maxDigits) {\n            var diff = maxDigits - minDigits;\n            for (var b = 0; b < diff; b++) {\n                pattern += '#';\n            }\n        }\n        return pattern;\n    }\n    function minimumIntegerPattern(pattern, digits) {\n        var temp = pattern.split('.');\n        var integer = '';\n        for (var x = 0; x < digits; x++) {\n            integer += '0';\n        }\n        return temp[1] ? (integer + '.' + temp[1]) : integer;\n    }\n    function groupingPattern(pattern) {\n        var temp = pattern.split('.');\n        var integer = temp[0];\n        var no = 3 - integer.length % 3;\n        var hash = (no && no === 1) ? '#' : (no === 2 ? '##' : '');\n        integer = hash + integer;\n        pattern = '';\n        for (var x = integer.length - 1; x > 0; x = x - 3) {\n            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n        }\n        pattern = pattern.slice(1);\n        return temp[1] ? (pattern + '.' + temp[1]) : pattern;\n    }\n    function getWeekData(culture, cldr) {\n        var firstDay = defaultFirstDay;\n        var mapper = getValue('supplemental.weekData.firstDay', cldr);\n        var iCulture = culture;\n        if ((/en-/).test(iCulture)) {\n            iCulture = iCulture.slice(3);\n        }\n        iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n        if (mapper) {\n            firstDay = mapper[iCulture] || defaultFirstDay;\n        }\n        return firstDayMapper[firstDay];\n    }\n    IntlBase.getWeekData = getWeekData;\n})(IntlBase || (IntlBase = {}));\n"]},"metadata":{},"sourceType":"module"}