{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\n\nexport function createElement(tagName, properties) {\n  //tslint:disable-next-line\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n\n      if (!ele.classList.contains(className)) {\n        ele.classList.add(className);\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    if (ele.className !== '') {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n        ele.classList.remove(className);\n      }\n    }\n  }\n\n  return elements;\n}\n\nfunction getClassList(classes) {\n  var classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\n\n\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function prepend(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n\n  toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n  if (isEval) {\n    executeScript(toElement);\n  }\n\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function append(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n\n  toElement.appendChild(docFrag);\n\n  if (isEval) {\n    executeScript(toElement);\n  }\n\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\n\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\n\n\nexport function detach(element) {\n  var parentNode = element.parentNode;\n  return parentNode.removeChild(element);\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\n\nexport function remove(element) {\n  var parentNode = element.parentNode;\n  EventHandler.clearEvents(element);\n  parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\n\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    ele.setAttribute(key, attributes[key]);\n  }\n\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n\nexport function select(selector, context) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n\nexport function selectAll(selector, context) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  var nodeList = context.querySelectorAll(selector);\n  return nodeList;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\n\nexport function closest(element, selector) {\n  var el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\n\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\n\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal = element.getAttribute(property);\n\n  if (isNullOrUndefined(attrVal)) {\n    element.setAttribute(property, value.toString());\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\n\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    Object.keys(attrs).forEach(function (key) {\n      // tslint:disable-next-line:no-any\n      element.style[key] = attrs[key];\n    });\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\n\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\n\nexport function matches(element, selector) {\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-base/src/dom.js"],"names":["EventHandler","isNullOrUndefined","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","_i","_a","length","ele","_b","classList_1","contains","add","removeClass","classList_2","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","select","selector","context","querySelector","selectAll","nodeList","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","getAttribute","toString","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","indexOf"],"mappings":"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","sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nexport function createElement(tagName, properties) {\n    //tslint:disable-next-line\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (!ele.classList.contains(className)) {\n                ele.classList.add(className);\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        if (ele.className !== '') {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                ele.classList.remove(className);\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nexport function detach(element) {\n    var parentNode = element.parentNode;\n    return parentNode.removeChild(element);\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nexport function remove(element) {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        ele.setAttribute(key, attributes[key]);\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function select(selector, context) {\n    if (context === void 0) { context = document; }\n    return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function selectAll(selector, context) {\n    if (context === void 0) { context = document; }\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal = element.getAttribute(property);\n    if (isNullOrUndefined(attrVal)) {\n        element.setAttribute(property, value.toString());\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        Object.keys(attrs).forEach(function (key) {\n            // tslint:disable-next-line:no-any\n            element.style[key] = attrs[key];\n        });\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nexport function matches(element, selector) {\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}