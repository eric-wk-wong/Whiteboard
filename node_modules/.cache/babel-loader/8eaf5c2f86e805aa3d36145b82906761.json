{"ast":null,"code":"import { IntlBase as base } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nimport { isUndefined, throwError, getValue, isNullOrUndefined, isBlazor } from '../util';\nimport { datePartMatcher } from './date-formatter';\nimport { HijriParser } from '../hijri-parser';\nvar number = 'numbers';\nvar defNoSystem = 'defaultNumberingSystem';\nvar noSystem = 'numberingSystem';\nvar standalone = 'stand-alone';\nvar curWeekDay = 'curWeekDay';\nvar latnRegex = /^[0-9]*$/;\nvar abbreviateRegex = /\\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|ccc/;\nvar timeSetter = {\n  minute: 'setMinutes',\n  hour: 'setHours',\n  second: 'setSeconds',\n  day: 'setDate',\n  month: 'setMonth',\n  milliseconds: 'setMilliseconds'\n};\nvar month = 'months';\n/* tslint:disable no-any */\n\n/**\n * Date Parser.\n * @private\n */\n\nvar DateParser =\n/** @class */\nfunction () {\n  function DateParser() {}\n  /**\n   * Returns the parser function for given skeleton.\n   * @param {string} -  Specifies the culture name to be which formatting.\n   * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n   * @param {cldr} - Specifies the global cldr data collection.\n   *  @return Function.\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  DateParser.dateParser = function (culture, option, cldr) {\n    var _this = this;\n\n    var dependable = base.getDependables(cldr, culture, option.calendar);\n    var numOptions = parser.getCurrentNumericOptions(dependable.parserObject, parser.getNumberingSystem(cldr));\n    var parseOptions = {};\n\n    if (isBlazor() && option.isServerRendered) {\n      option = base.compareBlazorDateFormats(option, culture);\n    }\n\n    var resPattern = option.format || base.getResultantPattern(option.skeleton, dependable.dateObject, option.type);\n    var regexString = '';\n    var hourOnly;\n\n    if (isUndefined(resPattern)) {\n      throwError('Format options or type given must be invalid');\n    } else {\n      parseOptions = {\n        isIslamic: base.islamicRegex.test(option.calendar),\n        pattern: resPattern,\n        evalposition: {}\n      };\n      var patternMatch = resPattern.match(base.dateParseRegex) || [];\n      var length_1 = patternMatch.length;\n      var gmtCorrection = 0;\n      var zCorrectTemp = 0;\n      var isgmtTraversed = false;\n      var nRegx = numOptions.numericRegex;\n      var numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n\n      for (var i = 0; i < length_1; i++) {\n        var str = patternMatch[i];\n        var len = str.length;\n        var char = str[0] === 'K' ? 'h' : str[0];\n        var isNumber = void 0;\n        var canUpdate = void 0;\n        var charKey = datePartMatcher[char];\n        var optional = len === 2 ? '' : '?';\n\n        if (isgmtTraversed) {\n          gmtCorrection = zCorrectTemp;\n          isgmtTraversed = false;\n        }\n\n        switch (char) {\n          case 'E':\n          case 'c':\n            // tslint:disable-next-line\n            var weekObject = parser.reverseObject(dependable.dateObject[base.days][standalone][base.monthIndex[len]]);\n            regexString += '(' + Object.keys(weekObject).join('|') + ')';\n            break;\n\n          case 'M':\n          case 'L':\n          case 'd':\n          case 'm':\n          case 's':\n          case 'h':\n          case 'H':\n          case 'f':\n            canUpdate = true;\n\n            if ((char === 'M' || char === 'L') && len > 2) {\n              // tslint:disable-next-line\n              parseOptions[charKey] = parser.reverseObject(dependable.dateObject[month][standalone][base.monthIndex[len]]);\n              /* tslint:disable no-any */\n\n              regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n            } else if (char === 'f') {\n              if (len > 3) {\n                continue;\n              }\n\n              isNumber = true;\n              regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n            } else {\n              isNumber = true;\n              regexString += '(' + nRegx + nRegx + optional + ')';\n            }\n\n            if (char === 'h') {\n              parseOptions.hour12 = true;\n            }\n\n            break;\n\n          case 'y':\n            canUpdate = isNumber = true;\n\n            if (len === 2) {\n              regexString += '(' + nRegx + nRegx + ')';\n            } else {\n              regexString += '(' + nRegx + '{' + len + ',})';\n            }\n\n            break;\n\n          case 'a':\n            canUpdate = true;\n            parseOptions[charKey] = parser.reverseObject(getValue('dayPeriods.format.wide', dependable.dateObject));\n            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n            break;\n\n          case 'G':\n            canUpdate = true;\n            var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';\n            parseOptions[charKey] = parser.reverseObject(getValue('eras.' + eText, dependable.dateObject));\n            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n            break;\n\n          case 'z':\n            var tval = new Date().getTimezoneOffset();\n            canUpdate = tval !== 0;\n            parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n            var tzone = parseOptions[charKey];\n            hourOnly = len < 4;\n            var hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n            hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n            regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n            isgmtTraversed = true;\n            zCorrectTemp = hourOnly ? 6 : 12;\n            break;\n\n          case '\\'':\n            var iString = str.replace(/\\'/g, '');\n            regexString += '(' + iString + ')?';\n            break;\n\n          default:\n            regexString += '([\\\\D])';\n            break;\n        }\n\n        if (canUpdate) {\n          parseOptions.evalposition[charKey] = {\n            isNumber: isNumber,\n            pos: i + 1 + gmtCorrection,\n            hourOnly: hourOnly\n          };\n        }\n\n        if (i === length_1 - 1 && !isNullOrUndefined(regexString)) {\n          parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n        }\n      }\n    }\n\n    return function (value) {\n      var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);\n\n      if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n        return null;\n      }\n\n      if (parseOptions.isIslamic) {\n        var dobj = {};\n        var tYear = parsedDateParts.year;\n        var tDate = parsedDateParts.day;\n        var tMonth = parsedDateParts.month;\n        var ystrig = tYear ? tYear + '' : '';\n        var is2DigitYear = ystrig.length === 2;\n\n        if (!tYear || !tMonth || !tDate || is2DigitYear) {\n          dobj = HijriParser.getHijriDate(new Date());\n        }\n\n        if (is2DigitYear) {\n          tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n        } // tslint:disable-next-line\n\n\n        var dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n        parsedDateParts.year = dateObject.getFullYear();\n        parsedDateParts.month = dateObject.getMonth() + 1;\n        parsedDateParts.day = dateObject.getDate();\n      }\n\n      return _this.getDateObject(parsedDateParts);\n    };\n  };\n  /* tslint:disable */\n\n  /**\n   * Returns date object for provided date options\n   * @param {DateParts} options\n   * @param {Date} value\n   * @returns {Date}\n   */\n\n\n  DateParser.getDateObject = function (options, value) {\n    var res = value || new Date();\n    res.setMilliseconds(0);\n    var tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n    var y = options.year;\n    var desig = options.designator;\n    var tzone = options.timeZone;\n\n    if (!isUndefined(y)) {\n      var len = (y + '').length;\n\n      if (len <= 2) {\n        var century = Math.floor(res.getFullYear() / 100) * 100;\n        y += century;\n      }\n\n      res.setFullYear(y);\n    }\n\n    for (var _i = 0, tKeys_1 = tKeys; _i < tKeys_1.length; _i++) {\n      var key = tKeys_1[_i];\n      var tValue = options[key];\n\n      if (isUndefined(tValue) && key === \"day\") {\n        res.setDate(1);\n      }\n\n      if (!isUndefined(tValue)) {\n        if (key === 'month') {\n          tValue -= 1;\n\n          if (tValue < 0 || tValue > 11) {\n            return new Date('invalid');\n          }\n\n          var pDate = res.getDate();\n          res.setDate(1);\n          res[timeSetter[key]](tValue);\n          var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n          res.setDate(pDate < lDate ? pDate : lDate);\n        } else {\n          if (key === 'day') {\n            var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n\n            if (tValue < 1 || tValue > lastDay) {\n              return null;\n            }\n          }\n\n          res[timeSetter[key]](tValue);\n        }\n      }\n    }\n\n    if (!isUndefined(desig)) {\n      var hour = res.getHours();\n\n      if (desig === 'pm') {\n        res.setHours(hour + (hour === 12 ? 0 : 12));\n      } else if (hour === 12) {\n        res.setHours(0);\n      }\n    }\n\n    if (!isUndefined(tzone)) {\n      var tzValue = tzone - res.getTimezoneOffset();\n\n      if (tzValue !== 0) {\n        res.setMinutes(res.getMinutes() + tzValue);\n      }\n    }\n\n    return res;\n  };\n  /**\n   * Returns date parsing options for provided value along with parse and numeric options\n   * @param {string} value\n   * @param {ParseOptions} parseOptions\n   * @param {NumericOptions} num\n   * @returns {DateParts}\n   */\n\n\n  DateParser.internalDateParse = function (value, parseOptions, num) {\n    var matches = value.match(parseOptions.parserRegex);\n    var retOptions = {\n      'hour': 0,\n      'minute': 0,\n      'second': 0\n    };\n    var nRegx = num.numericRegex;\n\n    if (isNullOrUndefined(matches)) {\n      return null;\n    } else {\n      var props = Object.keys(parseOptions.evalposition);\n\n      for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\n        var prop = props_1[_i];\n        var curObject = parseOptions.evalposition[prop];\n        var matchString = matches[curObject.pos];\n\n        if (curObject.isNumber) {\n          retOptions[prop] = this.internalNumberParser(matchString, num);\n        } else {\n          if (prop === 'timeZone' && !isUndefined(matchString)) {\n            var pos = curObject.pos;\n            var val = void 0;\n            var tmatch = matches[pos + 1];\n            var flag = !isUndefined(tmatch);\n\n            if (curObject.hourOnly) {\n              val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n            } else {\n              val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n              val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n            }\n\n            if (!isNullOrUndefined(val)) {\n              retOptions[prop] = val;\n            }\n          } else {\n            retOptions[prop] = parseOptions[prop][matchString];\n          }\n        }\n      }\n\n      if (parseOptions.hour12) {\n        retOptions.hour12 = true;\n      }\n    }\n\n    return retOptions;\n  };\n  /**\n   * Returns parsed number for provided Numeric string and Numeric Options\n   * @param {string} value\n   * @param {NumericOptions} option\n   * @returns {number}\n   */\n\n\n  DateParser.internalNumberParser = function (value, option) {\n    value = parser.convertValueParts(value, option.numberParseRegex, option.numericPair);\n\n    if (latnRegex.test(value)) {\n      return +value;\n    }\n\n    return null;\n  };\n  /**\n   * Returns parsed time zone RegExp for provided hour format and time zone\n   * @param {string} hourFormat\n   * @param {base.TimeZoneOptions} tZone\n   * @param {string} nRegex\n   * @returns {string}\n   */\n\n\n  DateParser.parseTimeZoneRegx = function (hourFormat, tZone, nRegex) {\n    var pattern = tZone.gmtFormat;\n    var ret;\n    var result;\n    var cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n    var splitStr;\n    ret = hourFormat.replace('+', '\\\\+');\n\n    if (hourFormat.indexOf('HH') !== -1) {\n      ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n    } else {\n      ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n    }\n\n    splitStr = ret.split(';').map(function (str) {\n      return pattern.replace('{0}', str);\n    });\n    ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n    return ret;\n  };\n  /**\n   * Returns zone based value.\n   * @param {boolean} flag\n   * @param {string} val1\n   * @param {string} val2\n   * @param {NumericOptions} num\n   * @returns {number}\n   */\n\n\n  DateParser.getZoneValue = function (flag, val1, val2, num) {\n    var ival = flag ? val1 : val2;\n\n    if (!ival) {\n      return 0;\n    }\n\n    var value = this.internalNumberParser(ival, num);\n\n    if (flag) {\n      return -value;\n    }\n\n    return value;\n  };\n\n  return DateParser;\n}();\n\nexport { DateParser };\n/* tslint:enable */","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-base/src/intl/date-parser.js"],"names":["IntlBase","base","ParserBase","parser","isUndefined","throwError","getValue","isNullOrUndefined","isBlazor","datePartMatcher","HijriParser","number","defNoSystem","noSystem","standalone","curWeekDay","latnRegex","abbreviateRegex","timeSetter","minute","hour","second","day","month","milliseconds","DateParser","dateParser","culture","option","cldr","_this","dependable","getDependables","calendar","numOptions","getCurrentNumericOptions","parserObject","getNumberingSystem","parseOptions","isServerRendered","compareBlazorDateFormats","resPattern","format","getResultantPattern","skeleton","dateObject","type","regexString","hourOnly","isIslamic","islamicRegex","test","pattern","evalposition","patternMatch","match","dateParseRegex","length_1","length","gmtCorrection","zCorrectTemp","isgmtTraversed","nRegx","numericRegex","numMapper","getNumberMapper","i","str","len","char","isNumber","canUpdate","charKey","optional","weekObject","reverseObject","days","monthIndex","Object","keys","join","hour12","eText","tval","Date","getTimezoneOffset","tzone","hpattern","hourFormat","replace","timeSeparator","parseTimeZoneRegx","iString","pos","parserRegex","RegExp","value","parsedDateParts","internalDateParse","dobj","tYear","year","tDate","tMonth","ystrig","is2DigitYear","getHijriDate","parseInt","slice","toGregorian","date","getFullYear","getMonth","getDate","getDateObject","options","res","setMilliseconds","tKeys","y","desig","designator","timeZone","century","Math","floor","setFullYear","_i","tKeys_1","key","tValue","setDate","pDate","lDate","lastDay","getHours","setHours","tzValue","setMinutes","getMinutes","num","matches","retOptions","props","props_1","prop","curObject","matchString","internalNumberParser","val","tmatch","flag","getZoneValue","convertValueParts","numberParseRegex","numericPair","tZone","nRegex","gmtFormat","ret","result","cRegex","splitStr","indexOf","split","map","gmtZeroFormat","val1","val2","ival"],"mappings":"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","sourcesContent":["import { IntlBase as base } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nimport { isUndefined, throwError, getValue, isNullOrUndefined, isBlazor } from '../util';\nimport { datePartMatcher } from './date-formatter';\nimport { HijriParser } from '../hijri-parser';\nvar number = 'numbers';\nvar defNoSystem = 'defaultNumberingSystem';\nvar noSystem = 'numberingSystem';\nvar standalone = 'stand-alone';\nvar curWeekDay = 'curWeekDay';\nvar latnRegex = /^[0-9]*$/;\nvar abbreviateRegex = /\\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|ccc/;\nvar timeSetter = {\n    minute: 'setMinutes',\n    hour: 'setHours',\n    second: 'setSeconds',\n    day: 'setDate',\n    month: 'setMonth',\n    milliseconds: 'setMilliseconds'\n};\nvar month = 'months';\n/* tslint:disable no-any */\n/**\n * Date Parser.\n * @private\n */\nvar DateParser = /** @class */ (function () {\n    function DateParser() {\n    }\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     *  @return Function.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    DateParser.dateParser = function (culture, option, cldr) {\n        var _this = this;\n        var dependable = base.getDependables(cldr, culture, option.calendar);\n        var numOptions = parser.getCurrentNumericOptions(dependable.parserObject, parser.getNumberingSystem(cldr));\n        var parseOptions = {};\n        if (isBlazor() && option.isServerRendered) {\n            option = base.compareBlazorDateFormats(option, culture);\n        }\n        var resPattern = option.format || base.getResultantPattern(option.skeleton, dependable.dateObject, option.type);\n        var regexString = '';\n        var hourOnly;\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            parseOptions = { isIslamic: base.islamicRegex.test(option.calendar), pattern: resPattern, evalposition: {} };\n            var patternMatch = resPattern.match(base.dateParseRegex) || [];\n            var length_1 = patternMatch.length;\n            var gmtCorrection = 0;\n            var zCorrectTemp = 0;\n            var isgmtTraversed = false;\n            var nRegx = numOptions.numericRegex;\n            var numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n            for (var i = 0; i < length_1; i++) {\n                var str = patternMatch[i];\n                var len = str.length;\n                var char = (str[0] === 'K') ? 'h' : str[0];\n                var isNumber = void 0;\n                var canUpdate = void 0;\n                var charKey = datePartMatcher[char];\n                var optional = (len === 2) ? '' : '?';\n                if (isgmtTraversed) {\n                    gmtCorrection = zCorrectTemp;\n                    isgmtTraversed = false;\n                }\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        // tslint:disable-next-line\n                        var weekObject = parser.reverseObject(dependable.dateObject[base.days][standalone][base.monthIndex[len]]);\n                        regexString += '(' + Object.keys(weekObject).join('|') + ')';\n                        break;\n                    case 'M':\n                    case 'L':\n                    case 'd':\n                    case 'm':\n                    case 's':\n                    case 'h':\n                    case 'H':\n                    case 'f':\n                        canUpdate = true;\n                        if ((char === 'M' || char === 'L') && len > 2) {\n                            // tslint:disable-next-line\n                            parseOptions[charKey] = parser.reverseObject(dependable.dateObject[month][standalone][base.monthIndex[len]]);\n                            /* tslint:disable no-any */\n                            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        }\n                        else if (char === 'f') {\n                            if (len > 3) {\n                                continue;\n                            }\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n                        }\n                        else {\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + optional + ')';\n                        }\n                        if (char === 'h') {\n                            parseOptions.hour12 = true;\n                        }\n                        break;\n                    case 'y':\n                        canUpdate = isNumber = true;\n                        if (len === 2) {\n                            regexString += '(' + nRegx + nRegx + ')';\n                        }\n                        else {\n                            regexString += '(' + nRegx + '{' + len + ',})';\n                        }\n                        break;\n                    case 'a':\n                        canUpdate = true;\n                        parseOptions[charKey] = parser.reverseObject(getValue('dayPeriods.format.wide', dependable.dateObject));\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        break;\n                    case 'G':\n                        canUpdate = true;\n                        var eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        parseOptions[charKey] = parser.reverseObject(getValue('eras.' + eText, dependable.dateObject));\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n                        break;\n                    case 'z':\n                        var tval = new Date().getTimezoneOffset();\n                        canUpdate = (tval !== 0);\n                        parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n                        var tzone = parseOptions[charKey];\n                        hourOnly = (len < 4);\n                        var hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n                        hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n                        regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n                        isgmtTraversed = true;\n                        zCorrectTemp = hourOnly ? 6 : 12;\n                        break;\n                    case '\\'':\n                        var iString = str.replace(/\\'/g, '');\n                        regexString += '(' + iString + ')?';\n                        break;\n                    default:\n                        regexString += '([\\\\D])';\n                        break;\n                }\n                if (canUpdate) {\n                    parseOptions.evalposition[charKey] = { isNumber: isNumber, pos: i + 1 + gmtCorrection, hourOnly: hourOnly };\n                }\n                if (i === length_1 - 1 && !isNullOrUndefined(regexString)) {\n                    parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n                }\n            }\n        }\n        return function (value) {\n            var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);\n            if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n                return null;\n            }\n            if (parseOptions.isIslamic) {\n                var dobj = {};\n                var tYear = parsedDateParts.year;\n                var tDate = parsedDateParts.day;\n                var tMonth = parsedDateParts.month;\n                var ystrig = tYear ? (tYear + '') : '';\n                var is2DigitYear = (ystrig.length === 2);\n                if (!tYear || !tMonth || !tDate || is2DigitYear) {\n                    dobj = HijriParser.getHijriDate(new Date());\n                }\n                if (is2DigitYear) {\n                    tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n                }\n                // tslint:disable-next-line\n                var dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n                parsedDateParts.year = dateObject.getFullYear();\n                parsedDateParts.month = dateObject.getMonth() + 1;\n                parsedDateParts.day = dateObject.getDate();\n            }\n            return _this.getDateObject(parsedDateParts);\n        };\n    };\n    /* tslint:disable */\n    /**\n     * Returns date object for provided date options\n     * @param {DateParts} options\n     * @param {Date} value\n     * @returns {Date}\n     */\n    DateParser.getDateObject = function (options, value) {\n        var res = value || new Date();\n        res.setMilliseconds(0);\n        var tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n        var y = options.year;\n        var desig = options.designator;\n        var tzone = options.timeZone;\n        if (!isUndefined(y)) {\n            var len = (y + '').length;\n            if (len <= 2) {\n                var century = Math.floor(res.getFullYear() / 100) * 100;\n                y += century;\n            }\n            res.setFullYear(y);\n        }\n        for (var _i = 0, tKeys_1 = tKeys; _i < tKeys_1.length; _i++) {\n            var key = tKeys_1[_i];\n            var tValue = options[key];\n            if (isUndefined(tValue) && key === \"day\") {\n                res.setDate(1);\n            }\n            if (!isUndefined(tValue)) {\n                if (key === 'month') {\n                    tValue -= 1;\n                    if (tValue < 0 || tValue > 11) {\n                        return new Date('invalid');\n                    }\n                    var pDate = res.getDate();\n                    res.setDate(1);\n                    res[timeSetter[key]](tValue);\n                    var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n                    res.setDate(pDate < lDate ? pDate : lDate);\n                }\n                else {\n                    if (key === 'day') {\n                        var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n                        if ((tValue < 1 || tValue > lastDay)) {\n                            return null;\n                        }\n                    }\n                    res[timeSetter[key]](tValue);\n                }\n            }\n        }\n        if (!isUndefined(desig)) {\n            var hour = res.getHours();\n            if (desig === 'pm') {\n                res.setHours(hour + (hour === 12 ? 0 : 12));\n            }\n            else if (hour === 12) {\n                res.setHours(0);\n            }\n        }\n        if (!isUndefined(tzone)) {\n            var tzValue = tzone - res.getTimezoneOffset();\n            if (tzValue !== 0) {\n                res.setMinutes(res.getMinutes() + tzValue);\n            }\n        }\n        return res;\n    };\n    /**\n     * Returns date parsing options for provided value along with parse and numeric options\n     * @param {string} value\n     * @param {ParseOptions} parseOptions\n     * @param {NumericOptions} num\n     * @returns {DateParts}\n     */\n    DateParser.internalDateParse = function (value, parseOptions, num) {\n        var matches = value.match(parseOptions.parserRegex);\n        var retOptions = { 'hour': 0, 'minute': 0, 'second': 0 };\n        var nRegx = num.numericRegex;\n        if (isNullOrUndefined(matches)) {\n            return null;\n        }\n        else {\n            var props = Object.keys(parseOptions.evalposition);\n            for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\n                var prop = props_1[_i];\n                var curObject = parseOptions.evalposition[prop];\n                var matchString = matches[curObject.pos];\n                if (curObject.isNumber) {\n                    retOptions[prop] = this.internalNumberParser(matchString, num);\n                }\n                else {\n                    if (prop === 'timeZone' && !isUndefined(matchString)) {\n                        var pos = curObject.pos;\n                        var val = void 0;\n                        var tmatch = matches[pos + 1];\n                        var flag = !isUndefined(tmatch);\n                        if (curObject.hourOnly) {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n                        }\n                        else {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n                            val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n                        }\n                        if (!isNullOrUndefined(val)) {\n                            retOptions[prop] = val;\n                        }\n                    }\n                    else {\n                        retOptions[prop] = parseOptions[prop][matchString];\n                    }\n                }\n            }\n            if (parseOptions.hour12) {\n                retOptions.hour12 = true;\n            }\n        }\n        return retOptions;\n    };\n    /**\n     * Returns parsed number for provided Numeric string and Numeric Options\n     * @param {string} value\n     * @param {NumericOptions} option\n     * @returns {number}\n     */\n    DateParser.internalNumberParser = function (value, option) {\n        value = parser.convertValueParts(value, option.numberParseRegex, option.numericPair);\n        if (latnRegex.test(value)) {\n            return +value;\n        }\n        return null;\n    };\n    /**\n     * Returns parsed time zone RegExp for provided hour format and time zone\n     * @param {string} hourFormat\n     * @param {base.TimeZoneOptions} tZone\n     * @param {string} nRegex\n     * @returns {string}\n     */\n    DateParser.parseTimeZoneRegx = function (hourFormat, tZone, nRegex) {\n        var pattern = tZone.gmtFormat;\n        var ret;\n        var result;\n        var cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n        var splitStr;\n        ret = hourFormat.replace('+', '\\\\+');\n        if (hourFormat.indexOf('HH') !== -1) {\n            ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n        }\n        else {\n            ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n        }\n        splitStr = (ret.split(';').map(function (str) {\n            return pattern.replace('{0}', str);\n        }));\n        ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n        return ret;\n    };\n    /**\n     * Returns zone based value.\n     * @param {boolean} flag\n     * @param {string} val1\n     * @param {string} val2\n     * @param {NumericOptions} num\n     * @returns {number}\n     */\n    DateParser.getZoneValue = function (flag, val1, val2, num) {\n        var ival = flag ? val1 : val2;\n        if (!ival) {\n            return 0;\n        }\n        var value = this.internalNumberParser(ival, num);\n        if (flag) {\n            return -value;\n        }\n        return value;\n    };\n    return DateParser;\n}());\nexport { DateParser };\n/* tslint:enable */\n"]},"metadata":{},"sourceType":"module"}