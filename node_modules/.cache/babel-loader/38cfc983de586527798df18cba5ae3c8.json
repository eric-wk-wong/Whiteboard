{"ast":null,"code":"import { ValueFormatter } from './value-formatter';\n/**\n * CsvHelper class\n * @private\n */\n\nvar CsvHelper =\n/** @class */\nfunction () {\n  /* tslint:disable:no-any */\n  function CsvHelper(json) {\n    this.csvStr = '';\n    this.formatter = new ValueFormatter();\n    this.isMicrosoftBrowser = !!navigator.msSaveBlob;\n\n    if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n      this.isServerRendered = json.isServerRendered;\n    }\n\n    if (json.styles !== null && json.styles !== undefined) {\n      this.globalStyles = new Map();\n\n      for (var i = 0; i < json.styles.length; i++) {\n        if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n          this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n        }\n      }\n    } // Parses Worksheets data to DOM.        \n\n\n    if (json.worksheets !== null && json.worksheets !== undefined) {\n      this.parseWorksheet(json.worksheets[0]);\n    } //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n\n  }\n\n  CsvHelper.prototype.parseWorksheet = function (json) {\n    //Rows\n    if (json.rows !== null && json.rows !== undefined) {\n      this.parseRows(json.rows);\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseRows = function (rows) {\n    var count = 1;\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i]; //Row index\n\n      if (row.index !== null && row.index !== undefined) {\n        while (count < row.index) {\n          this.csvStr += '\\n';\n          count++;\n        }\n\n        this.parseRow(row);\n      } else {\n        throw Error('Row index is missing.');\n      }\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseRow = function (row) {\n    if (row.cells !== null && row.cells !== undefined) {\n      var count = 1;\n\n      for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\n        var cell = _a[_i]; //cell index\n\n        if (cell.index !== null && cell.index !== undefined) {\n          while (count < cell.index) {\n            this.csvStr += ',';\n            count++;\n          }\n\n          this.parseCell(cell);\n        } else {\n          throw Error('Cell index is missing.');\n        }\n      }\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  CsvHelper.prototype.parseCell = function (cell) {\n    var csv = this.csvStr;\n\n    if (cell.value !== undefined) {\n      if (cell.value instanceof Date) {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: cell.style.numberFormat\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: cell.style.numberFormat\n            }, this.isServerRendered));\n          }\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          try {\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              skeleton: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          } catch (error) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              type: 'dateTime',\n              format: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          }\n        } else {\n          csv += cell.value;\n        }\n      } else if (typeof cell.value === 'boolean') {\n        csv += cell.value ? 'TRUE' : 'FALSE';\n      } else if (typeof cell.value === 'number') {\n        if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: cell.style.numberFormat\n          }, this.isServerRendered));\n        } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n          /* tslint:disable-next-line:max-line-length */\n          csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n            format: this.globalStyles.get(cell.style.name)\n          }, this.isServerRendered));\n        } else {\n          csv += cell.value;\n        }\n      } else {\n        csv += this.parseCellValue(cell.value);\n      }\n    }\n\n    this.csvStr = csv;\n  };\n\n  CsvHelper.prototype.parseCellValue = function (value) {\n    var val = '';\n    var length = value.length;\n\n    for (var start = 0; start < length; start++) {\n      if (value[start] === '\\\"') {\n        val += value[start].replace('\\\"', '\\\"\\\"');\n      } else {\n        val += value[start];\n      }\n    }\n\n    value = val;\n\n    if (value.indexOf(',') !== -1 || value.indexOf('\\n') !== -1) {\n      return value = '\\\"' + value + '\\\"';\n    } else {\n      return value;\n    }\n  };\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName- file name to save.\n   * @param  {Blob} buffer- the content to write in file\n   */\n\n\n  CsvHelper.prototype.save = function (fileName) {\n    this.buffer = new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(this.buffer, fileName);\n    } else {\n      var dataUrl_1 = window.URL.createObjectURL(this.buffer);\n      var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      dwlLink.download = fileName;\n      dwlLink.href = dataUrl_1;\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      dwlLink.dispatchEvent(event_1);\n      setTimeout(function () {\n        window.URL.revokeObjectURL(dataUrl_1);\n      });\n    }\n  };\n\n  CsvHelper.prototype.saveAsBlob = function () {\n    return new Blob(['\\ufeff' + this.csvStr], {\n      type: 'text/csv;charset=UTF-8'\n    });\n  };\n\n  return CsvHelper;\n}();\n\nexport { CsvHelper };","map":{"version":3,"sources":["/Users/jay/Whiteboard/node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js"],"names":["ValueFormatter","CsvHelper","json","csvStr","formatter","isMicrosoftBrowser","navigator","msSaveBlob","isServerRendered","undefined","styles","globalStyles","Map","i","length","name","numberFormat","set","worksheets","parseWorksheet","prototype","rows","parseRows","count","_i","rows_1","row","index","parseRow","Error","cells","_a","cell","parseCell","csv","value","Date","style","parseCellValue","displayText","type","skeleton","error","format","has","get","val","start","replace","indexOf","save","fileName","buffer","Blob","dataUrl_1","window","URL","createObjectURL","dwlLink","document","createElementNS","download","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","saveAsBlob"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA;;;;;AAIA,IAAIC,SAAS;AAAG;AAAe,YAAY;AACvC;AACA,WAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,SAAL,GAAiB,IAAIJ,cAAJ,EAAjB;AACA,SAAKK,kBAAL,GAA0B,CAAE,CAACC,SAAS,CAACC,UAAvC;;AACA,QAAIL,IAAI,CAACM,gBAAL,KAA0B,IAA1B,IAAkCN,IAAI,CAACM,gBAAL,KAA0BC,SAAhE,EAA2E;AACvE,WAAKD,gBAAL,GAAwBN,IAAI,CAACM,gBAA7B;AACH;;AACD,QAAIN,IAAI,CAACQ,MAAL,KAAgB,IAAhB,IAAwBR,IAAI,CAACQ,MAAL,KAAgBD,SAA5C,EAAuD;AACnD,WAAKE,YAAL,GAAoB,IAAIC,GAAJ,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACQ,MAAL,CAAYI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,YAAIX,IAAI,CAACQ,MAAL,CAAYG,CAAZ,EAAeE,IAAf,KAAwBN,SAAxB,IAAqCP,IAAI,CAACQ,MAAL,CAAYG,CAAZ,EAAeG,YAAf,KAAgCP,SAAzE,EAAoF;AAChF,eAAKE,YAAL,CAAkBM,GAAlB,CAAsBf,IAAI,CAACQ,MAAL,CAAYG,CAAZ,EAAeE,IAArC,EAA2Cb,IAAI,CAACQ,MAAL,CAAYG,CAAZ,EAAeG,YAA1D;AACH;AACJ;AACJ,KAdoB,CAerB;;;AACA,QAAId,IAAI,CAACgB,UAAL,KAAoB,IAApB,IAA4BhB,IAAI,CAACgB,UAAL,KAAoBT,SAApD,EAA+D;AAC3D,WAAKU,cAAL,CAAoBjB,IAAI,CAACgB,UAAL,CAAgB,CAAhB,CAApB;AACH,KAlBoB,CAmBrB;;AACH;;AACDjB,EAAAA,SAAS,CAACmB,SAAV,CAAoBD,cAApB,GAAqC,UAAUjB,IAAV,EAAgB;AACjD;AACA,QAAIA,IAAI,CAACmB,IAAL,KAAc,IAAd,IAAsBnB,IAAI,CAACmB,IAAL,KAAcZ,SAAxC,EAAmD;AAC/C,WAAKa,SAAL,CAAepB,IAAI,CAACmB,IAApB;AACH;AACJ,GALD;AAMA;;;AACApB,EAAAA,SAAS,CAACmB,SAAV,CAAoBE,SAApB,GAAgC,UAAUD,IAAV,EAAgB;AAC5C,QAAIE,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,MAAM,GAAGJ,IAA1B,EAAgCG,EAAE,GAAGC,MAAM,CAACX,MAA5C,EAAoDU,EAAE,EAAtD,EAA0D;AACtD,UAAIE,GAAG,GAAGD,MAAM,CAACD,EAAD,CAAhB,CADsD,CAEtD;;AACA,UAAIE,GAAG,CAACC,KAAJ,KAAc,IAAd,IAAsBD,GAAG,CAACC,KAAJ,KAAclB,SAAxC,EAAmD;AAC/C,eAAOc,KAAK,GAAGG,GAAG,CAACC,KAAnB,EAA0B;AACtB,eAAKxB,MAAL,IAAe,IAAf;AACAoB,UAAAA,KAAK;AACR;;AACD,aAAKK,QAAL,CAAcF,GAAd;AACH,OAND,MAOK;AACD,cAAMG,KAAK,CAAC,uBAAD,CAAX;AACH;AACJ;AACJ,GAhBD;AAiBA;;;AACA5B,EAAAA,SAAS,CAACmB,SAAV,CAAoBQ,QAApB,GAA+B,UAAUF,GAAV,EAAe;AAC1C,QAAIA,GAAG,CAACI,KAAJ,KAAc,IAAd,IAAsBJ,GAAG,CAACI,KAAJ,KAAcrB,SAAxC,EAAmD;AAC/C,UAAIc,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAT,EAAYO,EAAE,GAAGL,GAAG,CAACI,KAA1B,EAAiCN,EAAE,GAAGO,EAAE,CAACjB,MAAzC,EAAiDU,EAAE,EAAnD,EAAuD;AACnD,YAAIQ,IAAI,GAAGD,EAAE,CAACP,EAAD,CAAb,CADmD,CAEnD;;AACA,YAAIQ,IAAI,CAACL,KAAL,KAAe,IAAf,IAAuBK,IAAI,CAACL,KAAL,KAAelB,SAA1C,EAAqD;AACjD,iBAAOc,KAAK,GAAGS,IAAI,CAACL,KAApB,EAA2B;AACvB,iBAAKxB,MAAL,IAAe,GAAf;AACAoB,YAAAA,KAAK;AACR;;AACD,eAAKU,SAAL,CAAeD,IAAf;AACH,SAND,MAOK;AACD,gBAAMH,KAAK,CAAC,wBAAD,CAAX;AACH;AACJ;AACJ;AACJ,GAlBD;AAmBA;;;AACA5B,EAAAA,SAAS,CAACmB,SAAV,CAAoBa,SAApB,GAAgC,UAAUD,IAAV,EAAgB;AAC5C,QAAIE,GAAG,GAAG,KAAK/B,MAAf;;AACA,QAAI6B,IAAI,CAACG,KAAL,KAAe1B,SAAnB,EAA8B;AAC1B,UAAIuB,IAAI,CAACG,KAAL,YAAsBC,IAA1B,EAAgC;AAC5B,YAAIJ,IAAI,CAACK,KAAL,KAAe5B,SAAf,IAA4BuB,IAAI,CAACK,KAAL,CAAWrB,YAAX,KAA4BP,SAA5D,EAAuE;AACnE;AACA,cAAI;AACAyB,YAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEK,cAAAA,IAAI,EAAE,UAAR;AAAoBC,cAAAA,QAAQ,EAAET,IAAI,CAACK,KAAL,CAAWrB;AAAzC,aAAvC,EAAgG,KAAKR,gBAArG,CAApB,CAAP;AACH,WAFD,CAGA,OAAOkC,KAAP,EAAc;AACV;AACAR,YAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEK,cAAAA,IAAI,EAAE,UAAR;AAAoBG,cAAAA,MAAM,EAAEX,IAAI,CAACK,KAAL,CAAWrB;AAAvC,aAAvC,EAA8F,KAAKR,gBAAnG,CAApB,CAAP;AACH;AACJ,SATD,MAUK,IAAIwB,IAAI,CAACK,KAAL,KAAe5B,SAAf,IAA4BuB,IAAI,CAACK,KAAL,CAAWtB,IAAX,KAAoBN,SAAhD,IAA6D,KAAKE,YAAL,CAAkBiC,GAAlB,CAAsBZ,IAAI,CAACK,KAAL,CAAWtB,IAAjC,CAAjE,EAAyG;AAC1G;AACA,cAAI;AACAmB,YAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEK,cAAAA,IAAI,EAAE,UAAR;AAAoBC,cAAAA,QAAQ,EAAE,KAAK9B,YAAL,CAAkBkC,GAAlB,CAAsBb,IAAI,CAACK,KAAL,CAAWtB,IAAjC;AAA9B,aAAvC,EAA+G,KAAKP,gBAApH,CAApB,CAAP;AACH,WAFD,CAGA,OAAOkC,KAAP,EAAc;AACV;AACAR,YAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEK,cAAAA,IAAI,EAAE,UAAR;AAAoBG,cAAAA,MAAM,EAAE,KAAKhC,YAAL,CAAkBkC,GAAlB,CAAsBb,IAAI,CAACK,KAAL,CAAWtB,IAAjC;AAA5B,aAAvC,EAA6G,KAAKP,gBAAlH,CAApB,CAAP;AACH;AACJ,SATI,MAUA;AACD0B,UAAAA,GAAG,IAAIF,IAAI,CAACG,KAAZ;AACH;AACJ,OAxBD,MAyBK,IAAI,OAAQH,IAAI,CAACG,KAAb,KAAwB,SAA5B,EAAuC;AACxCD,QAAAA,GAAG,IAAIF,IAAI,CAACG,KAAL,GAAa,MAAb,GAAsB,OAA7B;AACH,OAFI,MAGA,IAAI,OAAQH,IAAI,CAACG,KAAb,KAAwB,QAA5B,EAAsC;AACvC,YAAIH,IAAI,CAACK,KAAL,KAAe5B,SAAf,IAA4BuB,IAAI,CAACK,KAAL,CAAWrB,YAAX,KAA4BP,SAA5D,EAAuE;AACnE;AACAyB,UAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEQ,YAAAA,MAAM,EAAEX,IAAI,CAACK,KAAL,CAAWrB;AAArB,WAAvC,EAA4E,KAAKR,gBAAjF,CAApB,CAAP;AACH,SAHD,MAIK,IAAIwB,IAAI,CAACK,KAAL,KAAe5B,SAAf,IAA4BuB,IAAI,CAACK,KAAL,CAAWtB,IAAX,KAAoBN,SAAhD,IAA6D,KAAKE,YAAL,CAAkBiC,GAAlB,CAAsBZ,IAAI,CAACK,KAAL,CAAWtB,IAAjC,CAAjE,EAAyG;AAC1G;AACAmB,UAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoB,KAAKlC,SAAL,CAAemC,WAAf,CAA2BP,IAAI,CAACG,KAAhC,EAAuC;AAAEQ,YAAAA,MAAM,EAAE,KAAKhC,YAAL,CAAkBkC,GAAlB,CAAsBb,IAAI,CAACK,KAAL,CAAWtB,IAAjC;AAAV,WAAvC,EAA2F,KAAKP,gBAAhG,CAApB,CAAP;AACH,SAHI,MAIA;AACD0B,UAAAA,GAAG,IAAIF,IAAI,CAACG,KAAZ;AACH;AACJ,OAZI,MAaA;AACDD,QAAAA,GAAG,IAAI,KAAKI,cAAL,CAAoBN,IAAI,CAACG,KAAzB,CAAP;AACH;AACJ;;AACD,SAAKhC,MAAL,GAAc+B,GAAd;AACH,GAjDD;;AAkDAjC,EAAAA,SAAS,CAACmB,SAAV,CAAoBkB,cAApB,GAAqC,UAAUH,KAAV,EAAiB;AAClD,QAAIW,GAAG,GAAG,EAAV;AACA,QAAIhC,MAAM,GAAGqB,KAAK,CAACrB,MAAnB;;AACA,SAAK,IAAIiC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjC,MAA5B,EAAoCiC,KAAK,EAAzC,EAA6C;AACzC,UAAIZ,KAAK,CAACY,KAAD,CAAL,KAAiB,IAArB,EAA2B;AACvBD,QAAAA,GAAG,IAAIX,KAAK,CAACY,KAAD,CAAL,CAAaC,OAAb,CAAqB,IAArB,EAA2B,MAA3B,CAAP;AACH,OAFD,MAGK;AACDF,QAAAA,GAAG,IAAIX,KAAK,CAACY,KAAD,CAAZ;AACH;AACJ;;AACDZ,IAAAA,KAAK,GAAGW,GAAR;;AACA,QAAIX,KAAK,CAACc,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxB,IAA6Bd,KAAK,CAACc,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA1D,EAA6D;AACzD,aAAOd,KAAK,GAAG,OAAOA,KAAP,GAAe,IAA9B;AACH,KAFD,MAGK;AACD,aAAOA,KAAP;AACH;AACJ,GAlBD;AAmBA;;;;;;;AAKAlC,EAAAA,SAAS,CAACmB,SAAV,CAAoB8B,IAApB,GAA2B,UAAUC,QAAV,EAAoB;AAC3C,SAAKC,MAAL,GAAc,IAAIC,IAAJ,CAAS,CAAC,WAAW,KAAKlD,MAAjB,CAAT,EAAmC;AAAEqC,MAAAA,IAAI,EAAE;AAAR,KAAnC,CAAd;;AACA,QAAI,KAAKnC,kBAAT,EAA6B;AACzBC,MAAAA,SAAS,CAACC,UAAV,CAAqB,KAAK6C,MAA1B,EAAkCD,QAAlC;AACH,KAFD,MAGK;AACD,UAAIG,SAAS,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,KAAKL,MAAhC,CAAhB;AACA,UAAIM,OAAO,GAAGC,QAAQ,CAACC,eAAT,CAAyB,8BAAzB,EAAyD,GAAzD,CAAd;AACAF,MAAAA,OAAO,CAACG,QAAR,GAAmBV,QAAnB;AACAO,MAAAA,OAAO,CAACI,IAAR,GAAeR,SAAf;AACA,UAAIS,OAAO,GAAGJ,QAAQ,CAACK,WAAT,CAAqB,YAArB,CAAd;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAkB,OAAlB,EAA2B,IAA3B,EAAiC,IAAjC;AACAP,MAAAA,OAAO,CAACQ,aAAR,CAAsBH,OAAtB;AACAI,MAAAA,UAAU,CAAC,YAAY;AACnBZ,QAAAA,MAAM,CAACC,GAAP,CAAWY,eAAX,CAA2Bd,SAA3B;AACH,OAFS,CAAV;AAGH;AACJ,GAjBD;;AAkBArD,EAAAA,SAAS,CAACmB,SAAV,CAAoBiD,UAApB,GAAiC,YAAY;AACzC,WAAO,IAAIhB,IAAJ,CAAS,CAAC,WAAW,KAAKlD,MAAjB,CAAT,EAAmC;AAAEqC,MAAAA,IAAI,EAAE;AAAR,KAAnC,CAAP;AACH,GAFD;;AAGA,SAAOvC,SAAP;AACH,CApK8B,EAA/B;;AAqKA,SAASA,SAAT","sourcesContent":["import { ValueFormatter } from './value-formatter';\n/**\n * CsvHelper class\n * @private\n */\nvar CsvHelper = /** @class */ (function () {\n    /* tslint:disable:no-any */\n    function CsvHelper(json) {\n        this.csvStr = '';\n        this.formatter = new ValueFormatter();\n        this.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n        if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n            this.isServerRendered = json.isServerRendered;\n        }\n        if (json.styles !== null && json.styles !== undefined) {\n            this.globalStyles = new Map();\n            for (var i = 0; i < json.styles.length; i++) {\n                if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n                    this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n                }\n            }\n        }\n        // Parses Worksheets data to DOM.        \n        if (json.worksheets !== null && json.worksheets !== undefined) {\n            this.parseWorksheet(json.worksheets[0]);\n        }\n        //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n    }\n    CsvHelper.prototype.parseWorksheet = function (json) {\n        //Rows\n        if (json.rows !== null && json.rows !== undefined) {\n            this.parseRows(json.rows);\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseRows = function (rows) {\n        var count = 1;\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            //Row index\n            if (row.index !== null && row.index !== undefined) {\n                while (count < row.index) {\n                    this.csvStr += '\\n';\n                    count++;\n                }\n                this.parseRow(row);\n            }\n            else {\n                throw Error('Row index is missing.');\n            }\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseRow = function (row) {\n        if (row.cells !== null && row.cells !== undefined) {\n            var count = 1;\n            for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                //cell index\n                if (cell.index !== null && cell.index !== undefined) {\n                    while (count < cell.index) {\n                        this.csvStr += ',';\n                        count++;\n                    }\n                    this.parseCell(cell);\n                }\n                else {\n                    throw Error('Cell index is missing.');\n                }\n            }\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseCell = function (cell) {\n        var csv = this.csvStr;\n        if (cell.value !== undefined) {\n            if (cell.value instanceof Date) {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else if (typeof (cell.value) === 'boolean') {\n                csv += cell.value ? 'TRUE' : 'FALSE';\n            }\n            else if (typeof (cell.value) === 'number') {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }, this.isServerRendered));\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else {\n                csv += this.parseCellValue(cell.value);\n            }\n        }\n        this.csvStr = csv;\n    };\n    CsvHelper.prototype.parseCellValue = function (value) {\n        var val = '';\n        var length = value.length;\n        for (var start = 0; start < length; start++) {\n            if (value[start] === '\\\"') {\n                val += value[start].replace('\\\"', '\\\"\\\"');\n            }\n            else {\n                val += value[start];\n            }\n        }\n        value = val;\n        if (value.indexOf(',') !== -1 || value.indexOf('\\n') !== -1) {\n            return value = '\\\"' + value + '\\\"';\n        }\n        else {\n            return value;\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     */\n    CsvHelper.prototype.save = function (fileName) {\n        this.buffer = new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(this.buffer, fileName);\n        }\n        else {\n            var dataUrl_1 = window.URL.createObjectURL(this.buffer);\n            var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            dwlLink.download = fileName;\n            dwlLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            dwlLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n            });\n        }\n    };\n    CsvHelper.prototype.saveAsBlob = function () {\n        return new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n    };\n    return CsvHelper;\n}());\nexport { CsvHelper };\n"]},"metadata":{},"sourceType":"module"}