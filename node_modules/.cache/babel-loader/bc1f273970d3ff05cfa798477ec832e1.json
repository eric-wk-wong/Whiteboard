{"ast":null,"code":"/**\n * Parser\n */\nvar defaultNumberingSystem = {\n  'latn': {\n    '_digits': '0123456789',\n    '_type': 'numeric'\n  }\n};\nimport { isUndefined, getValue } from '../util';\nvar latnRegex = /^[0-9]*$/;\nvar defaultNumberSymbols = {\n  'decimal': '.',\n  'group': ',',\n  'percentSign': '%',\n  'plusSign': '+',\n  'minusSign': '-',\n  'infinity': 'âˆž',\n  'nan': 'NaN',\n  'exponential': 'E'\n};\nvar latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\n\nvar ParserBase =\n/** @class */\nfunction () {\n  function ParserBase() {}\n  /**\n   * Returns the cldr object for the culture specifies\n   * @param {Object} obj - Specifies the object from which culture object to be acquired.\n   * @param {string} cName - Specifies the culture name.\n   * @returns {Object}\n   */\n\n\n  ParserBase.getMainObject = function (obj, cName) {\n    return getValue('main.' + cName, obj);\n  };\n  /**\n   * Returns the numbering system object from given cldr data.\n   * @param {Object} obj - Specifies the object from which number system is acquired.\n   * @returns {Object}\n   */\n\n\n  ParserBase.getNumberingSystem = function (obj) {\n    return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n  };\n  /**\n   * Returns the reverse of given object keys or keys specified.\n   * @param {Object} prop - Specifies the object to be reversed.\n   * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n   * @returns {Object}\n   */\n\n\n  ParserBase.reverseObject = function (prop, keys) {\n    var propKeys = keys || Object.keys(prop);\n    var res = {};\n\n    for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {\n      var key = propKeys_1[_i];\n      /* tslint:disable no-any */\n\n      if (!res.hasOwnProperty(prop[key])) {\n        res[prop[key]] = key;\n      }\n    }\n\n    return res;\n  };\n  /**\n   * Returns the symbol regex by skipping the escape sequence.\n   * @param {string[]} props - Specifies the array values to be skipped.\n   * @returns {RegExp}\n   */\n\n\n  ParserBase.getSymbolRegex = function (props) {\n    var regexStr = props.map(function (str) {\n      return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    }).join('|');\n    return new RegExp(regexStr, 'g');\n  };\n\n  ParserBase.getSymbolMatch = function (prop) {\n    var matchKeys = Object.keys(defaultNumberSymbols);\n    var ret = {};\n\n    for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {\n      var key = matchKeys_1[_i];\n      ret[prop[key]] = defaultNumberSymbols[key];\n    }\n\n    return ret;\n  };\n  /**\n   * Returns regex string for provided value\n   * @param {string} val\n   * @returns {string}\n   */\n\n\n  ParserBase.constructRegex = function (val) {\n    var len = val.length;\n    var ret = '';\n\n    for (var i = 0; i < len; i++) {\n      if (i !== len - 1) {\n        ret += val[i] + '|';\n      } else {\n        ret += val[i];\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns the replaced value of matching regex and obj mapper.\n   * @param {string} value - Specifies the  values to be replaced.\n   * @param {RegExp} regex - Specifies the  regex to search.\n   * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n   * @returns {string}\n   */\n\n\n  ParserBase.convertValueParts = function (value, regex, obj) {\n    return value.replace(regex, function (str) {\n      return obj[str];\n    });\n  };\n  /**\n   * Returns default numbering system object for formatting from cldr data\n   * @param {Object} obj\n   * @returns {NumericObject}\n   */\n\n\n  ParserBase.getDefaultNumberingSystem = function (obj) {\n    var ret = {};\n    ret.obj = getValue('numbers', obj);\n    ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n    return ret;\n  };\n  /**\n   * Returns the replaced value of matching regex and obj mapper.\n   */\n\n\n  ParserBase.getCurrentNumericOptions = function (curObj, numberSystem, needSymbols) {\n    var ret = {};\n    var cur = this.getDefaultNumberingSystem(curObj);\n\n    if (!isUndefined(cur.nSystem)) {\n      var digits = getValue(cur.nSystem + '._digits', numberSystem);\n\n      if (!isUndefined(digits)) {\n        ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n        ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n        ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n\n        if (needSymbols) {\n          ret.numericRegex = digits[0] + '-' + digits[9];\n          ret.symbolNumberSystem = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n          ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n          ret.numberSystem = cur.nSystem;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns number mapper object for the provided cldr data\n   * @param {Object} curObj\n   * @param {Object} numberSystem\n   * @param {boolean} isNumber\n   * @returns {NumberMapper}\n   */\n\n\n  ParserBase.getNumberMapper = function (curObj, numberSystem, isNumber) {\n    var ret = {\n      mapper: {}\n    };\n    var cur = this.getDefaultNumberingSystem(curObj);\n\n    if (!isUndefined(cur.nSystem)) {\n      ret.numberSystem = cur.nSystem;\n      ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n      ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n      var digits = getValue(cur.nSystem + '._digits', numberSystem);\n\n      if (!isUndefined(digits)) {\n        for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {\n          var i = latnNumberSystem_1[_i];\n          ret.mapper[i] = digits[i];\n        }\n      }\n    }\n\n    return ret;\n  };\n\n  ParserBase.nPair = 'numericPair';\n  ParserBase.nRegex = 'numericRegex';\n  ParserBase.numberingSystems = defaultNumberingSystem;\n  return ParserBase;\n}();\n\nexport { ParserBase };","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-base/src/intl/parser-base.js"],"names":["defaultNumberingSystem","isUndefined","getValue","latnRegex","defaultNumberSymbols","latnNumberSystem","ParserBase","getMainObject","obj","cName","getNumberingSystem","numberingSystems","reverseObject","prop","keys","propKeys","Object","res","_i","propKeys_1","length","key","hasOwnProperty","getSymbolRegex","props","regexStr","map","str","replace","join","RegExp","getSymbolMatch","matchKeys","ret","matchKeys_1","constructRegex","val","len","i","convertValueParts","value","regex","getDefaultNumberingSystem","nSystem","getCurrentNumericOptions","curObj","numberSystem","needSymbols","cur","digits","numericPair","numberParseRegex","numericRegex","symbolNumberSystem","symbolMatch","getNumberMapper","isNumber","mapper","numberSymbols","timeSeparator","latnNumberSystem_1","nPair","nRegex"],"mappings":"AAAA;;;AAGA,IAAIA,sBAAsB,GAAG;AACzB,UAAQ;AACJ,eAAW,YADP;AAEJ,aAAS;AAFL;AADiB,CAA7B;AAMA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,IAAIC,SAAS,GAAG,UAAhB;AACA,IAAIC,oBAAoB,GAAG;AACvB,aAAW,GADY;AAEvB,WAAS,GAFc;AAGvB,iBAAe,GAHQ;AAIvB,cAAY,GAJW;AAKvB,eAAa,GALU;AAMvB,cAAY,GANW;AAOvB,SAAO,KAPgB;AAQvB,iBAAe;AARQ,CAA3B;AAUA,IAAIC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAvB;AACA;;;;;AAIA,IAAIC,UAAU;AAAG;AAAe,YAAY;AACxC,WAASA,UAAT,GAAsB,CACrB;AACD;;;;;;;;AAMAA,EAAAA,UAAU,CAACC,aAAX,GAA2B,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC7C,WAAOP,QAAQ,CAAC,UAAUO,KAAX,EAAkBD,GAAlB,CAAf;AACH,GAFD;AAGA;;;;;;;AAKAF,EAAAA,UAAU,CAACI,kBAAX,GAAgC,UAAUF,GAAV,EAAe;AAC3C,WAAON,QAAQ,CAAC,+BAAD,EAAkCM,GAAlC,CAAR,IAAkD,KAAKG,gBAA9D;AACH,GAFD;AAGA;;;;;;;;AAMAL,EAAAA,UAAU,CAACM,aAAX,GAA2B,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC7C,QAAIC,QAAQ,GAAGD,IAAI,IAAIE,MAAM,CAACF,IAAP,CAAYD,IAAZ,CAAvB;AACA,QAAII,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,UAAU,GAAGJ,QAA9B,EAAwCG,EAAE,GAAGC,UAAU,CAACC,MAAxD,EAAgEF,EAAE,EAAlE,EAAsE;AAClE,UAAIG,GAAG,GAAGF,UAAU,CAACD,EAAD,CAApB;AACA;;AACA,UAAI,CAACD,GAAG,CAACK,cAAJ,CAAmBT,IAAI,CAACQ,GAAD,CAAvB,CAAL,EAAoC;AAChCJ,QAAAA,GAAG,CAACJ,IAAI,CAACQ,GAAD,CAAL,CAAH,GAAiBA,GAAjB;AACH;AACJ;;AACD,WAAOJ,GAAP;AACH,GAXD;AAYA;;;;;;;AAKAX,EAAAA,UAAU,CAACiB,cAAX,GAA4B,UAAUC,KAAV,EAAiB;AACzC,QAAIC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAUC,GAAV,EAAe;AACpC,aAAOA,GAAG,CAACC,OAAJ,CAAY,6BAAZ,EAA2C,MAA3C,CAAP;AACH,KAFc,EAEZC,IAFY,CAEP,GAFO,CAAf;AAGA,WAAO,IAAIC,MAAJ,CAAWL,QAAX,EAAqB,GAArB,CAAP;AACH,GALD;;AAMAnB,EAAAA,UAAU,CAACyB,cAAX,GAA4B,UAAUlB,IAAV,EAAgB;AACxC,QAAImB,SAAS,GAAGhB,MAAM,CAACF,IAAP,CAAYV,oBAAZ,CAAhB;AACA,QAAI6B,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIf,EAAE,GAAG,CAAT,EAAYgB,WAAW,GAAGF,SAA/B,EAA0Cd,EAAE,GAAGgB,WAAW,CAACd,MAA3D,EAAmEF,EAAE,EAArE,EAAyE;AACrE,UAAIG,GAAG,GAAGa,WAAW,CAAChB,EAAD,CAArB;AACAe,MAAAA,GAAG,CAACpB,IAAI,CAACQ,GAAD,CAAL,CAAH,GAAiBjB,oBAAoB,CAACiB,GAAD,CAArC;AACH;;AACD,WAAOY,GAAP;AACH,GARD;AASA;;;;;;;AAKA3B,EAAAA,UAAU,CAAC6B,cAAX,GAA4B,UAAUC,GAAV,EAAe;AACvC,QAAIC,GAAG,GAAGD,GAAG,CAAChB,MAAd;AACA,QAAIa,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC1B,UAAIA,CAAC,KAAKD,GAAG,GAAG,CAAhB,EAAmB;AACfJ,QAAAA,GAAG,IAAIG,GAAG,CAACE,CAAD,CAAH,GAAS,GAAhB;AACH,OAFD,MAGK;AACDL,QAAAA,GAAG,IAAIG,GAAG,CAACE,CAAD,CAAV;AACH;AACJ;;AACD,WAAOL,GAAP;AACH,GAZD;AAaA;;;;;;;;;AAOA3B,EAAAA,UAAU,CAACiC,iBAAX,GAA+B,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBjC,GAAxB,EAA6B;AACxD,WAAOgC,KAAK,CAACZ,OAAN,CAAca,KAAd,EAAqB,UAAUd,GAAV,EAAe;AACvC,aAAOnB,GAAG,CAACmB,GAAD,CAAV;AACH,KAFM,CAAP;AAGH,GAJD;AAKA;;;;;;;AAKArB,EAAAA,UAAU,CAACoC,yBAAX,GAAuC,UAAUlC,GAAV,EAAe;AAClD,QAAIyB,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAACzB,GAAJ,GAAUN,QAAQ,CAAC,SAAD,EAAYM,GAAZ,CAAlB;AACAyB,IAAAA,GAAG,CAACU,OAAJ,GAAczC,QAAQ,CAAC,wBAAD,EAA2B+B,GAAG,CAACzB,GAA/B,CAAtB;AACA,WAAOyB,GAAP;AACH,GALD;AAMA;;;;;AAGA3B,EAAAA,UAAU,CAACsC,wBAAX,GAAsC,UAAUC,MAAV,EAAkBC,YAAlB,EAAgCC,WAAhC,EAA6C;AAC/E,QAAId,GAAG,GAAG,EAAV;AACA,QAAIe,GAAG,GAAG,KAAKN,yBAAL,CAA+BG,MAA/B,CAAV;;AACA,QAAI,CAAC5C,WAAW,CAAC+C,GAAG,CAACL,OAAL,CAAhB,EAA+B;AAC3B,UAAIM,MAAM,GAAG/C,QAAQ,CAAC8C,GAAG,CAACL,OAAJ,GAAc,UAAf,EAA2BG,YAA3B,CAArB;;AACA,UAAI,CAAC7C,WAAW,CAACgD,MAAD,CAAhB,EAA0B;AACtBhB,QAAAA,GAAG,CAACiB,WAAJ,GAAkB,KAAKtC,aAAL,CAAmBqC,MAAnB,EAA2B5C,gBAA3B,CAAlB;AACA4B,QAAAA,GAAG,CAACkB,gBAAJ,GAAuB,IAAIrB,MAAJ,CAAW,KAAKK,cAAL,CAAoBc,MAApB,CAAX,EAAwC,GAAxC,CAAvB;AACAhB,QAAAA,GAAG,CAACmB,YAAJ,GAAmB,MAAMH,MAAM,CAAC,CAAD,CAAZ,GAAkB,GAAlB,GAAwBA,MAAM,CAAC,CAAD,CAA9B,GAAoC,GAAvD;;AACA,YAAIF,WAAJ,EAAiB;AACbd,UAAAA,GAAG,CAACmB,YAAJ,GAAmBH,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,GAAkBA,MAAM,CAAC,CAAD,CAA3C;AACAhB,UAAAA,GAAG,CAACoB,kBAAJ,GAAyBnD,QAAQ,CAAC,0BAA0B8C,GAAG,CAACL,OAA/B,EAAwCK,GAAG,CAACxC,GAA5C,CAAjC;AACAyB,UAAAA,GAAG,CAACqB,WAAJ,GAAkB,KAAKvB,cAAL,CAAoBE,GAAG,CAACoB,kBAAxB,CAAlB;AACApB,UAAAA,GAAG,CAACa,YAAJ,GAAmBE,GAAG,CAACL,OAAvB;AACH;AACJ;AACJ;;AACD,WAAOV,GAAP;AACH,GAlBD;AAmBA;;;;;;;;;AAOA3B,EAAAA,UAAU,CAACiD,eAAX,GAA6B,UAAUV,MAAV,EAAkBC,YAAlB,EAAgCU,QAAhC,EAA0C;AACnE,QAAIvB,GAAG,GAAG;AAAEwB,MAAAA,MAAM,EAAE;AAAV,KAAV;AACA,QAAIT,GAAG,GAAG,KAAKN,yBAAL,CAA+BG,MAA/B,CAAV;;AACA,QAAI,CAAC5C,WAAW,CAAC+C,GAAG,CAACL,OAAL,CAAhB,EAA+B;AAC3BV,MAAAA,GAAG,CAACa,YAAJ,GAAmBE,GAAG,CAACL,OAAvB;AACAV,MAAAA,GAAG,CAACyB,aAAJ,GAAoBxD,QAAQ,CAAC,0BAA0B8C,GAAG,CAACL,OAA/B,EAAwCK,GAAG,CAACxC,GAA5C,CAA5B;AACAyB,MAAAA,GAAG,CAAC0B,aAAJ,GAAoBzD,QAAQ,CAAC,eAAD,EAAkB+B,GAAG,CAACyB,aAAtB,CAA5B;AACA,UAAIT,MAAM,GAAG/C,QAAQ,CAAC8C,GAAG,CAACL,OAAJ,GAAc,UAAf,EAA2BG,YAA3B,CAArB;;AACA,UAAI,CAAC7C,WAAW,CAACgD,MAAD,CAAhB,EAA0B;AACtB,aAAK,IAAI/B,EAAE,GAAG,CAAT,EAAY0C,kBAAkB,GAAGvD,gBAAtC,EAAwDa,EAAE,GAAG0C,kBAAkB,CAACxC,MAAhF,EAAwFF,EAAE,EAA1F,EAA8F;AAC1F,cAAIoB,CAAC,GAAGsB,kBAAkB,CAAC1C,EAAD,CAA1B;AACAe,UAAAA,GAAG,CAACwB,MAAJ,CAAWnB,CAAX,IAAgBW,MAAM,CAACX,CAAD,CAAtB;AACH;AACJ;AACJ;;AACD,WAAOL,GAAP;AACH,GAhBD;;AAiBA3B,EAAAA,UAAU,CAACuD,KAAX,GAAmB,aAAnB;AACAvD,EAAAA,UAAU,CAACwD,MAAX,GAAoB,cAApB;AACAxD,EAAAA,UAAU,CAACK,gBAAX,GAA8BX,sBAA9B;AACA,SAAOM,UAAP;AACH,CArJ+B,EAAhC;;AAsJA,SAASA,UAAT","sourcesContent":["/**\n * Parser\n */\nvar defaultNumberingSystem = {\n    'latn': {\n        '_digits': '0123456789',\n        '_type': 'numeric'\n    }\n};\nimport { isUndefined, getValue } from '../util';\nvar latnRegex = /^[0-9]*$/;\nvar defaultNumberSymbols = {\n    'decimal': '.',\n    'group': ',',\n    'percentSign': '%',\n    'plusSign': '+',\n    'minusSign': '-',\n    'infinity': 'âˆž',\n    'nan': 'NaN',\n    'exponential': 'E'\n};\nvar latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\nvar ParserBase = /** @class */ (function () {\n    function ParserBase() {\n    }\n    /**\n     * Returns the cldr object for the culture specifies\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\n     * @param {string} cName - Specifies the culture name.\n     * @returns {Object}\n     */\n    ParserBase.getMainObject = function (obj, cName) {\n        return getValue('main.' + cName, obj);\n    };\n    /**\n     * Returns the numbering system object from given cldr data.\n     * @param {Object} obj - Specifies the object from which number system is acquired.\n     * @returns {Object}\n     */\n    ParserBase.getNumberingSystem = function (obj) {\n        return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n    };\n    /**\n     * Returns the reverse of given object keys or keys specified.\n     * @param {Object} prop - Specifies the object to be reversed.\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n     * @returns {Object}\n     */\n    ParserBase.reverseObject = function (prop, keys) {\n        var propKeys = keys || Object.keys(prop);\n        var res = {};\n        for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {\n            var key = propKeys_1[_i];\n            /* tslint:disable no-any */\n            if (!res.hasOwnProperty(prop[key])) {\n                res[prop[key]] = key;\n            }\n        }\n        return res;\n    };\n    /**\n     * Returns the symbol regex by skipping the escape sequence.\n     * @param {string[]} props - Specifies the array values to be skipped.\n     * @returns {RegExp}\n     */\n    ParserBase.getSymbolRegex = function (props) {\n        var regexStr = props.map(function (str) {\n            return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }).join('|');\n        return new RegExp(regexStr, 'g');\n    };\n    ParserBase.getSymbolMatch = function (prop) {\n        var matchKeys = Object.keys(defaultNumberSymbols);\n        var ret = {};\n        for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {\n            var key = matchKeys_1[_i];\n            ret[prop[key]] = defaultNumberSymbols[key];\n        }\n        return ret;\n    };\n    /**\n     * Returns regex string for provided value\n     * @param {string} val\n     * @returns {string}\n     */\n    ParserBase.constructRegex = function (val) {\n        var len = val.length;\n        var ret = '';\n        for (var i = 0; i < len; i++) {\n            if (i !== len - 1) {\n                ret += val[i] + '|';\n            }\n            else {\n                ret += val[i];\n            }\n        }\n        return ret;\n    };\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     * @param {string} value - Specifies the  values to be replaced.\n     * @param {RegExp} regex - Specifies the  regex to search.\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n     * @returns {string}\n     */\n    ParserBase.convertValueParts = function (value, regex, obj) {\n        return value.replace(regex, function (str) {\n            return obj[str];\n        });\n    };\n    /**\n     * Returns default numbering system object for formatting from cldr data\n     * @param {Object} obj\n     * @returns {NumericObject}\n     */\n    ParserBase.getDefaultNumberingSystem = function (obj) {\n        var ret = {};\n        ret.obj = getValue('numbers', obj);\n        ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n        return ret;\n    };\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     */\n    ParserBase.getCurrentNumericOptions = function (curObj, numberSystem, needSymbols) {\n        var ret = {};\n        var cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem)) {\n            var digits = getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n                if (needSymbols) {\n                    ret.numericRegex = digits[0] + '-' + digits[9];\n                    ret.symbolNumberSystem = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n                    ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n                    ret.numberSystem = cur.nSystem;\n                }\n            }\n        }\n        return ret;\n    };\n    /**\n     * Returns number mapper object for the provided cldr data\n     * @param {Object} curObj\n     * @param {Object} numberSystem\n     * @param {boolean} isNumber\n     * @returns {NumberMapper}\n     */\n    ParserBase.getNumberMapper = function (curObj, numberSystem, isNumber) {\n        var ret = { mapper: {} };\n        var cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem)) {\n            ret.numberSystem = cur.nSystem;\n            ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n            ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n            var digits = getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {\n                    var i = latnNumberSystem_1[_i];\n                    ret.mapper[i] = digits[i];\n                }\n            }\n        }\n        return ret;\n    };\n    ParserBase.nPair = 'numericPair';\n    ParserBase.nRegex = 'numericRegex';\n    ParserBase.numberingSystems = defaultNumberingSystem;\n    return ParserBase;\n}());\nexport { ParserBase };\n"]},"metadata":{},"sourceType":"module"}