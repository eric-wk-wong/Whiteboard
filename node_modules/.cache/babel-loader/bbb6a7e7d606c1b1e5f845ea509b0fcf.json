{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base'; // import { IValueFormatter } from '../base/interface';\n\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n\nvar ValueFormatter =\n/** @class */\nfunction () {\n  function ValueFormatter(cultureName) {\n    this.intl = new Internationalization(); // if (!isNullOrUndefined(cultureName)) {\n    //     this.intl.culture = cultureName;\n    // }\n  }\n\n  ValueFormatter.prototype.getFormatFunction = function (format, isServerRendered) {\n    if (format.type) {\n      if (isServerRendered) {\n        format.isServerRendered = true;\n      }\n\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  }; // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n  //     if ((<DateFormatOptions>format).type) {\n  //         return this.intl.getDateParser(<DateFormatOptions>format);\n  //     } else {\n  //         return this.intl.getNumberParser(<DateFormatOptions>format);\n  //     }\n  // }\n  // public fromView(value: string, format: Function, type?: string): string | number | Date {\n  //     if (type === 'date' || type === 'datetime' || type === 'number') {\n  //         return format(value);\n  //     } else {\n  //         return value;\n  //     }\n  // }\n\n\n  ValueFormatter.prototype.toView = function (value, format) {\n    var result = value;\n\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n\n    return result;\n  }; // public setCulture(cultureName: string): void {\n  //     if (!isNullOrUndefined(cultureName)) {\n  //         setCulture(cultureName);\n  //     }\n  // }\n\n  /* tslint:disable:no-any */\n\n\n  ValueFormatter.prototype.displayText = function (value, format, isServerRendered) {\n    return this.toView(value, this.getFormatFunction(format, isServerRendered));\n  };\n\n  return ValueFormatter;\n}();\n\nexport { ValueFormatter };","map":{"version":3,"sources":["D:/developing/projects/whiteboard2.0/node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js"],"names":["isNullOrUndefined","Internationalization","ValueFormatter","cultureName","intl","prototype","getFormatFunction","format","isServerRendered","type","getDateFormat","getNumberFormat","toView","value","result","displayText"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,SAASC,oBAAT,QAAqC,sBAArC,C,CACA;;AACA;;;;;AAIA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACjC,SAAKC,IAAL,GAAY,IAAIH,oBAAJ,EAAZ,CADiC,CAEjC;AACA;AACA;AACH;;AACDC,EAAAA,cAAc,CAACG,SAAf,CAAyBC,iBAAzB,GAA6C,UAAUC,MAAV,EAAkBC,gBAAlB,EAAoC;AAC7E,QAAID,MAAM,CAACE,IAAX,EAAiB;AACb,UAAID,gBAAJ,EAAsB;AAClBD,QAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AACH;;AACD,aAAO,KAAKJ,IAAL,CAAUM,aAAV,CAAwBH,MAAxB,CAAP;AACH,KALD,MAMK;AACD,aAAO,KAAKH,IAAL,CAAUO,eAAV,CAA0BJ,MAA1B,CAAP;AACH;AACJ,GAVD,CAP4C,CAkB5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,cAAc,CAACG,SAAf,CAAyBO,MAAzB,GAAkC,UAAUC,KAAV,EAAiBN,MAAjB,EAAyB;AACvD,QAAIO,MAAM,GAAGD,KAAb;;AACA,QAAI,CAACb,iBAAiB,CAACO,MAAD,CAAlB,IAA8B,CAACP,iBAAiB,CAACa,KAAD,CAApD,EAA6D;AACzDC,MAAAA,MAAM,GAAGP,MAAM,CAACM,KAAD,CAAf;AACH;;AACD,WAAOC,MAAP;AACH,GAND,CAhC4C,CAuC5C;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,EAAAA,cAAc,CAACG,SAAf,CAAyBU,WAAzB,GAAuC,UAAUF,KAAV,EAAiBN,MAAjB,EAAyBC,gBAAzB,EAA2C;AAC9E,WAAO,KAAKI,MAAL,CAAYC,KAAZ,EAAmB,KAAKP,iBAAL,CAAuBC,MAAvB,EAA+BC,gBAA/B,CAAnB,CAAP;AACH,GAFD;;AAGA,SAAON,cAAP;AACH,CAjDmC,EAApC;;AAkDA,SAASA,cAAT","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\nvar ValueFormatter = /** @class */ (function () {\n    function ValueFormatter(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    ValueFormatter.prototype.getFormatFunction = function (format, isServerRendered) {\n        if (format.type) {\n            if (isServerRendered) {\n                format.isServerRendered = true;\n            }\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    ValueFormatter.prototype.toView = function (value, format) {\n        var result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    };\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    ValueFormatter.prototype.displayText = function (value, format, isServerRendered) {\n        return this.toView(value, this.getFormatFunction(format, isServerRendered));\n    };\n    return ValueFormatter;\n}());\nexport { ValueFormatter };\n"]},"metadata":{},"sourceType":"module"}