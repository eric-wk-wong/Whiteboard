{"ast":null,"code":"import { debounce, extend } from './util';\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\n\nvar EventHandler =\n/** @class */\nfunction () {\n  function EventHandler() {} // to get the event data based on element\n\n\n  EventHandler.addOrGetEventData = function (element) {\n    if ('__eventList' in element) {\n      return element.__eventList.events;\n    } else {\n      element.__eventList = {};\n      return element.__eventList.events = [];\n    }\n  };\n  /**\n   * Add an event to the specified DOM element.\n   * @param {any} element - Target HTML DOM element\n   * @param {string} eventName - A string that specifies the name of the event\n   * @param {Function} listener - Specifies the function to run when the event occurs\n   * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n   * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n   * @return {Function}\n   */\n\n\n  EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var debounceListener;\n\n    if (intDebounce) {\n      debounceListener = debounce(listener, intDebounce);\n    } else {\n      debounceListener = listener;\n    }\n\n    if (bindTo) {\n      debounceListener = debounceListener.bind(bindTo);\n    }\n\n    var event = eventName.split(' ');\n\n    for (var i = 0; i < event.length; i++) {\n      eventData.push({\n        name: event[i],\n        listener: listener,\n        debounce: debounceListener\n      });\n      element.addEventListener(event[i], debounceListener, {\n        passive: false\n      });\n    }\n\n    return debounceListener;\n  };\n  /**\n   * Remove an event listener that has been attached before.\n   * @param {any} element - Specifies the target html element to remove the event\n   * @param {string} eventName - A string that specifies the name of the event to remove\n   * @param {Function} listener - Specifies the function to remove\n   * @return {void}\n   */\n\n\n  EventHandler.remove = function (element, eventName, listener) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var event = eventName.split(' ');\n\n    var _loop_1 = function (j) {\n      var index = -1;\n      var debounceListener;\n\n      if (eventData && eventData.length !== 0) {\n        eventData.some(function (x, i) {\n          return x.name === event[j] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;\n        });\n      }\n\n      if (index !== -1) {\n        eventData.splice(index, 1);\n      }\n\n      if (debounceListener) {\n        element.removeEventListener(event[j], debounceListener);\n      }\n    };\n\n    for (var j = 0; j < event.length; j++) {\n      _loop_1(j);\n    }\n  };\n  /**\n   * Clear all the event listeners that has been previously attached to the element.\n   * @param {any} element - Specifies the target html element to clear the events\n   * @return {void}\n   */\n\n\n  EventHandler.clearEvents = function (element) {\n    var eventData;\n    var copyData;\n    eventData = EventHandler.addOrGetEventData(element);\n    copyData = extend([], copyData, eventData);\n\n    for (var i = 0; i < copyData.length; i++) {\n      element.removeEventListener(copyData[i].name, copyData[i].debounce);\n      eventData.shift();\n    }\n  };\n  /**\n   * Trigger particular event of the element.\n   * @param {any} element - Specifies the target html element to trigger the events\n   * @param {string} eventName - Specifies the event to trigger for the specified element.\n   * Can be a custom event, or any of the standard events.\n   * @param {any} eventProp - Additional parameters to pass on to the event properties\n   * @return {void}\n   */\n\n\n  EventHandler.trigger = function (element, eventName, eventProp) {\n    var eventData = EventHandler.addOrGetEventData(element);\n    var fn = null;\n\n    for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n      var event_1 = eventData_1[_i];\n\n      if (event_1.name === eventName) {\n        event_1.debounce.call(this, eventProp);\n      }\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"sources":["D:/developing/projects/Whiteboard/node_modules/@syncfusion/ej2-base/src/event-handler.js"],"names":["debounce","extend","EventHandler","addOrGetEventData","element","__eventList","events","add","eventName","listener","bindTo","intDebounce","eventData","debounceListener","bind","event","split","i","length","push","name","addEventListener","passive","remove","_loop_1","j","index","some","x","splice","removeEventListener","clearEvents","copyData","shift","trigger","eventProp","fn","_i","eventData_1","event_1","call"],"mappings":"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","sourcesContent":["import { debounce, extend } from './util';\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nvar EventHandler = /** @class */ (function () {\n    function EventHandler() {\n    }\n    // to get the event data based on element\n    EventHandler.addOrGetEventData = function (element) {\n        if ('__eventList' in element) {\n            return element.__eventList.events;\n        }\n        else {\n            element.__eventList = {};\n            return element.__eventList.events = [];\n        }\n    };\n    /**\n     * Add an event to the specified DOM element.\n     * @param {any} element - Target HTML DOM element\n     * @param {string} eventName - A string that specifies the name of the event\n     * @param {Function} listener - Specifies the function to run when the event occurs\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n     * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n     * @return {Function}\n     */\n    EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        var debounceListener;\n        if (intDebounce) {\n            debounceListener = debounce(listener, intDebounce);\n        }\n        else {\n            debounceListener = listener;\n        }\n        if (bindTo) {\n            debounceListener = debounceListener.bind(bindTo);\n        }\n        var event = eventName.split(' ');\n        for (var i = 0; i < event.length; i++) {\n            eventData.push({\n                name: event[i],\n                listener: listener,\n                debounce: debounceListener\n            });\n            element.addEventListener(event[i], debounceListener, { passive: false });\n        }\n        return debounceListener;\n    };\n    /**\n     * Remove an event listener that has been attached before.\n     * @param {any} element - Specifies the target html element to remove the event\n     * @param {string} eventName - A string that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    EventHandler.remove = function (element, eventName, listener) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        var event = eventName.split(' ');\n        var _loop_1 = function (j) {\n            var index = -1;\n            var debounceListener;\n            if (eventData && eventData.length !== 0) {\n                eventData.some(function (x, i) {\n                    return x.name === event[j] && x.listener === listener ?\n                        (index = i, debounceListener = x.debounce, true) : false;\n                });\n            }\n            if (index !== -1) {\n                eventData.splice(index, 1);\n            }\n            if (debounceListener) {\n                element.removeEventListener(event[j], debounceListener);\n            }\n        };\n        for (var j = 0; j < event.length; j++) {\n            _loop_1(j);\n        }\n    };\n    /**\n     * Clear all the event listeners that has been previously attached to the element.\n     * @param {any} element - Specifies the target html element to clear the events\n     * @return {void}\n     */\n    EventHandler.clearEvents = function (element) {\n        var eventData;\n        var copyData;\n        eventData = EventHandler.addOrGetEventData(element);\n        copyData = extend([], copyData, eventData);\n        for (var i = 0; i < copyData.length; i++) {\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\n            eventData.shift();\n        }\n    };\n    /**\n     * Trigger particular event of the element.\n     * @param {any} element - Specifies the target html element to trigger the events\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\n     * Can be a custom event, or any of the standard events.\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\n     * @return {void}\n     */\n    EventHandler.trigger = function (element, eventName, eventProp) {\n        var eventData = EventHandler.addOrGetEventData(element);\n        var fn = null;\n        for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n            var event_1 = eventData_1[_i];\n            if (event_1.name === eventName) {\n                event_1.debounce.call(this, eventProp);\n            }\n        }\n    };\n    return EventHandler;\n}());\nexport { EventHandler };\n"]},"metadata":{},"sourceType":"module"}