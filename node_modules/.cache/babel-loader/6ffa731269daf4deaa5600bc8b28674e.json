{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { getRecurrenceStringFromDate, generate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\n * Schedule CRUD operations\n */\n\nvar Crud =\n/** @class */\nfunction () {\n  function Crud(parent) {\n    this.parent = parent;\n  }\n\n  Crud.prototype.getQuery = function () {\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    return this.parent.dataModule.generateQuery(start, end);\n  };\n\n  Crud.prototype.getTable = function () {\n    if (this.parent.eventSettings.query) {\n      var query = this.parent.eventSettings.query.clone();\n      return query.fromTable;\n    }\n\n    return null;\n  };\n\n  Crud.prototype.refreshData = function (args) {\n    var _this = this;\n\n    var actionArgs = {\n      requestType: args.requestType,\n      cancel: false,\n      data: args.data,\n      addedRecords: args.editParms.addedRecords,\n      changedRecords: args.editParms.changedRecords,\n      deletedRecords: args.editParms.deletedRecords\n    };\n\n    if (this.parent.dataModule.dataManager.dataSource.offline) {\n      this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n        if (!offlineArgs.cancel) {\n          _this.parent.renderModule.refreshDataManager();\n        }\n      });\n    } else {\n      args.promise.then(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {\n          if (!onlineArgs.cancel) {\n            _this.parent.renderModule.refreshDataManager();\n          }\n        });\n      }).catch(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionFailure, {\n          error: e\n        });\n      });\n    }\n  };\n\n  Crud.prototype.addEvent = function (eventData) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowAdding) {\n      if (this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      var addEvents = eventData instanceof Array ? eventData : [eventData];\n      var args = {\n        requestType: 'eventCreate',\n        cancel: false,\n        addedRecords: addEvents,\n        changedRecords: [],\n        deletedRecords: []\n      };\n\n      if (!isBlazor()) {\n        args.data = addEvents;\n      }\n\n      this.parent.trigger(events.actionBegin, args, function (addArgs) {\n        _this.serializeData(addArgs.addedRecords);\n\n        if (!addArgs.cancel) {\n          var fields = _this.parent.eventFields;\n          var editParms = {\n            addedRecords: [],\n            changedRecords: [],\n            deletedRecords: []\n          };\n          var promise = void 0;\n\n          if (addArgs.addedRecords instanceof Array) {\n            for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n              var event_1 = _a[_i];\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(event_1, true));\n            } // tslint:disable-next-line:max-line-length\n\n\n            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n          } else {\n            var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n\n            editParms.addedRecords.push(event_2);\n            promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n          }\n\n          var crudArgs = {\n            requestType: 'eventCreated',\n            cancel: false,\n            data: addArgs.addedRecords,\n            promise: promise,\n            editParms: editParms\n          };\n\n          _this.refreshData(crudArgs);\n        }\n      });\n    }\n  };\n\n  Crud.prototype.saveEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowEditing) {\n      if (this.parent.currentAction !== 'EditFollowingEvents' && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      this.parent.currentAction = action;\n\n      if (action) {\n        switch (action) {\n          case 'EditOccurrence':\n            this.processOccurrences(eventData, action);\n            break;\n\n          case 'EditFollowingEvents':\n            this.processFollowSeries(eventData, action);\n            break;\n\n          case 'EditSeries':\n            this.processEntireSeries(eventData, action);\n            break;\n        }\n      } else {\n        var updateEvents = eventData instanceof Array ? eventData : [eventData];\n        var args = {\n          requestType: 'eventChange',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: updateEvents,\n          deletedRecords: []\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (saveArgs) {\n          _this.serializeData(saveArgs.changedRecords);\n\n          if (!saveArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (saveArgs.changedRecords instanceof Array) {\n              for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                var event_3 = _a[_i];\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(event_3, true));\n              } // tslint:disable-next-line:max-line-length\n\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n\n              editParms.changedRecords.push(event_4); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n            }\n\n            var crudArgs = {\n              requestType: 'eventChanged',\n              cancel: false,\n              data: saveArgs.data,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.deleteEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowDeleting) {\n      this.parent.currentAction = action;\n      var deleteEvents = [];\n\n      if (typeof eventData === 'string' || typeof eventData === 'number') {\n        deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n          return eventObj[_this.parent.eventFields.id] === eventData;\n        });\n      } else {\n        deleteEvents = eventData instanceof Array ? eventData : [eventData];\n      }\n\n      if (action) {\n        switch (action) {\n          case 'Delete':\n            this.processEventDelete(deleteEvents);\n            break;\n\n          case 'DeleteOccurrence':\n            this.processOccurrences(deleteEvents, action);\n            break;\n\n          case 'DeleteFollowingEvents':\n            this.processFollowSeries(deleteEvents, action);\n            break;\n\n          case 'DeleteSeries':\n            this.processEntireSeries(deleteEvents, action);\n            break;\n        }\n      } else {\n        var args = {\n          requestType: 'eventRemove',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: deleteEvents\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n          _this.serializeData(deleteArgs.deletedRecords);\n\n          if (!deleteArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (deleteArgs.deletedRecords.length > 1) {\n              for (var _i = 0, _a = deleteArgs.deletedRecords; _i < _a.length; _i++) {\n                var eventObj = _a[_i];\n                editParms.deletedRecords.push(eventObj);\n              } // tslint:disable-next-line:max-line-length\n\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              editParms.deletedRecords.push(deleteArgs.deletedRecords[0]); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n            }\n\n            _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n\n            var crudArgs = {\n              requestType: 'eventRemoved',\n              cancel: false,\n              data: deleteArgs.data,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.processOccurrences = function (eventData, action) {\n    var _this = this;\n\n    var occurenceData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n        var event_5 = eventData_1[_i];\n        occurenceData.push({\n          occurrence: event_5,\n          parent: this.getParentEvent(event_5)\n        });\n      }\n    } else {\n      occurenceData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = occurenceData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (occurenceArgs) {\n      _this.serializeData(occurenceArgs.changedRecords);\n\n      if (!occurenceArgs.cancel) {\n        var fields = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var occurrenceEvents = occurenceData instanceof Array ? occurenceData : [occurenceData];\n\n        var _loop_1 = function (a, count) {\n          var childEvent = occurenceArgs.changedRecords[a];\n          var parentEvent = occurrenceEvents[a].parent;\n          var parentException = parentEvent[fields.recurrenceException];\n\n          switch (action) {\n            case 'EditOccurrence':\n              var editedData = _this.parent.eventsProcessed.filter(function (event) {\n                return event.Guid === childEvent.Guid;\n              })[0];\n\n              var exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n\n              if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = exceptionDate;\n                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                childEvent[fields.followingID] = null;\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              } else {\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              }\n\n              break;\n\n            case 'DeleteOccurrence':\n              if (!childEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              }\n\n              if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                editParms.deletedRecords.push(childEvent);\n              }\n\n              break;\n          }\n        };\n\n        for (var a = 0, count = occurenceArgs.changedRecords.length; a < count; a++) {\n          _loop_1(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(occurenceArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: occurenceArgs.data,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processFollowSeries = function (eventData, action) {\n    var _this = this;\n\n    var followData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n        var event_6 = eventData_2[_i];\n        followData.push({\n          occurrence: event_6,\n          parent: this.getParentEvent(event_6)\n        });\n      }\n    } else {\n      followData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateFollowEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = followData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (followArgs) {\n      _this.serializeData(followArgs.changedRecords);\n\n      if (!followArgs.cancel) {\n        var fields_1 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var followEvents = followData instanceof Array ? followData : [followData];\n\n        var _loop_2 = function (a, count) {\n          var childEvent = followArgs.changedRecords[a];\n          var parentEvent = followEvents[a].parent;\n\n          var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n\n          switch (action) {\n            case 'EditFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent);\n\n              var isSplitted = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n              childEvent[fields_1.followingID] = isSplitted ? null : parentEvent[fields_1.id];\n              childEvent[fields_1.recurrenceID] = null;\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n\n              if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                childEvent[fields_1.recurrenceException] = null;\n\n                if (followData_1.occurrence.length > 0) {\n                  var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n\n                  if (rule.indexOf('COUNT') === -1) {\n                    childEvent[fields_1.recurrenceRule] = rule;\n                  }\n                }\n\n                if (followData_1.follow.length > 0) {\n                  childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                  editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.follow);\n                }\n\n                if (isSplitted) {\n                  followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                    return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                  });\n                }\n\n                editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence);\n              }\n\n              break;\n\n            case 'DeleteFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n              break;\n          }\n        };\n\n        for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n          _loop_2(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_1.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: followArgs.data,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEntireSeries = function (eventData, action) {\n    var _this = this;\n\n    var seriesData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n        var event_7 = eventData_3[_i];\n        seriesData.push(this.getParentEvent(event_7, true));\n      }\n    } else {\n      seriesData = this.getParentEvent(eventData, true);\n    }\n\n    var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateSeriesEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = seriesData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (seriesArgs) {\n      _this.serializeData(seriesArgs.changedRecords);\n\n      if (!seriesArgs.cancel) {\n        var fields_2 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n\n        var _loop_3 = function (a, count) {\n          var childEvent = seriesArgs.changedRecords[a];\n          var parentEvent = seriesEvents[a];\n\n          var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n\n          var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n\n          switch (action) {\n            case 'EditSeries':\n              childEvent[fields_2.id] = parentEvent[fields_2.id];\n              childEvent[fields_2.recurrenceID] = null;\n              childEvent[fields_2.followingID] = null;\n\n              if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                  return eventObj[fields_2.id] === childEvent[fields_2.id];\n                });\n\n                if (originalParent.length > 0) {\n                  childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                }\n              } else {\n                childEvent[fields_2.recurrenceException] = null;\n                editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents);\n              }\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              _this.parent.uiStateValues.isIgnoreOccurrence = false;\n              break;\n\n            case 'DeleteSeries':\n              editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents.concat(parentEvent));\n              break;\n          }\n        };\n\n        for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n          _loop_3(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_2.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: seriesArgs.data,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEventDelete = function (eventData) {\n    var _this = this;\n\n    var deleteData = [];\n\n    for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n      var eventObj = eventData_4[_i];\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        deleteData.push({\n          occurrence: eventObj,\n          parent: this.getParentEvent(eventObj)\n        });\n      } else {\n        deleteData.push(eventObj);\n      }\n    }\n\n    var args = {\n      requestType: 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: eventData\n    };\n\n    if (!isBlazor()) {\n      args.data = deleteData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n      _this.serializeData(deleteArgs.deletedRecords);\n\n      if (!deleteArgs.cancel) {\n        var fields_3 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n\n        var _loop_4 = function (a, count) {\n          var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[a][_this.parent.eventFields.recurrenceRule]);\n\n          if (!isDelete) {\n            var parentEvent_1 = deleteData[a].parent;\n            var isEdited = editParms.changedRecords.filter(function (obj) {\n              return obj[fields_3.id] === parentEvent_1[fields_3.id];\n            });\n            var editedDate = deleteArgs.deletedRecords[a][fields_3.startTime];\n\n            if (isEdited.length > 0) {\n              var editedData = isEdited[0];\n              editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n            } else {\n              parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n            }\n\n            if (isEdited.length === 0) {\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n            }\n\n            isDelete = deleteArgs.deletedRecords[a][fields_3.id] !== parentEvent_1[fields_3.id];\n          }\n\n          if (isDelete) {\n            editParms.deletedRecords.push(deleteArgs.deletedRecords[a]);\n          }\n        };\n\n        for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n          _loop_4(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_3.id, _this.getTable(), _this.getQuery());\n\n        var crudArgs = {\n          requestType: 'eventRemoved',\n          cancel: false,\n          data: deleteArgs.data,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.serializeData = function (eventData) {\n    if (isBlazor()) {\n      var eventFields = this.parent.eventFields;\n\n      for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n        var event_8 = _a[_i];\n        event_8[eventFields.startTime] = this.parent.getDateTime(event_8[eventFields.startTime]);\n        event_8[eventFields.endTime] = this.parent.getDateTime(event_8[eventFields.endTime]);\n      }\n    }\n  };\n\n  Crud.prototype.getParentEvent = function (event, isParent) {\n    if (isParent === void 0) {\n      isParent = false;\n    }\n\n    var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n\n    if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n      this.parent.eventBase.timezoneConvert(parentEvent);\n    }\n\n    return parentEvent;\n  };\n\n  Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n    var exDate = getRecurrenceStringFromDate(eventStartTime);\n\n    if (!isNullOrUndefined(exceptionDateList)) {\n      if (exceptionDateList.indexOf(exDate) === -1) {\n        exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + ',' + exDate : exDate;\n      }\n    } else {\n      exceptionDateList = exDate;\n    }\n\n    return exceptionDateList;\n  };\n\n  Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n    var fields = this.parent.eventFields;\n    var recurrenceRule = parentEvent[fields.recurrenceRule];\n    var endDate;\n\n    if (followEvent instanceof Date) {\n      endDate = new Date(+followEvent);\n    } else {\n      endDate = followEvent[fields.startTime];\n      var startDate = parentEvent[fields.startTime];\n      var ruleException = this.parent.currentAction === 'DeleteFollowingEvents' ? followEvent[fields.recurrenceException] : null;\n      var dateCollection = generate(startDate, recurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n      var untilDate = new Date(dateCollection.slice(-1)[0]);\n      followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, new Date(+untilDate), false);\n    }\n\n    parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, util.addDays(new Date(endDate.getTime()), -1), true);\n  };\n\n  Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n    var splitRule = recurrenceRule.split(';');\n    var updatedRule = '';\n\n    for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n      var rule = splitRule_1[_i];\n\n      if (rule !== '') {\n        var ruleKey = rule.split('=')[0];\n        var ruleValue = rule.split('=')[1];\n\n        if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n          ruleValue = getRecurrenceStringFromDate(untilDate);\n          rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n        }\n\n        updatedRule += rule + ';';\n      }\n    }\n\n    if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n      updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n    }\n\n    return updatedRule;\n  };\n\n  return Crud;\n}();\n\nexport { Crud };","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js"],"names":["isNullOrUndefined","isBlazor","getRecurrenceStringFromDate","generate","events","util","Crud","parent","prototype","getQuery","start","activeView","startDate","end","endDate","dataModule","generateQuery","getTable","eventSettings","query","clone","fromTable","refreshData","args","_this","actionArgs","requestType","cancel","data","addedRecords","editParms","changedRecords","deletedRecords","dataManager","dataSource","offline","trigger","actionComplete","offlineArgs","renderModule","refreshDataManager","promise","then","e","isDestroyed","onlineArgs","catch","actionFailure","error","addEvent","eventData","allowAdding","eventBase","isBlockRange","quickPopup","openValidationError","Array","addEvents","actionBegin","addArgs","serializeData","fields","eventFields","_i","_a","length","event_1","push","processTimezone","saveChanges","id","event_2","insert","crudArgs","saveEvent","action","allowEditing","currentAction","processOccurrences","processFollowSeries","processEntireSeries","updateEvents","saveArgs","event_3","event_4","update","deleteEvent","allowDeleting","deleteEvents","eventsData","filter","eventObj","processEventDelete","deleteArgs","remove","selectWorkCellByTime","occurenceData","eventData_1","event_5","occurrence","getParentEvent","occurenceArgs","occurrenceEvents","_loop_1","a","count","childEvent","parentEvent","parentException","recurrenceException","editedData","eventsProcessed","event","Guid","exceptionDate","excludeDateCheck","startTime","recurrenceID","followingID","followData","eventData_2","event_6","updateFollowEvents","followArgs","fields_1","followEvents","_loop_2","followData_1","getEventCollections","processRecurrenceRule","isSplitted","isFollowingEvent","uiStateValues","isIgnoreOccurrence","rule","slice","recurrenceRule","indexOf","follow","concat","seriesData","eventData_3","event_7","updateSeriesEvents","seriesArgs","fields_2","seriesEvents","_loop_3","eventCollections","deletedEvents","originalParent","deleteData","eventData_4","fields_3","_loop_4","isDelete","parentEvent_1","isEdited","obj","editedDate","event_8","getDateTime","endTime","isParent","startTimezone","endTimezone","timezoneConvert","eventStartTime","exceptionDateList","exDate","followEvent","Date","ruleException","dateCollection","activeViewOptions","firstDayOfWeek","untilDate","getUpdatedRecurrenceRule","addDays","getTime","splitRule","split","updatedRule","splitRule_1","ruleKey","ruleValue","replace"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { getRecurrenceStringFromDate, generate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\n * Schedule CRUD operations\n */\nvar Crud = /** @class */ (function () {\n    function Crud(parent) {\n        this.parent = parent;\n    }\n    Crud.prototype.getQuery = function () {\n        var start = this.parent.activeView.startDate();\n        var end = this.parent.activeView.endDate();\n        return this.parent.dataModule.generateQuery(start, end);\n    };\n    Crud.prototype.getTable = function () {\n        if (this.parent.eventSettings.query) {\n            var query = this.parent.eventSettings.query.clone();\n            return query.fromTable;\n        }\n        return null;\n    };\n    Crud.prototype.refreshData = function (args) {\n        var _this = this;\n        var actionArgs = {\n            requestType: args.requestType, cancel: false, data: args.data,\n            addedRecords: args.editParms.addedRecords, changedRecords: args.editParms.changedRecords,\n            deletedRecords: args.editParms.deletedRecords\n        };\n        if (this.parent.dataModule.dataManager.dataSource.offline) {\n            this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n                if (!offlineArgs.cancel) {\n                    _this.parent.renderModule.refreshDataManager();\n                }\n            });\n        }\n        else {\n            args.promise.then(function (e) {\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {\n                    if (!onlineArgs.cancel) {\n                        _this.parent.renderModule.refreshDataManager();\n                    }\n                });\n            }).catch(function (e) {\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                _this.parent.trigger(events.actionFailure, { error: e });\n            });\n        }\n    };\n    Crud.prototype.addEvent = function (eventData) {\n        var _this = this;\n        if (this.parent.eventSettings.allowAdding) {\n            if (this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', (eventData instanceof Array) ? [eventData] : eventData);\n                return;\n            }\n            var addEvents = (eventData instanceof Array) ? eventData : [eventData];\n            var args = {\n                requestType: 'eventCreate', cancel: false,\n                addedRecords: addEvents, changedRecords: [], deletedRecords: []\n            };\n            if (!isBlazor()) {\n                args.data = addEvents;\n            }\n            this.parent.trigger(events.actionBegin, args, function (addArgs) {\n                _this.serializeData(addArgs.addedRecords);\n                if (!addArgs.cancel) {\n                    var fields = _this.parent.eventFields;\n                    var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                    var promise = void 0;\n                    if (addArgs.addedRecords instanceof Array) {\n                        for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n                            var event_1 = _a[_i];\n                            editParms.addedRecords.push(_this.parent.eventBase.processTimezone(event_1, true));\n                        }\n                        // tslint:disable-next-line:max-line-length\n                        promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                    }\n                    else {\n                        var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n                        editParms.addedRecords.push(event_2);\n                        promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n                    }\n                    var crudArgs = {\n                        requestType: 'eventCreated', cancel: false, data: addArgs.addedRecords, promise: promise, editParms: editParms\n                    };\n                    _this.refreshData(crudArgs);\n                }\n            });\n        }\n    };\n    Crud.prototype.saveEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowEditing) {\n            if (this.parent.currentAction !== 'EditFollowingEvents' && this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', (eventData instanceof Array) ? [eventData] : eventData);\n                return;\n            }\n            this.parent.currentAction = action;\n            if (action) {\n                switch (action) {\n                    case 'EditOccurrence':\n                        this.processOccurrences(eventData, action);\n                        break;\n                    case 'EditFollowingEvents':\n                        this.processFollowSeries(eventData, action);\n                        break;\n                    case 'EditSeries':\n                        this.processEntireSeries(eventData, action);\n                        break;\n                }\n            }\n            else {\n                var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n                var args = {\n                    requestType: 'eventChange', cancel: false,\n                    addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n                };\n                if (!isBlazor()) {\n                    args.data = eventData;\n                }\n                this.parent.trigger(events.actionBegin, args, function (saveArgs) {\n                    _this.serializeData(saveArgs.changedRecords);\n                    if (!saveArgs.cancel) {\n                        var promise = void 0;\n                        var fields = _this.parent.eventFields;\n                        var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                        if (saveArgs.changedRecords instanceof Array) {\n                            for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                                var event_3 = _a[_i];\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(event_3, true));\n                            }\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                        }\n                        else {\n                            var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n                            editParms.changedRecords.push(event_4);\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n                        }\n                        var crudArgs = {\n                            requestType: 'eventChanged', cancel: false, data: saveArgs.data, promise: promise, editParms: editParms\n                        };\n                        _this.refreshData(crudArgs);\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.deleteEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowDeleting) {\n            this.parent.currentAction = action;\n            var deleteEvents = [];\n            if (typeof eventData === 'string' || typeof eventData === 'number') {\n                deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n                    return eventObj[_this.parent.eventFields.id] === eventData;\n                });\n            }\n            else {\n                deleteEvents = (eventData instanceof Array ? eventData : [eventData]);\n            }\n            if (action) {\n                switch (action) {\n                    case 'Delete':\n                        this.processEventDelete(deleteEvents);\n                        break;\n                    case 'DeleteOccurrence':\n                        this.processOccurrences(deleteEvents, action);\n                        break;\n                    case 'DeleteFollowingEvents':\n                        this.processFollowSeries(deleteEvents, action);\n                        break;\n                    case 'DeleteSeries':\n                        this.processEntireSeries(deleteEvents, action);\n                        break;\n                }\n            }\n            else {\n                var args = {\n                    requestType: 'eventRemove', cancel: false,\n                    addedRecords: [], changedRecords: [], deletedRecords: deleteEvents\n                };\n                if (!isBlazor()) {\n                    args.data = eventData;\n                }\n                this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n                    _this.serializeData(deleteArgs.deletedRecords);\n                    if (!deleteArgs.cancel) {\n                        var promise = void 0;\n                        var fields = _this.parent.eventFields;\n                        var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                        if (deleteArgs.deletedRecords.length > 1) {\n                            for (var _i = 0, _a = deleteArgs.deletedRecords; _i < _a.length; _i++) {\n                                var eventObj = _a[_i];\n                                editParms.deletedRecords.push(eventObj);\n                            }\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                        }\n                        else {\n                            editParms.deletedRecords.push(deleteArgs.deletedRecords[0]);\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n                        }\n                        _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n                        var crudArgs = {\n                            requestType: 'eventRemoved', cancel: false, data: deleteArgs.data, promise: promise, editParms: editParms\n                        };\n                        _this.refreshData(crudArgs);\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.processOccurrences = function (eventData, action) {\n        var _this = this;\n        var occurenceData = [];\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n                var event_5 = eventData_1[_i];\n                occurenceData.push({ occurrence: event_5, parent: this.getParentEvent(event_5) });\n            }\n        }\n        else {\n            occurenceData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = occurenceData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (occurenceArgs) {\n            _this.serializeData(occurenceArgs.changedRecords);\n            if (!occurenceArgs.cancel) {\n                var fields = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var occurrenceEvents = (occurenceData instanceof Array ? occurenceData : [occurenceData]);\n                var _loop_1 = function (a, count) {\n                    var childEvent = occurenceArgs.changedRecords[a];\n                    var parentEvent = occurrenceEvents[a].parent;\n                    var parentException = parentEvent[fields.recurrenceException];\n                    switch (action) {\n                        case 'EditOccurrence':\n                            var editedData = _this.parent.eventsProcessed.filter(function (event) { return event.Guid === childEvent.Guid; })[0];\n                            var exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n                            if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] = exceptionDate;\n                                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                                childEvent[fields.followingID] = null;\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                                editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            else {\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            break;\n                        case 'DeleteOccurrence':\n                            if (!childEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] =\n                                    _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            }\n                            if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                                editParms.deletedRecords.push(childEvent);\n                            }\n                            break;\n                    }\n                };\n                for (var a = 0, count = occurenceArgs.changedRecords.length; a < count; a++) {\n                    _loop_1(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(occurenceArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: occurenceArgs.data, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processFollowSeries = function (eventData, action) {\n        var _this = this;\n        var followData = [];\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n                var event_6 = eventData_2[_i];\n                followData.push({ occurrence: event_6, parent: this.getParentEvent(event_6) });\n            }\n        }\n        else {\n            followData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateFollowEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateFollowEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = followData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (followArgs) {\n            _this.serializeData(followArgs.changedRecords);\n            if (!followArgs.cancel) {\n                var fields_1 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var followEvents = (followData instanceof Array ? followData : [followData]);\n                var _loop_2 = function (a, count) {\n                    var childEvent = followArgs.changedRecords[a];\n                    var parentEvent = followEvents[a].parent;\n                    var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n                    switch (action) {\n                        case 'EditFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent);\n                            var isSplitted = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n                            childEvent[fields_1.followingID] = isSplitted ? null : parentEvent[fields_1.id];\n                            childEvent[fields_1.recurrenceID] = null;\n                            editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                                childEvent[fields_1.recurrenceException] = null;\n                                if (followData_1.occurrence.length > 0) {\n                                    var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n                                    if (rule.indexOf('COUNT') === -1) {\n                                        childEvent[fields_1.recurrenceRule] = rule;\n                                    }\n                                }\n                                if (followData_1.follow.length > 0) {\n                                    childEvent[fields_1.recurrenceRule] =\n                                        followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                                    editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.follow);\n                                }\n                                if (isSplitted) {\n                                    followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                                        return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                                    });\n                                }\n                                editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence);\n                            }\n                            break;\n                        case 'DeleteFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            editParms.deletedRecords =\n                                editParms.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n                            break;\n                    }\n                };\n                for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n                    _loop_2(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_1.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: followArgs.data, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processEntireSeries = function (eventData, action) {\n        var _this = this;\n        var seriesData = [];\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n                var event_7 = eventData_3[_i];\n                seriesData.push(this.getParentEvent(event_7, true));\n            }\n        }\n        else {\n            seriesData = this.getParentEvent(eventData, true);\n        }\n        var updateSeriesEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateSeriesEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = seriesData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (seriesArgs) {\n            _this.serializeData(seriesArgs.changedRecords);\n            if (!seriesArgs.cancel) {\n                var fields_2 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var seriesEvents = (seriesData instanceof Array ? seriesData : [seriesData]);\n                var _loop_3 = function (a, count) {\n                    var childEvent = seriesArgs.changedRecords[a];\n                    var parentEvent = seriesEvents[a];\n                    var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n                    var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n                    switch (action) {\n                        case 'EditSeries':\n                            childEvent[fields_2.id] = parentEvent[fields_2.id];\n                            childEvent[fields_2.recurrenceID] = null;\n                            childEvent[fields_2.followingID] = null;\n                            if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                                    return eventObj[fields_2.id] === childEvent[fields_2.id];\n                                });\n                                if (originalParent.length > 0) {\n                                    childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                                }\n                            }\n                            else {\n                                childEvent[fields_2.recurrenceException] = null;\n                                editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents);\n                            }\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            _this.parent.uiStateValues.isIgnoreOccurrence = false;\n                            break;\n                        case 'DeleteSeries':\n                            editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents.concat(parentEvent));\n                            break;\n                    }\n                };\n                for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n                    _loop_3(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_2.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: seriesArgs.data, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processEventDelete = function (eventData) {\n        var _this = this;\n        var deleteData = [];\n        for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n            var eventObj = eventData_4[_i];\n            if (eventObj[this.parent.eventFields.recurrenceRule]) {\n                deleteData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });\n            }\n            else {\n                deleteData.push(eventObj);\n            }\n        }\n        var args = {\n            requestType: 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: [], deletedRecords: eventData\n        };\n        if (!isBlazor()) {\n            args.data = deleteData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n            _this.serializeData(deleteArgs.deletedRecords);\n            if (!deleteArgs.cancel) {\n                var fields_3 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var _loop_4 = function (a, count) {\n                    var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[a][_this.parent.eventFields.recurrenceRule]);\n                    if (!isDelete) {\n                        var parentEvent_1 = deleteData[a].parent;\n                        var isEdited = editParms.changedRecords.filter(function (obj) {\n                            return obj[fields_3.id] === parentEvent_1[fields_3.id];\n                        });\n                        var editedDate = deleteArgs.deletedRecords[a][fields_3.startTime];\n                        if (isEdited.length > 0) {\n                            var editedData = isEdited[0];\n                            editedData[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n                        }\n                        else {\n                            parentEvent_1[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n                        }\n                        if (isEdited.length === 0) {\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n                        }\n                        isDelete = (deleteArgs.deletedRecords[a][fields_3.id] !== parentEvent_1[fields_3.id]);\n                    }\n                    if (isDelete) {\n                        editParms.deletedRecords.push(deleteArgs.deletedRecords[a]);\n                    }\n                };\n                for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n                    _loop_4(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_3.id, _this.getTable(), _this.getQuery());\n                var crudArgs = {\n                    requestType: 'eventRemoved', cancel: false, data: deleteArgs.data, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.serializeData = function (eventData) {\n        if (isBlazor()) {\n            var eventFields = this.parent.eventFields;\n            for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n                var event_8 = _a[_i];\n                event_8[eventFields.startTime] = this.parent.getDateTime(event_8[eventFields.startTime]);\n                event_8[eventFields.endTime] = this.parent.getDateTime(event_8[eventFields.endTime]);\n            }\n        }\n    };\n    Crud.prototype.getParentEvent = function (event, isParent) {\n        if (isParent === void 0) { isParent = false; }\n        var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n        if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n            this.parent.eventBase.timezoneConvert(parentEvent);\n        }\n        return parentEvent;\n    };\n    Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n        var exDate = getRecurrenceStringFromDate(eventStartTime);\n        if (!isNullOrUndefined(exceptionDateList)) {\n            if (exceptionDateList.indexOf(exDate) === -1) {\n                exceptionDateList = !(isNullOrUndefined(exceptionDateList)) ? exceptionDateList + ',' + exDate : exDate;\n            }\n        }\n        else {\n            exceptionDateList = exDate;\n        }\n        return exceptionDateList;\n    };\n    Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n        var fields = this.parent.eventFields;\n        var recurrenceRule = parentEvent[fields.recurrenceRule];\n        var endDate;\n        if (followEvent instanceof Date) {\n            endDate = new Date(+followEvent);\n        }\n        else {\n            endDate = followEvent[fields.startTime];\n            var startDate = parentEvent[fields.startTime];\n            var ruleException = (this.parent.currentAction === 'DeleteFollowingEvents') ? followEvent[fields.recurrenceException] : null;\n            var dateCollection = generate(startDate, recurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n            var untilDate = new Date(dateCollection.slice(-1)[0]);\n            followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, new Date(+untilDate), false);\n        }\n        parentEvent[fields.recurrenceRule] =\n            this.getUpdatedRecurrenceRule(recurrenceRule, util.addDays(new Date(endDate.getTime()), -1), true);\n    };\n    Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n        var splitRule = recurrenceRule.split(';');\n        var updatedRule = '';\n        for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n            var rule = splitRule_1[_i];\n            if (rule !== '') {\n                var ruleKey = rule.split('=')[0];\n                var ruleValue = rule.split('=')[1];\n                if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n                    ruleValue = getRecurrenceStringFromDate(untilDate);\n                    rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n                }\n                updatedRule += rule + ';';\n            }\n        }\n        if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n            updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n        }\n        return updatedRule;\n    };\n    return Crud;\n}());\nexport { Crud };\n"]},"metadata":{},"sourceType":"module"}