{"ast":null,"code":"import { DateFormat } from './intl/date-formatter';\nimport { NumberFormat } from './intl/number-formatter';\nimport { DateParser } from './intl/date-parser';\nimport { NumberParser } from './intl/number-parser';\nimport { IntlBase } from './intl/intl-base';\nimport { extend, getValue, isBlazor } from './util';\nimport { Observer } from './observer';\n/**\n * Specifies the observer used for external change detection.\n */\n\nexport var onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\n\nexport var rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\n\nexport var cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\n\nexport var defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\n\nexport var defaultCurrencyCode = 'USD';\nvar mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\n\nvar Internationalization =\n/** @class */\nfunction () {\n  function Internationalization(cultureName) {\n    if (cultureName) {\n      this.culture = cultureName;\n    }\n  }\n  /**\n   * Returns the format function for given options.\n   * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n   * @returns {Function}\n   */\n\n\n  Internationalization.prototype.getDateFormat = function (options) {\n    return DateFormat.dateFormat(this.getCulture(), options || {\n      type: 'date',\n      skeleton: 'short'\n    }, cldrData);\n  };\n  /**\n   * Returns the format function for given options.\n   * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n   * @returns {Function}\n   */\n\n\n  Internationalization.prototype.getNumberFormat = function (options) {\n    if (options && !options.currency) {\n      options.currency = defaultCurrencyCode;\n    }\n\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n  };\n  /**\n   * Returns the parser function for given options.\n   * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n   * @returns {Function}\n   */\n\n\n  Internationalization.prototype.getDateParser = function (options) {\n    return DateParser.dateParser(this.getCulture(), options || {\n      skeleton: 'short',\n      type: 'date'\n    }, cldrData);\n  };\n  /**\n   * Returns the parser function for given options.\n   * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n   * @returns {Function}\n   */\n\n\n  Internationalization.prototype.getNumberParser = function (options) {\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberParser.numberParser(this.getCulture(), options || {\n      format: 'N'\n    }, cldrData);\n  };\n  /**\n   * Returns the formatted string based on format options.\n   * @param {Number} value - Specifies the number to format.\n   * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n   * @returns {string}\n   */\n\n\n  Internationalization.prototype.formatNumber = function (value, option) {\n    return this.getNumberFormat(option)(value);\n  };\n  /**\n   * Returns the formatted date string based on format options.\n   * @param {Number} value - Specifies the number to format.\n   * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n   * @returns {string}\n   */\n\n\n  Internationalization.prototype.formatDate = function (value, option) {\n    return this.getDateFormat(option)(value);\n  };\n  /**\n   * Returns the date object for given date string and options.\n   * @param {string} value - Specifies the string to parse.\n   * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n   * @returns {Date}\n   */\n\n\n  Internationalization.prototype.parseDate = function (value, option) {\n    return this.getDateParser(option)(value);\n  };\n  /**\n   * Returns the number object from the given string value and options.\n   * @param {string} value - Specifies the string to parse.\n   * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n   * @returns {number}\n   */\n\n\n  Internationalization.prototype.parseNumber = function (value, option) {\n    return this.getNumberParser(option)(value);\n  };\n  /**\n   * Returns Native Date Time Pattern\n   * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n   * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n   * @returns {string}\n   * @private\n   */\n\n\n  Internationalization.prototype.getDatePattern = function (option, isExcelFormat) {\n    return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n  };\n  /**\n   * Returns Native Number Pattern\n   * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n   * @returns {string}\n   * @private\n   */\n\n\n  Internationalization.prototype.getNumberPattern = function (option) {\n    return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData);\n  };\n  /**\n   * Returns the First Day of the Week\n   * @returns {number}\n   */\n\n\n  Internationalization.prototype.getFirstDayOfWeek = function () {\n    return IntlBase.getWeekData(this.getCulture(), cldrData);\n  };\n\n  Internationalization.prototype.getCulture = function () {\n    return this.culture || defaultCulture;\n  };\n\n  return Internationalization;\n}();\n\nexport { Internationalization };\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\n\nexport function setCulture(cultureName) {\n  defaultCulture = cultureName;\n  onIntlChange.notify('notifyExternalChange', {\n    'locale': defaultCulture\n  });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\n\nexport function setCurrencyCode(currencyCode) {\n  defaultCurrencyCode = currencyCode;\n  onIntlChange.notify('notifyExternalChange', {\n    'currencyCode': defaultCurrencyCode\n  });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\n\nexport function loadCldr() {\n  var data = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    data[_i] = arguments[_i];\n  }\n\n  for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n    var obj = data_1[_a];\n    extend(cldrData, obj, {}, true);\n  }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\n\nexport function enableRtl(status) {\n  if (status === void 0) {\n    status = true;\n  }\n\n  rightToLeft = status;\n  onIntlChange.notify('notifyExternalChange', {\n    enableRtl: rightToLeft\n  });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\n\nexport function getNumericObject(locale, type) {\n  /* tslint:disable no-any */\n  var numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n  var dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n  var numSystem = getValue('defaultNumberingSystem', numObject);\n  var symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n  var pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n  return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), {\n    'dateSeparator': IntlBase.getDateSeparator(dateObject)\n  });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\n\nexport function getNumberDependable(locale, currency) {\n  var numObject = IntlBase.getDependables(cldrData, locale, '', true);\n  return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\n\nexport function getDefaultDateObject(mode) {\n  return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}","map":{"version":3,"sources":["/Users/ewong/Development/Whiteboard/node_modules/@syncfusion/ej2-base/src/internationalization.js"],"names":["DateFormat","NumberFormat","DateParser","NumberParser","IntlBase","extend","getValue","isBlazor","Observer","onIntlChange","rightToLeft","cldrData","defaultCulture","defaultCurrencyCode","mapper","Internationalization","cultureName","culture","prototype","getDateFormat","options","dateFormat","getCulture","type","skeleton","getNumberFormat","currency","format","minimumFractionDigits","numberFormatter","getDateParser","dateParser","getNumberParser","numberParser","formatNumber","value","option","formatDate","parseDate","parseNumber","getDatePattern","isExcelFormat","getActualDateTimeFormat","getNumberPattern","getActualNumberFormat","getFirstDayOfWeek","getWeekData","setCulture","notify","setCurrencyCode","currencyCode","loadCldr","data","_i","arguments","length","_a","data_1","obj","enableRtl","status","getNumericObject","locale","numObject","getDependables","dateObject","numSystem","symbPattern","pattern","getSymbolPattern","getFormatData","getDateSeparator","getNumberDependable","getCurrencySymbol","numericObject","getDefaultDateObject","mode"],"mappings":"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","sourcesContent":["import { DateFormat } from './intl/date-formatter';\nimport { NumberFormat } from './intl/number-formatter';\nimport { DateParser } from './intl/date-parser';\nimport { NumberParser } from './intl/number-parser';\nimport { IntlBase } from './intl/intl-base';\nimport { extend, getValue, isBlazor } from './util';\nimport { Observer } from './observer';\n/**\n * Specifies the observer used for external change detection.\n */\nexport var onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\nexport var rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\nexport var cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\nexport var defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\nexport var defaultCurrencyCode = 'USD';\nvar mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\nvar Internationalization = /** @class */ (function () {\n    function Internationalization(cultureName) {\n        if (cultureName) {\n            this.culture = cultureName;\n        }\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    Internationalization.prototype.getDateFormat = function (options) {\n        return DateFormat.dateFormat(this.getCulture(), options || { type: 'date', skeleton: 'short' }, cldrData);\n    };\n    /**\n     * Returns the format function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    Internationalization.prototype.getNumberFormat = function (options) {\n        if (options && !options.currency) {\n            options.currency = defaultCurrencyCode;\n        }\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n    };\n    /**\n     * Returns the parser function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    Internationalization.prototype.getDateParser = function (options) {\n        return DateParser.dateParser(this.getCulture(), options || { skeleton: 'short', type: 'date' }, cldrData);\n    };\n    /**\n     * Returns the parser function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    Internationalization.prototype.getNumberParser = function (options) {\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberParser.numberParser(this.getCulture(), options || { format: 'N' }, cldrData);\n    };\n    /**\n     * Returns the formatted string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    Internationalization.prototype.formatNumber = function (value, option) {\n        return this.getNumberFormat(option)(value);\n    };\n    /**\n     * Returns the formatted date string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    Internationalization.prototype.formatDate = function (value, option) {\n        return this.getDateFormat(option)(value);\n    };\n    /**\n     * Returns the date object for given date string and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n     * @returns {Date}\n     */\n    Internationalization.prototype.parseDate = function (value, option) {\n        return this.getDateParser(option)(value);\n    };\n    /**\n     * Returns the number object from the given string value and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n     * @returns {number}\n     */\n    Internationalization.prototype.parseNumber = function (value, option) {\n        return this.getNumberParser(option)(value);\n    };\n    /**\n     * Returns Native Date Time Pattern\n     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n     * @returns {string}\n     * @private\n     */\n    Internationalization.prototype.getDatePattern = function (option, isExcelFormat) {\n        return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n    };\n    /**\n     * Returns Native Number Pattern\n     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n     * @returns {string}\n     * @private\n     */\n    Internationalization.prototype.getNumberPattern = function (option) {\n        return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData);\n    };\n    /**\n     * Returns the First Day of the Week\n     * @returns {number}\n     */\n    Internationalization.prototype.getFirstDayOfWeek = function () {\n        return IntlBase.getWeekData(this.getCulture(), cldrData);\n    };\n    Internationalization.prototype.getCulture = function () {\n        return this.culture || defaultCulture;\n    };\n    return Internationalization;\n}());\nexport { Internationalization };\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\nexport function setCulture(cultureName) {\n    defaultCulture = cultureName;\n    onIntlChange.notify('notifyExternalChange', { 'locale': defaultCulture });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\nexport function setCurrencyCode(currencyCode) {\n    defaultCurrencyCode = currencyCode;\n    onIntlChange.notify('notifyExternalChange', { 'currencyCode': defaultCurrencyCode });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\nexport function loadCldr() {\n    var data = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        data[_i] = arguments[_i];\n    }\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n        var obj = data_1[_a];\n        extend(cldrData, obj, {}, true);\n    }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\nexport function enableRtl(status) {\n    if (status === void 0) { status = true; }\n    rightToLeft = status;\n    onIntlChange.notify('notifyExternalChange', { enableRtl: rightToLeft });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\nexport function getNumericObject(locale, type) {\n    /* tslint:disable no-any */\n    var numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n    var dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n    var numSystem = getValue('defaultNumberingSystem', numObject);\n    var symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n    var pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n    return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), { 'dateSeparator': IntlBase.getDateSeparator(dateObject) });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\nexport function getNumberDependable(locale, currency) {\n    var numObject = IntlBase.getDependables(cldrData, locale, '', true);\n    return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\nexport function getDefaultDateObject(mode) {\n    return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}\n"]},"metadata":{},"sourceType":"module"}