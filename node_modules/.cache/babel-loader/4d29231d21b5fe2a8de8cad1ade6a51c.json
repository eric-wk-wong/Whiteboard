{"ast":null,"code":"import { isUndefined, throwError, isNullOrUndefined, extend } from '../util';\nimport { defaultCurrencyCode } from '../internationalization';\nimport { IntlBase as base } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nvar errorText = {\n  'ms': 'minimumSignificantDigits',\n  'ls': 'maximumSignificantDigits',\n  'mf': 'minimumFractionDigits',\n  'lf': 'maximumFractionDigits'\n};\nvar integerError = 'minimumIntegerDigits';\nvar percentSign = 'percentSign';\nvar minusSign = 'minusSign';\nvar spaceRegex = /\\s/;\nvar mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\nvar infinity = 'infinity';\nvar nan = 'nan';\n/**\n * Module for number formatting.\n * @private\n */\n\nvar NumberFormat =\n/** @class */\nfunction () {\n  function NumberFormat() {}\n  /**\n   * Returns the formatter function for given skeleton.\n   * @param {string} culture -  Specifies the culture name to be which formatting.\n   * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n   * @param {Object} object- Specifies the global cldr data collection.\n   * @return Function.\n   */\n\n\n  NumberFormat.numberFormatter = function (culture, option, cldr) {\n    var _this = this;\n\n    var fOptions = extend({}, option);\n    var cOptions = {};\n    var dOptions = {};\n    var symbolPattern;\n    var dependable = base.getDependables(cldr, culture, '', true);\n    dOptions.numberMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n    dOptions.currencySymbol = base.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n    /* tslint:disable no-any */\n\n    dOptions.percentSymbol = dOptions.numberMapper.numberSymbols[percentSign];\n    dOptions.minusSymbol = dOptions.numberMapper.numberSymbols[minusSign];\n    var symbols = dOptions.numberMapper.numberSymbols;\n\n    if (option.format && !base.formatRegex.test(option.format)) {\n      cOptions = base.customFormat(option.format, dOptions, dependable.numericObject);\n    } else {\n      extend(fOptions, base.getProperNumericSkeleton(option.format || 'N'));\n      fOptions.isCurrency = fOptions.type === 'currency';\n      fOptions.isPercent = fOptions.type === 'percent';\n      symbolPattern = base.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n      fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n      this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n\n      if (!isUndefined(fOptions.fractionDigits)) {\n        fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n      }\n\n      if (isUndefined(fOptions.useGrouping)) {\n        fOptions.useGrouping = true;\n      }\n\n      if (fOptions.isCurrency) {\n        symbolPattern = symbolPattern.replace(/\\u00A4/g, base.defaultCurrency);\n      }\n\n      var split = symbolPattern.split(';');\n      cOptions.nData = base.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n      cOptions.pData = base.getFormatData(split[0], false, dOptions.currencySymbol);\n\n      if (fOptions.useGrouping) {\n        fOptions.groupSeparator = symbols[mapper[2]];\n        fOptions.groupData = this.getGroupingDetails(split[0]);\n      }\n\n      var minFrac = isUndefined(fOptions.minimumFractionDigits);\n\n      if (minFrac) {\n        fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n      }\n\n      if (isUndefined(fOptions.maximumFractionDigits)) {\n        var mval = cOptions.nData.maximumFraction;\n        fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n      }\n\n      var mfrac = fOptions.minimumFractionDigits;\n      var lfrac = fOptions.maximumFractionDigits;\n\n      if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n        if (mfrac > lfrac) {\n          fOptions.maximumFractionDigits = mfrac;\n        }\n      }\n    }\n\n    extend(cOptions.nData, fOptions);\n    extend(cOptions.pData, fOptions);\n    return function (value) {\n      if (isNaN(value)) {\n        return symbols[mapper[1]];\n      } else if (!isFinite(value)) {\n        return symbols[mapper[0]];\n      }\n\n      return _this.intNumberFormatter(value, cOptions, dOptions);\n    };\n  };\n  /**\n   * Returns grouping details for the pattern provided\n   * @param {string} pattern\n   * @returns {GroupDetails}\n   */\n\n\n  NumberFormat.getGroupingDetails = function (pattern) {\n    var ret = {};\n    var match = pattern.match(base.negativeDataRegex);\n\n    if (match && match[4]) {\n      var pattern_1 = match[4];\n      var p = pattern_1.lastIndexOf(',');\n\n      if (p !== -1) {\n        var temp = pattern_1.split('.')[0];\n        ret.primary = temp.length - p - 1;\n        var s = pattern_1.lastIndexOf(',', p - 1);\n\n        if (s !== -1) {\n          ret.secondary = p - 1 - s;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns if the provided integer range is valid.\n   * @param {number} val1\n   * @param {number} val2\n   * @param {boolean} checkbothExist\n   * @param {boolean} isFraction\n   * @returns {boolean}\n   */\n\n\n  NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {\n    var decide = isFraction ? 'f' : 's';\n    var dint = 0;\n    var str1 = errorText['l' + decide];\n    var str2 = errorText['m' + decide];\n\n    if (!isUndefined(val1)) {\n      this.checkRange(val1, str1, isFraction);\n      dint++;\n    }\n\n    if (!isUndefined(val2)) {\n      this.checkRange(val2, str2, isFraction);\n      dint++;\n    }\n\n    if (dint === 2) {\n      if (val1 < val2) {\n        throwError(str2 + 'specified must be less than the' + str1);\n      } else {\n        return true;\n      }\n    } else if (checkbothExist && dint === 1) {\n      throwError('Both' + str2 + 'and' + str2 + 'must be present');\n    }\n\n    return false;\n  };\n  /**\n   * Check if the provided fraction range is valid\n   * @param {number} val\n   * @param {string} text\n   * @param {boolean} isFraction\n   * @returns {void}\n   */\n\n\n  NumberFormat.checkRange = function (val, text, isFraction) {\n    var range = isFraction ? [0, 20] : [1, 21];\n\n    if (val < range[0] || val > range[1]) {\n      throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n    }\n  };\n  /**\n   * Returns formatted numeric string for provided formatting options\n   * @param {number} value\n   * @param {base.GenericFormatOptions} fOptions\n   * @param {CommonOptions} dOptions\n   * @returns {string}\n   */\n\n\n  NumberFormat.intNumberFormatter = function (value, fOptions, dOptions) {\n    var curData;\n\n    if (isUndefined(fOptions.nData.type)) {\n      return undefined;\n    } else {\n      if (value < 0) {\n        value = value * -1;\n        curData = fOptions.nData;\n      } else if (value === 0) {\n        curData = fOptions.zeroData || fOptions.pData;\n      } else {\n        curData = fOptions.pData;\n      }\n\n      var fValue = '';\n\n      if (curData.isPercent) {\n        value = value * 100;\n      }\n\n      if (curData.groupOne) {\n        fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n      } else {\n        fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n\n        if (curData.minimumIntegerDigits) {\n          fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n        }\n      }\n\n      if (curData.type === 'scientific') {\n        fValue = value.toExponential(curData.maximumFractionDigits);\n        fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);\n      }\n\n      fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);\n\n      if (curData.useGrouping) {\n        fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);\n      }\n\n      fValue = parser.convertValueParts(fValue, base.latnParseRegex, dOptions.numberMapper.mapper);\n\n      if (curData.nlead === 'N/A') {\n        return curData.nlead;\n      } else {\n        return curData.nlead + fValue + curData.nend;\n      }\n    }\n  };\n  /**\n   * Returns significant digits processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  NumberFormat.processSignificantDigits = function (value, min, max) {\n    var temp = value + '';\n    var tn;\n    var length = temp.length;\n\n    if (length < min) {\n      return value.toPrecision(min);\n    } else {\n      temp = value.toPrecision(max);\n      tn = +temp;\n      return tn + '';\n    }\n  };\n  /**\n   * Returns grouped numeric string\n   * @param {string} val\n   * @param {number} level1\n   * @param {string} sep\n   * @param {string} decimalSymbol\n   * @param {number} level2\n   * @returns {string}\n   */\n\n\n  NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {\n    var flag = !isNullOrUndefined(level2) && level2 !== 0;\n    var split = val.split(decimalSymbol);\n    var prefix = split[0];\n    var length = prefix.length;\n    var str = '';\n\n    while (length > level1) {\n      str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');\n      length -= level1;\n\n      if (flag) {\n        level1 = level2;\n        flag = false;\n      }\n    }\n\n    split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n    return split.join(decimalSymbol);\n  };\n  /**\n   * Returns fraction processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  NumberFormat.processFraction = function (value, min, max) {\n    var temp = (value + '').split('.')[1];\n    var length = temp ? temp.length : 0;\n\n    if (min && length < min) {\n      var ret = '';\n\n      if (length === 0) {\n        ret = value.toFixed(min);\n      } else {\n        ret += value;\n\n        for (var j = 0; j < min - length; j++) {\n          ret += '0';\n        }\n\n        return ret;\n      }\n\n      return value.toFixed(min);\n    } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n      return value.toFixed(max);\n    }\n\n    return value + '';\n  };\n  /**\n   * Returns integer processed numeric string\n   * @param {string} value\n   * @param {number} min\n   * @returns {string}\n   */\n\n\n  NumberFormat.processMinimumIntegers = function (value, min) {\n    var temp = value.split('.');\n    var lead = temp[0];\n    var len = lead.length;\n\n    if (len < min) {\n      for (var i = 0; i < min - len; i++) {\n        lead = '0' + lead;\n      }\n\n      temp[0] = lead;\n    }\n\n    return temp.join('.');\n  };\n\n  return NumberFormat;\n}();\n\nexport { NumberFormat };","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-base/src/intl/number-formatter.js"],"names":["isUndefined","throwError","isNullOrUndefined","extend","defaultCurrencyCode","IntlBase","base","ParserBase","parser","errorText","integerError","percentSign","minusSign","spaceRegex","mapper","infinity","nan","NumberFormat","numberFormatter","culture","option","cldr","_this","fOptions","cOptions","dOptions","symbolPattern","dependable","getDependables","numberMapper","getNumberMapper","parserObject","getNumberingSystem","currencySymbol","getCurrencySymbol","numericObject","currency","altSymbol","percentSymbol","numberSymbols","minusSymbol","symbols","format","formatRegex","test","customFormat","getProperNumericSkeleton","isCurrency","type","isPercent","getSymbolPattern","numberSystem","isAccount","groupOne","checkValueRange","maximumSignificantDigits","minimumSignificantDigits","maximumFractionDigits","minimumFractionDigits","fractionDigits","useGrouping","replace","defaultCurrency","split","nData","getFormatData","pData","groupSeparator","groupData","getGroupingDetails","minFrac","minimumFraction","mval","maximumFraction","mfrac","lfrac","value","isNaN","isFinite","intNumberFormatter","pattern","ret","match","negativeDataRegex","pattern_1","p","lastIndexOf","temp","primary","length","s","secondary","val1","val2","checkbothExist","isFraction","decide","dint","str1","str2","checkRange","val","text","range","curData","undefined","zeroData","fValue","processSignificantDigits","processFraction","minimumIntegerDigits","processMinimumIntegers","toExponential","groupNumbers","convertValueParts","latnParseRegex","nlead","nend","min","max","tn","toPrecision","level1","sep","decimalSymbol","level2","flag","prefix","str","slice","join","toFixed","j","lead","len","i"],"mappings":"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","sourcesContent":["import { isUndefined, throwError, isNullOrUndefined, extend } from '../util';\nimport { defaultCurrencyCode } from '../internationalization';\nimport { IntlBase as base } from './intl-base';\nimport { ParserBase as parser } from './parser-base';\nvar errorText = {\n    'ms': 'minimumSignificantDigits',\n    'ls': 'maximumSignificantDigits',\n    'mf': 'minimumFractionDigits',\n    'lf': 'maximumFractionDigits',\n};\nvar integerError = 'minimumIntegerDigits';\nvar percentSign = 'percentSign';\nvar minusSign = 'minusSign';\nvar spaceRegex = /\\s/;\nvar mapper = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\nvar infinity = 'infinity';\nvar nan = 'nan';\n/**\n * Module for number formatting.\n * @private\n */\nvar NumberFormat = /** @class */ (function () {\n    function NumberFormat() {\n    }\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} culture -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n     * @param {Object} object- Specifies the global cldr data collection.\n     * @return Function.\n     */\n    NumberFormat.numberFormatter = function (culture, option, cldr) {\n        var _this = this;\n        var fOptions = extend({}, option);\n        var cOptions = {};\n        var dOptions = {};\n        var symbolPattern;\n        var dependable = base.getDependables(cldr, culture, '', true);\n        dOptions.numberMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr), true);\n        dOptions.currencySymbol = base.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n        /* tslint:disable no-any */\n        dOptions.percentSymbol = dOptions.numberMapper.numberSymbols[percentSign];\n        dOptions.minusSymbol = dOptions.numberMapper.numberSymbols[minusSign];\n        var symbols = dOptions.numberMapper.numberSymbols;\n        if ((option.format) && !(base.formatRegex.test(option.format))) {\n            cOptions = base.customFormat(option.format, dOptions, dependable.numericObject);\n        }\n        else {\n            extend(fOptions, base.getProperNumericSkeleton(option.format || 'N'));\n            fOptions.isCurrency = fOptions.type === 'currency';\n            fOptions.isPercent = fOptions.type === 'percent';\n            symbolPattern = base.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n            fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n            this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n            if (!isUndefined(fOptions.fractionDigits)) {\n                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n            }\n            if (isUndefined(fOptions.useGrouping)) {\n                fOptions.useGrouping = true;\n            }\n            if (fOptions.isCurrency) {\n                symbolPattern = symbolPattern.replace(/\\u00A4/g, base.defaultCurrency);\n            }\n            var split = symbolPattern.split(';');\n            cOptions.nData = base.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n            cOptions.pData = base.getFormatData(split[0], false, dOptions.currencySymbol);\n            if (fOptions.useGrouping) {\n                fOptions.groupSeparator = symbols[mapper[2]];\n                fOptions.groupData = this.getGroupingDetails(split[0]);\n            }\n            var minFrac = isUndefined(fOptions.minimumFractionDigits);\n            if (minFrac) {\n                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n            }\n            if (isUndefined(fOptions.maximumFractionDigits)) {\n                var mval = cOptions.nData.maximumFraction;\n                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n            }\n            var mfrac = fOptions.minimumFractionDigits;\n            var lfrac = fOptions.maximumFractionDigits;\n            if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n                if (mfrac > lfrac) {\n                    fOptions.maximumFractionDigits = mfrac;\n                }\n            }\n        }\n        extend(cOptions.nData, fOptions);\n        extend(cOptions.pData, fOptions);\n        return function (value) {\n            if (isNaN(value)) {\n                return symbols[mapper[1]];\n            }\n            else if (!isFinite(value)) {\n                return symbols[mapper[0]];\n            }\n            return _this.intNumberFormatter(value, cOptions, dOptions);\n        };\n    };\n    /**\n     * Returns grouping details for the pattern provided\n     * @param {string} pattern\n     * @returns {GroupDetails}\n     */\n    NumberFormat.getGroupingDetails = function (pattern) {\n        var ret = {};\n        var match = pattern.match(base.negativeDataRegex);\n        if (match && match[4]) {\n            var pattern_1 = match[4];\n            var p = pattern_1.lastIndexOf(',');\n            if (p !== -1) {\n                var temp = pattern_1.split('.')[0];\n                ret.primary = (temp.length - p) - 1;\n                var s = pattern_1.lastIndexOf(',', p - 1);\n                if (s !== -1) {\n                    ret.secondary = p - 1 - s;\n                }\n            }\n        }\n        return ret;\n    };\n    /**\n     * Returns if the provided integer range is valid.\n     * @param {number} val1\n     * @param {number} val2\n     * @param {boolean} checkbothExist\n     * @param {boolean} isFraction\n     * @returns {boolean}\n     */\n    NumberFormat.checkValueRange = function (val1, val2, checkbothExist, isFraction) {\n        var decide = isFraction ? 'f' : 's';\n        var dint = 0;\n        var str1 = errorText['l' + decide];\n        var str2 = errorText['m' + decide];\n        if (!isUndefined(val1)) {\n            this.checkRange(val1, str1, isFraction);\n            dint++;\n        }\n        if (!isUndefined(val2)) {\n            this.checkRange(val2, str2, isFraction);\n            dint++;\n        }\n        if (dint === 2) {\n            if (val1 < val2) {\n                throwError(str2 + 'specified must be less than the' + str1);\n            }\n            else {\n                return true;\n            }\n        }\n        else if (checkbothExist && dint === 1) {\n            throwError('Both' + str2 + 'and' + str2 + 'must be present');\n        }\n        return false;\n    };\n    /**\n     * Check if the provided fraction range is valid\n     * @param {number} val\n     * @param {string} text\n     * @param {boolean} isFraction\n     * @returns {void}\n     */\n    NumberFormat.checkRange = function (val, text, isFraction) {\n        var range = isFraction ? [0, 20] : [1, 21];\n        if (val < range[0] || val > range[1]) {\n            throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n        }\n    };\n    /**\n     * Returns formatted numeric string for provided formatting options\n     * @param {number} value\n     * @param {base.GenericFormatOptions} fOptions\n     * @param {CommonOptions} dOptions\n     * @returns {string}\n     */\n    NumberFormat.intNumberFormatter = function (value, fOptions, dOptions) {\n        var curData;\n        if (isUndefined(fOptions.nData.type)) {\n            return undefined;\n        }\n        else {\n            if (value < 0) {\n                value = value * -1;\n                curData = fOptions.nData;\n            }\n            else if (value === 0) {\n                curData = fOptions.zeroData || fOptions.pData;\n            }\n            else {\n                curData = fOptions.pData;\n            }\n            var fValue = '';\n            if (curData.isPercent) {\n                value = value * 100;\n            }\n            if (curData.groupOne) {\n                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n            }\n            else {\n                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n                if (curData.minimumIntegerDigits) {\n                    fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n                }\n            }\n            if (curData.type === 'scientific') {\n                fValue = value.toExponential(curData.maximumFractionDigits);\n                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper[4]]);\n            }\n            fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper[3]]);\n            if (curData.useGrouping) {\n                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper[3]] || '.', curData.groupData.secondary);\n            }\n            fValue = parser.convertValueParts(fValue, base.latnParseRegex, dOptions.numberMapper.mapper);\n            if (curData.nlead === 'N/A') {\n                return curData.nlead;\n            }\n            else {\n                return curData.nlead + fValue + curData.nend;\n            }\n        }\n    };\n    /**\n     * Returns significant digits processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    NumberFormat.processSignificantDigits = function (value, min, max) {\n        var temp = value + '';\n        var tn;\n        var length = temp.length;\n        if (length < min) {\n            return value.toPrecision(min);\n        }\n        else {\n            temp = value.toPrecision(max);\n            tn = +temp;\n            return tn + '';\n        }\n    };\n    /**\n     * Returns grouped numeric string\n     * @param {string} val\n     * @param {number} level1\n     * @param {string} sep\n     * @param {string} decimalSymbol\n     * @param {number} level2\n     * @returns {string}\n     */\n    NumberFormat.groupNumbers = function (val, level1, sep, decimalSymbol, level2) {\n        var flag = !isNullOrUndefined(level2) && level2 !== 0;\n        var split = val.split(decimalSymbol);\n        var prefix = split[0];\n        var length = prefix.length;\n        var str = '';\n        while (length > level1) {\n            str = prefix.slice(length - level1, length) + (str.length ?\n                (sep + str) : '');\n            length -= level1;\n            if (flag) {\n                level1 = level2;\n                flag = false;\n            }\n        }\n        split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n        return split.join(decimalSymbol);\n    };\n    /**\n     * Returns fraction processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    NumberFormat.processFraction = function (value, min, max) {\n        var temp = (value + '').split('.')[1];\n        var length = temp ? temp.length : 0;\n        if (min && length < min) {\n            var ret = '';\n            if (length === 0) {\n                ret = value.toFixed(min);\n            }\n            else {\n                ret += value;\n                for (var j = 0; j < min - length; j++) {\n                    ret += '0';\n                }\n                return ret;\n            }\n            return value.toFixed(min);\n        }\n        else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n            return value.toFixed(max);\n        }\n        return value + '';\n    };\n    /**\n     * Returns integer processed numeric string\n     * @param {string} value\n     * @param {number} min\n     * @returns {string}\n     */\n    NumberFormat.processMinimumIntegers = function (value, min) {\n        var temp = value.split('.');\n        var lead = temp[0];\n        var len = lead.length;\n        if (len < min) {\n            for (var i = 0; i < min - len; i++) {\n                lead = '0' + lead;\n            }\n            temp[0] = lead;\n        }\n        return temp.join('.');\n    };\n    return NumberFormat;\n}());\nexport { NumberFormat };\n"]},"metadata":{},"sourceType":"module"}