{"ast":null,"code":"/**\n * Function helps to find which highlightSearch is to call based on your data.\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n */\nexport function highlightSearch(element, query, ignoreCase, type, isBlazor) {\n  if (query === '') {\n    return;\n  } else {\n    var ignoreRegex = ignoreCase ? 'gim' : 'gm';\n    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n    var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';\n    findTextNode(element, new RegExp(replaceQuery, ignoreRegex), isBlazor);\n  }\n}\n\nfunction findTextNode(element, pattern, isBlazor) {\n  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {\n    if (element.childNodes[index].nodeType === 3) {\n      element = isBlazor && element.classList.contains('e-highlight') ? element.parentElement : element;\n\n      if (isBlazor && element.getAttribute('data-value')) {\n        element.innerHTML = element.getAttribute('data-value').replace(pattern, '<span class=\"e-highlight\">$1</span>');\n      } else {\n        element.innerHTML = element.innerHTML.replace(pattern, '<span class=\"e-highlight\">$1</span>');\n      }\n\n      break;\n    } else {\n      findTextNode(element.childNodes[index], pattern, isBlazor);\n    }\n  }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n * @param  {HTMLElement} content - Specifies an content element.\n */\n\n\nexport function revertHighlightSearch(content) {\n  var contentElement = content.querySelectorAll('.e-highlight');\n\n  for (var i = contentElement.length - 1; i >= 0; i--) {\n    var parent_1 = contentElement[i].parentNode;\n    var text = document.createTextNode(contentElement[i].textContent);\n    parent_1.replaceChild(text, contentElement[i]);\n  }\n}","map":{"version":3,"sources":["/Users/jay/Whiteboard/node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js"],"names":["highlightSearch","element","query","ignoreCase","type","isBlazor","ignoreRegex","test","replace","replaceQuery","findTextNode","RegExp","pattern","index","childNodes","length","nodeType","classList","contains","parentElement","getAttribute","innerHTML","revertHighlightSearch","content","contentElement","querySelectorAll","i","parent_1","parentNode","text","document","createTextNode","textContent","replaceChild"],"mappings":"AAAA;;;;;;;AAOA,OAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,UAAzC,EAAqDC,IAArD,EAA2DC,QAA3D,EAAqE;AACxE,MAAIH,KAAK,KAAK,EAAd,EAAkB;AACd;AACH,GAFD,MAGK;AACD,QAAII,WAAW,GAAGH,UAAU,GAAG,KAAH,GAAW,IAAvC;AACAD,IAAAA,KAAK,GAAG,mBAAmBK,IAAnB,CAAwBL,KAAxB,IAAiCA,KAAjC,GAAyCA,KAAK,CAACM,OAAN,CAAc,qCAAd,EAAqD,MAArD,CAAjD;AACA,QAAIC,YAAY,GAAGL,IAAI,KAAK,YAAT,GAAwB,OAAOF,KAAP,GAAe,GAAvC,GAA6CE,IAAI,KAAK,UAAT,GAAsB,MAAMF,KAAN,GAAc,IAApC,GAA2C,MAAMA,KAAN,GAAc,GAAzH;AACAQ,IAAAA,YAAY,CAACT,OAAD,EAAU,IAAIU,MAAJ,CAAWF,YAAX,EAAyBH,WAAzB,CAAV,EAAiDD,QAAjD,CAAZ;AACH;AACJ;;AACD,SAASK,YAAT,CAAsBT,OAAtB,EAA+BW,OAA/B,EAAwCP,QAAxC,EAAkD;AAC9C,OAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBZ,OAAO,CAACa,UAAR,IAAuBD,KAAK,GAAGZ,OAAO,CAACa,UAAR,CAAmBC,MAAtE,EAA+EF,KAAK,EAApF,EAAwF;AACpF,QAAIZ,OAAO,CAACa,UAAR,CAAmBD,KAAnB,EAA0BG,QAA1B,KAAuC,CAA3C,EAA8C;AAC1Cf,MAAAA,OAAO,GAAII,QAAQ,IAAIJ,OAAO,CAACgB,SAAR,CAAkBC,QAAlB,CAA2B,aAA3B,CAAb,GAA0DjB,OAAO,CAACkB,aAAlE,GAAkFlB,OAA5F;;AACA,UAAII,QAAQ,IAAIJ,OAAO,CAACmB,YAAR,CAAqB,YAArB,CAAhB,EAAoD;AAChDnB,QAAAA,OAAO,CAACoB,SAAR,GAAoBpB,OAAO,CAACmB,YAAR,CAAqB,YAArB,EAAmCZ,OAAnC,CAA2CI,OAA3C,EAAoD,qCAApD,CAApB;AACH,OAFD,MAGK;AACDX,QAAAA,OAAO,CAACoB,SAAR,GAAoBpB,OAAO,CAACoB,SAAR,CAAkBb,OAAlB,CAA0BI,OAA1B,EAAmC,qCAAnC,CAApB;AACH;;AACD;AACH,KATD,MAUK;AACDF,MAAAA,YAAY,CAACT,OAAO,CAACa,UAAR,CAAmBD,KAAnB,CAAD,EAA4BD,OAA5B,EAAqCP,QAArC,CAAZ;AACH;AACJ;AACJ;AACD;;;;;;AAIA,OAAO,SAASiB,qBAAT,CAA+BC,OAA/B,EAAwC;AAC3C,MAAIC,cAAc,GAAGD,OAAO,CAACE,gBAAR,CAAyB,cAAzB,CAArB;;AACA,OAAK,IAAIC,CAAC,GAAGF,cAAc,CAACT,MAAf,GAAwB,CAArC,EAAwCW,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,QAAIC,QAAQ,GAAGH,cAAc,CAACE,CAAD,CAAd,CAAkBE,UAAjC;AACA,QAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwBP,cAAc,CAACE,CAAD,CAAd,CAAkBM,WAA1C,CAAX;AACAL,IAAAA,QAAQ,CAACM,YAAT,CAAsBJ,IAAtB,EAA4BL,cAAc,CAACE,CAAD,CAA1C;AACH;AACJ","sourcesContent":["/**\n * Function helps to find which highlightSearch is to call based on your data.\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n */\nexport function highlightSearch(element, query, ignoreCase, type, isBlazor) {\n    if (query === '') {\n        return;\n    }\n    else {\n        var ignoreRegex = ignoreCase ? 'gim' : 'gm';\n        query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n        var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';\n        findTextNode(element, new RegExp(replaceQuery, ignoreRegex), isBlazor);\n    }\n}\nfunction findTextNode(element, pattern, isBlazor) {\n    for (var index = 0; element.childNodes && (index < element.childNodes.length); index++) {\n        if (element.childNodes[index].nodeType === 3) {\n            element = (isBlazor && element.classList.contains('e-highlight')) ? element.parentElement : element;\n            if (isBlazor && element.getAttribute('data-value')) {\n                element.innerHTML = element.getAttribute('data-value').replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            else {\n                element.innerHTML = element.innerHTML.replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            break;\n        }\n        else {\n            findTextNode(element.childNodes[index], pattern, isBlazor);\n        }\n    }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n * @param  {HTMLElement} content - Specifies an content element.\n */\nexport function revertHighlightSearch(content) {\n    var contentElement = content.querySelectorAll('.e-highlight');\n    for (var i = contentElement.length - 1; i >= 0; i--) {\n        var parent_1 = contentElement[i].parentNode;\n        var text = document.createTextNode(contentElement[i].textContent);\n        parent_1.replaceChild(text, contentElement[i]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}