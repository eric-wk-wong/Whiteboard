{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\n\nexport function createElement(tagName, properties) {\n  //tslint:disable-next-line\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n\nfunction getClassList(classes) {\n  var classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\n\n\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function prepend(fromElements, toElement, isEval) {\n  //tslint:disable:no-any\n  if (isObject(toElement)) {\n    VirtualDOM.prepend(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function append(fromElements, toElement, isEval) {\n  if (isObject(toElement)) {\n    VirtualDOM.append(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.appendChild(docFrag);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n} //tslint: enable:no-any\n\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\n\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\n\n\nexport function detach(element) {\n  if (isObject(element)) {\n    return VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    return parentNode.removeChild(element);\n  }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\n\nexport function remove(element) {\n  if (isObject(element)) {\n    VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n  }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\n\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n\n    if (isObject(ele)) {\n      var iKey = key;\n\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n\n      ele.attributes[iKey] = attributes[key];\n    } else {\n      ele.setAttribute(key, attributes[key]);\n    }\n  }\n\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\n\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: false\n    });\n  } else {\n    return context.querySelector(selector);\n  }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && !needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: true\n    });\n  } else {\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n  }\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\n\nexport function closest(element, selector) {\n  var el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\n\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\n\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\n\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    if (isObject(element)) {\n      // tslint:disable-next-line:no-any\n      VirtualDOM.setStyleAttribute(element, attrs);\n    } else {\n      Object.keys(attrs).forEach(function (key) {\n        // tslint:disable-next-line:no-any\n        element.style[key] = attrs[key];\n      });\n    }\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\n\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\n\nexport function matches(element, selector) {\n  //tslint:disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n  if (isObject(ele)) {\n    if (innerHTML === '') {\n      ele.children = [];\n    } else {\n      var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n\n      if (res.length) {\n        VirtualDOM.assignParent(res, ele);\n        ele.children = res;\n      }\n    }\n  } else {\n    ele.innerHTML = innerHTML;\n  }\n} //tslint:disable-next-line\n\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // tslint:disable-next-line:no-any\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\n\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    } else {\n      return {\n        tagName: element.tagName,\n        attributes: element.attributes\n      };\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"sources":["/Users/ewong/Development/Whiteboard/node_modules/@syncfusion/ej2-base/src/dom.js"],"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","VirtualDOM","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","_i","_a","length","ele","_b","classList_1","curClass","RegExp","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","vDomSelector","selectAll","querySelector","nodeList","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","toString","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","children","res","ConvertHTMLToJSon","assignParent","containsClass","cloneNode","deep"],"mappings":"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","sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nexport function createElement(tagName, properties) {\n    //tslint:disable-next-line\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (isObject(ele)) {\n                var curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        var flag = isObject(ele);\n        var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                if (flag) {\n                    var classes_1 = getValue('attributes.className', ele);\n                    var classArr = classes_1.split(' ');\n                    var index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n//tslint: enable:no-any\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nexport function detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nexport function remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (isObject(ele)) {\n            var iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[iKey] = attributes[key];\n        }\n        else {\n            ele.setAttribute(key, attributes[key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: false });\n    }\n    else {\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: true });\n    }\n    else {\n        var nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach(function (key) {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nexport function matches(element, selector) {\n    //tslint:disable-next-line\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}