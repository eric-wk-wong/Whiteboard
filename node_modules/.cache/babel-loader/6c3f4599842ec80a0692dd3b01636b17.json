{"ast":null,"code":"import { isNullOrUndefined, merge } from './util';\nvar headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nvar defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\n\nvar Ajax =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Ajax class\n   * @param  {string|Object} options?\n   * @param  {string} type?\n   * @param  {boolean} async?\n   * @returns defaultType\n   */\n  function Ajax(options, type, async, contentType) {\n    /**\n     * A boolean value indicating whether the request should be sent asynchronous or not.\n     * @default true\n     */\n    this.mode = true;\n    /**\n     * A boolean value indicating whether to ignore the promise reject.\n     * @private\n     * @default true\n     */\n\n    this.emitError = true;\n    this.options = {};\n\n    if (typeof options === 'string') {\n      this.url = options;\n      this.type = type ? type.toUpperCase() : defaultType;\n      this.mode = !isNullOrUndefined(async) ? async : true;\n    } else if (typeof options === 'object') {\n      this.options = options;\n      merge(this, this.options);\n    }\n\n    this.type = this.type ? this.type.toUpperCase() : defaultType;\n    this.contentType = this.contentType !== undefined ? this.contentType : contentType;\n  }\n  /**\n   * Send the request to server.\n   * @param {any} data - To send the user data\n   * @return {Promise}\n   */\n\n\n  Ajax.prototype.send = function (data) {\n    var _this = this;\n\n    this.data = isNullOrUndefined(data) ? this.data : data;\n    var eventArgs = {\n      cancel: false,\n      httpRequest: null\n    };\n    var promise = new Promise(function (resolve, reject) {\n      _this.httpRequest = new XMLHttpRequest();\n\n      _this.httpRequest.onreadystatechange = function () {\n        _this.stateChange(resolve, reject);\n      };\n\n      if (!isNullOrUndefined(_this.onLoad)) {\n        _this.httpRequest.onload = _this.onLoad;\n      }\n\n      if (!isNullOrUndefined(_this.onProgress)) {\n        _this.httpRequest.onprogress = _this.onProgress;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onAbort)) {\n        _this.httpRequest.onabort = _this.onAbort;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onError)) {\n        _this.httpRequest.onerror = _this.onError;\n      } //** Upload Events **/\n\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(_this.onUploadProgress)) {\n        _this.httpRequest.upload.onprogress = _this.onUploadProgress;\n      }\n\n      _this.httpRequest.open(_this.type, _this.url, _this.mode); // Set default headers\n\n\n      if (!isNullOrUndefined(_this.data) && _this.contentType !== null) {\n        _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8');\n      }\n\n      if (_this.beforeSend) {\n        eventArgs.httpRequest = _this.httpRequest;\n\n        _this.beforeSend(eventArgs);\n      }\n\n      if (!eventArgs.cancel) {\n        _this.httpRequest.send(!isNullOrUndefined(_this.data) ? _this.data : null);\n      }\n    });\n    return promise;\n  };\n\n  Ajax.prototype.successHandler = function (data) {\n    if (this.onSuccess) {\n      this.onSuccess(data, this);\n    }\n\n    return data;\n  };\n\n  Ajax.prototype.failureHandler = function (reason) {\n    if (this.onFailure) {\n      this.onFailure(this.httpRequest);\n    }\n\n    return reason;\n  };\n\n  Ajax.prototype.stateChange = function (resolve, reject) {\n    var data = this.httpRequest.responseText;\n\n    if (this.dataType && this.dataType.toLowerCase() === 'json') {\n      if (data === '') {\n        data = undefined;\n      } else {\n        try {\n          data = JSON.parse(data);\n        } catch (error) {// no exception handle\n        }\n      }\n    }\n\n    if (this.httpRequest.readyState === 4) {\n      //success range should be 200 to 299\n      if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {\n        resolve(this.successHandler(data));\n      } else {\n        if (this.emitError) {\n          reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n        } else {\n          resolve();\n        }\n      }\n    }\n  };\n  /**\n   * To get the response header from XMLHttpRequest\n   * @param  {string} key Key to search in the response header\n   * @returns {string}\n   */\n\n\n  Ajax.prototype.getResponseHeader = function (key) {\n    var responseHeaders;\n    var header;\n    responseHeaders = {};\n    var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n\n    while (headers) {\n      responseHeaders[headers[1].toLowerCase()] = headers[2];\n      headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n    }\n\n    header = responseHeaders[key.toLowerCase()];\n    return isNullOrUndefined(header) ? null : header;\n  };\n\n  return Ajax;\n}();\n\nexport { Ajax };","map":{"version":3,"sources":["/Users/ewong/Development/Whiteboard/node_modules/@syncfusion/ej2-base/src/ajax.js"],"names":["isNullOrUndefined","merge","headerRegex","defaultType","Ajax","options","type","async","contentType","mode","emitError","url","toUpperCase","undefined","prototype","send","data","_this","eventArgs","cancel","httpRequest","promise","Promise","resolve","reject","XMLHttpRequest","onreadystatechange","stateChange","onLoad","onload","onProgress","onprogress","onAbort","onabort","onError","onerror","onUploadProgress","upload","open","setRequestHeader","beforeSend","successHandler","onSuccess","failureHandler","reason","onFailure","responseText","dataType","toLowerCase","JSON","parse","error","readyState","status","Error","statusText","getResponseHeader","key","responseHeaders","header","headers","exec","getAllResponseHeaders"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, merge } from './util';\nvar headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nvar defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\nvar Ajax = /** @class */ (function () {\n    /**\n     * Constructor for Ajax class\n     * @param  {string|Object} options?\n     * @param  {string} type?\n     * @param  {boolean} async?\n     * @returns defaultType\n     */\n    function Ajax(options, type, async, contentType) {\n        /**\n         * A boolean value indicating whether the request should be sent asynchronous or not.\n         * @default true\n         */\n        this.mode = true;\n        /**\n         * A boolean value indicating whether to ignore the promise reject.\n         * @private\n         * @default true\n         */\n        this.emitError = true;\n        this.options = {};\n        if (typeof options === 'string') {\n            this.url = options;\n            this.type = type ? type.toUpperCase() : defaultType;\n            this.mode = !isNullOrUndefined(async) ? async : true;\n        }\n        else if (typeof options === 'object') {\n            this.options = options;\n            merge(this, this.options);\n        }\n        this.type = this.type ? this.type.toUpperCase() : defaultType;\n        this.contentType = (this.contentType !== undefined) ? this.contentType : contentType;\n    }\n    /**\n     * Send the request to server.\n     * @param {any} data - To send the user data\n     * @return {Promise}\n     */\n    Ajax.prototype.send = function (data) {\n        var _this = this;\n        this.data = isNullOrUndefined(data) ? this.data : data;\n        var eventArgs = {\n            cancel: false,\n            httpRequest: null\n        };\n        var promise = new Promise(function (resolve, reject) {\n            _this.httpRequest = new XMLHttpRequest();\n            _this.httpRequest.onreadystatechange = function () { _this.stateChange(resolve, reject); };\n            if (!isNullOrUndefined(_this.onLoad)) {\n                _this.httpRequest.onload = _this.onLoad;\n            }\n            if (!isNullOrUndefined(_this.onProgress)) {\n                _this.httpRequest.onprogress = _this.onProgress;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(_this.onAbort)) {\n                _this.httpRequest.onabort = _this.onAbort;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(_this.onError)) {\n                _this.httpRequest.onerror = _this.onError;\n            }\n            //** Upload Events **/\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(_this.onUploadProgress)) {\n                _this.httpRequest.upload.onprogress = _this.onUploadProgress;\n            }\n            _this.httpRequest.open(_this.type, _this.url, _this.mode);\n            // Set default headers\n            if (!isNullOrUndefined(_this.data) && _this.contentType !== null) {\n                _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8');\n            }\n            if (_this.beforeSend) {\n                eventArgs.httpRequest = _this.httpRequest;\n                _this.beforeSend(eventArgs);\n            }\n            if (!eventArgs.cancel) {\n                _this.httpRequest.send(!isNullOrUndefined(_this.data) ? _this.data : null);\n            }\n        });\n        return promise;\n    };\n    Ajax.prototype.successHandler = function (data) {\n        if (this.onSuccess) {\n            this.onSuccess(data, this);\n        }\n        return data;\n    };\n    Ajax.prototype.failureHandler = function (reason) {\n        if (this.onFailure) {\n            this.onFailure(this.httpRequest);\n        }\n        return reason;\n    };\n    Ajax.prototype.stateChange = function (resolve, reject) {\n        var data = this.httpRequest.responseText;\n        if (this.dataType && this.dataType.toLowerCase() === 'json') {\n            if (data === '') {\n                data = undefined;\n            }\n            else {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    // no exception handle\n                }\n            }\n        }\n        if (this.httpRequest.readyState === 4) {\n            //success range should be 200 to 299\n            if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {\n                resolve(this.successHandler(data));\n            }\n            else {\n                if (this.emitError) {\n                    reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n                }\n                else {\n                    resolve();\n                }\n            }\n        }\n    };\n    /**\n     * To get the response header from XMLHttpRequest\n     * @param  {string} key Key to search in the response header\n     * @returns {string}\n     */\n    Ajax.prototype.getResponseHeader = function (key) {\n        var responseHeaders;\n        var header;\n        responseHeaders = {};\n        var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        while (headers) {\n            responseHeaders[headers[1].toLowerCase()] = headers[2];\n            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        }\n        header = responseHeaders[key.toLowerCase()];\n        return isNullOrUndefined(header) ? null : header;\n    };\n    return Ajax;\n}());\nexport { Ajax };\n"]},"metadata":{},"sourceType":"module"}