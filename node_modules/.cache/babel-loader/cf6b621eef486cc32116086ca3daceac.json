{"ast":null,"code":"import { Ajax } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataUtil } from './util';\nimport { Query } from './query';\nimport { ODataAdaptor, JsonAdaptor, CacheAdaptor, RemoteSaveAdaptor } from './adaptors';\n/**\n * DataManager is used to manage and manipulate relational data.\n */\n\nvar DataManager =\n/** @class */\nfunction () {\n  /**\n   * Constructor for DataManager class\n   * @param  {DataOptions|JSON[]} dataSource?\n   * @param  {Query} query?\n   * @param  {AdaptorOptions|string} adaptor?\n   * @hidden\n   */\n  function DataManager(dataSource, query, adaptor) {\n    var _this = this;\n    /** @hidden */\n\n\n    this.dateParse = true;\n    /** @hidden */\n\n    this.timeZoneHandling = true;\n    this.requests = [];\n\n    if (!dataSource && !this.dataSource) {\n      dataSource = [];\n    }\n\n    adaptor = adaptor || dataSource.adaptor;\n\n    if (dataSource && dataSource.timeZoneHandling === false) {\n      this.timeZoneHandling = dataSource.timeZoneHandling;\n    }\n\n    var data;\n\n    if (dataSource instanceof Array) {\n      data = {\n        json: dataSource,\n        offline: true\n      };\n    } else if (typeof dataSource === 'object') {\n      if (!dataSource.json) {\n        dataSource.json = [];\n      }\n\n      data = {\n        url: dataSource.url,\n        insertUrl: dataSource.insertUrl,\n        removeUrl: dataSource.removeUrl,\n        updateUrl: dataSource.updateUrl,\n        crudUrl: dataSource.crudUrl,\n        batchUrl: dataSource.batchUrl,\n        json: dataSource.json,\n        headers: dataSource.headers,\n        accept: dataSource.accept,\n        data: dataSource.data,\n        timeTillExpiration: dataSource.timeTillExpiration,\n        cachingPageSize: dataSource.cachingPageSize,\n        enableCaching: dataSource.enableCaching,\n        requestType: dataSource.requestType,\n        key: dataSource.key,\n        crossDomain: dataSource.crossDomain,\n        jsonp: dataSource.jsonp,\n        dataType: dataSource.dataType,\n        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n        requiresFormat: dataSource.requiresFormat\n      };\n    } else {\n      DataUtil.throwError('DataManager: Invalid arguments');\n    }\n\n    if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n      data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n    }\n\n    if (data.dataType === undefined) {\n      data.dataType = 'json';\n    }\n\n    this.dataSource = data;\n    this.defaultQuery = query;\n\n    if (data.url && data.offline && !data.json.length) {\n      this.isDataAvailable = false;\n      this.adaptor = adaptor || new ODataAdaptor();\n      this.dataSource.offline = false;\n      this.ready = this.executeQuery(query || new Query());\n      this.ready.then(function (e) {\n        _this.dataSource.offline = true;\n        _this.isDataAvailable = true;\n        data.json = e.result;\n        _this.adaptor = new JsonAdaptor();\n      });\n    } else {\n      this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n    }\n\n    if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n      data.jsonp = 'callback';\n    }\n\n    this.adaptor = adaptor || this.adaptor;\n\n    if (data.enableCaching) {\n      this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n    }\n\n    return this;\n  }\n  /**\n   * Overrides DataManager's default query with given query.\n   * @param  {Query} query - Defines the new default query.\n   */\n\n\n  DataManager.prototype.setDefaultQuery = function (query) {\n    this.defaultQuery = query;\n    return this;\n  };\n  /**\n   * Executes the given query with local data source.\n   * @param  {Query} query - Defines the query to retrieve data.\n   */\n\n\n  DataManager.prototype.executeLocal = function (query) {\n    if (!this.defaultQuery && !(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n    }\n\n    if (!this.dataSource.json) {\n      DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n    }\n\n    query = query || this.defaultQuery;\n    var result = this.adaptor.processQuery(this, query);\n\n    if (query.subQuery) {\n      var from = query.subQuery.fromTable;\n      var lookup = query.subQuery.lookups;\n      var res = query.isCountRequired ? result.result : result;\n\n      if (lookup && lookup instanceof Array) {\n        DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n      }\n\n      for (var j = 0; j < res.length; j++) {\n        if (res[j][from] instanceof Array) {\n          res[j] = extend({}, {}, res[j]);\n          res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n        }\n      }\n    }\n\n    return this.adaptor.processResponse(result, this, query);\n  };\n  /**\n   * Executes the given query with either local or remote data source.\n   * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n   * @param  {Query|Function} query - Defines the query to retrieve data.\n   * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n   * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n   * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n   */\n\n\n  DataManager.prototype.executeQuery = function (query, done, fail, always) {\n    var _this = this;\n\n    var makeRequest = 'makeRequest';\n\n    if (typeof query === 'function') {\n      always = fail;\n      fail = done;\n      done = query;\n      query = null;\n    }\n\n    if (!query) {\n      query = this.defaultQuery;\n    }\n\n    if (!(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n    }\n\n    var deffered = new Deferred();\n    var args = {\n      query: query\n    };\n\n    if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !isNullOrUndefined(this.adaptor[makeRequest])) {\n      var result = this.adaptor.processQuery(this, query);\n\n      if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n        this.adaptor[makeRequest](result, deffered, args, query);\n      } else if (!isNullOrUndefined(result.url)) {\n        this.makeRequest(result, deffered, args, query);\n      } else {\n        args = DataManager.getDeferedArgs(query, result, args);\n        deffered.resolve(args);\n      }\n    } else {\n      DataManager.nextTick(function () {\n        var res = _this.executeLocal(query);\n\n        args = DataManager.getDeferedArgs(query, res, args);\n        deffered.resolve(args);\n      });\n    }\n\n    if (done || fail) {\n      deffered.promise.then(done, fail);\n    }\n\n    if (always) {\n      deffered.promise.then(always, always);\n    }\n\n    return deffered.promise;\n  };\n\n  DataManager.getDeferedArgs = function (query, result, args) {\n    if (query.isCountRequired) {\n      args.result = result.result;\n      args.count = result.count;\n      args.aggregates = result.aggregates;\n    } else {\n      args.result = result;\n    }\n\n    return args;\n  };\n\n  DataManager.nextTick = function (fn) {\n    (window.setImmediate || window.setTimeout)(fn, 0);\n  };\n\n  DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {\n    return extend({}, {\n      type: 'GET',\n      dataType: this.dataSource.dataType,\n      crossDomain: this.dataSource.crossDomain,\n      jsonp: this.dataSource.jsonp,\n      cache: true,\n      processData: false,\n      onSuccess: fnSuccess,\n      onFailure: fnFail\n    }, url);\n  };\n\n  DataManager.prototype.makeRequest = function (url, deffered, args, query) {\n    var _this = this;\n\n    var isSelector = !!query.subQuerySelector;\n\n    var fnFail = function (e) {\n      args.error = e;\n      deffered.reject(args);\n    };\n\n    var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {\n      args.xhr = xhr;\n      args.count = count ? parseInt(count.toString(), 10) : 0;\n      args.result = data;\n      args.request = request;\n      args.aggregates = aggregates;\n      args.actual = actual;\n      args.virtualSelectRecords = virtualSelectRecords;\n      deffered.resolve(args);\n    };\n\n    var fnQueryChild = function (data, selector) {\n      var subDeffer = new Deferred();\n      var childArgs = {\n        parent: args\n      };\n      query.subQuery.isChild = true;\n\n      var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);\n\n      var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n\n      if (!isSelector) {\n        subDeffer.then(function (subData) {\n          if (data) {\n            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n            process(data, subData.count, subData.xhr);\n          }\n        }, fnFail);\n      }\n\n      return childReq;\n    };\n\n    var fnSuccess = function (data, request) {\n      if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this.dateParse) {\n        data = DataUtil.parse.parseJson(data);\n      }\n\n      var result = _this.adaptor.processResponse(data, _this, query, request.httpRequest, request);\n\n      var count = 0;\n      var aggregates = null;\n      var virtualSelectRecords = 'virtualSelectRecords';\n      var virtualRecords = data[virtualSelectRecords];\n\n      if (query.isCountRequired) {\n        count = result.count;\n        aggregates = result.aggregates;\n        result = result.result;\n      }\n\n      if (!query.subQuery) {\n        process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n        return;\n      }\n\n      if (!isSelector) {\n        fnQueryChild(result, request);\n      }\n    };\n\n    var req = this.extendRequest(url, fnSuccess, fnFail);\n    var ajax = new Ajax(req);\n\n    ajax.beforeSend = function () {\n      _this.beforeSend(ajax.httpRequest, ajax);\n    };\n\n    req = ajax.send();\n    req.catch(function (e) {\n      return true;\n    }); // to handle failure remote requests.        \n\n    this.requests.push(ajax);\n\n    if (isSelector) {\n      var promise = void 0;\n      var res = query.subQuerySelector.call(this, {\n        query: query.subQuery,\n        parent: query\n      });\n\n      if (res && res.length) {\n        promise = Promise.all([req, fnQueryChild(null, res)]);\n        promise.then(function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var result = args[0];\n\n          var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);\n\n          var count = 0;\n\n          if (query.isCountRequired) {\n            count = pResult.count;\n            pResult = pResult.result;\n          }\n\n          var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);\n\n          count = 0;\n\n          if (query.subQuery.isCountRequired) {\n            count = cResult.count;\n            cResult = cResult.result;\n          }\n\n          DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n          isSelector = false;\n          process(pResult, count, _this.requests[0].httpRequest);\n        });\n      } else {\n        isSelector = false;\n      }\n    }\n\n    return req;\n  };\n\n  DataManager.prototype.beforeSend = function (request, settings) {\n    this.adaptor.beforeSend(this, request, settings);\n    var headers = this.dataSource.headers;\n    var props;\n\n    for (var i = 0; headers && i < headers.length; i++) {\n      props = [];\n      var keys = Object.keys(headers[i]);\n\n      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var prop = keys_1[_i];\n        props.push(prop);\n        request.setRequestHeader(prop, headers[i][prop]);\n      }\n    }\n  };\n  /**\n   * Save bulk changes to the given table name.\n   * User can add a new record, edit an existing record, and delete a record at the same time.\n   * If the datasource from remote, then updated in a single post.\n   * @param  {Object} changes - Defines the CrudOptions.\n   * @param  {string} key - Defines the column field.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  DataManager.prototype.saveChanges = function (changes, key, tableName, query, original) {\n    var _this = this;\n\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    var args = {\n      url: tableName,\n      key: key || this.dataSource.key\n    };\n    var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n    var doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else {\n      var deff_1 = new Deferred();\n      var ajax_1 = new Ajax(req);\n\n      ajax_1.beforeSend = function () {\n        _this.beforeSend(ajax_1.httpRequest, ajax_1);\n      };\n\n      ajax_1.onSuccess = function (data, request) {\n        deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));\n      };\n\n      ajax_1.onFailure = function (e) {\n        deff_1.reject([{\n          error: e\n        }]);\n      };\n\n      ajax_1.send().catch(function (e) {\n        return true;\n      }); // to handle the failure requests.        \n\n      return deff_1.promise;\n    }\n  };\n  /**\n   * Inserts new record in the given table.\n   * @param  {Object} data - Defines the data to insert.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  DataManager.prototype.insert = function (data, tableName, query, position) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    var req = this.adaptor.insert(this, data, tableName, query, position);\n    var doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else {\n      return this.doAjaxRequest(req);\n    }\n  };\n  /**\n   * Removes data from the table with the given key.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  DataManager.prototype.remove = function (keyField, value, tableName, query) {\n    if (typeof value === 'object') {\n      value = DataUtil.getObject(keyField, value);\n    }\n\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    var res = this.adaptor.remove(this, keyField, value, tableName, query);\n    var doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      return this.doAjaxRequest(res);\n    }\n  };\n  /**\n   * Updates existing record in the given table.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  DataManager.prototype.update = function (keyField, value, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    var res = this.adaptor.update(this, keyField, value, tableName, query, original);\n    var doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      return this.doAjaxRequest(res);\n    }\n  };\n\n  DataManager.prototype.doAjaxRequest = function (res) {\n    var _this = this;\n\n    var defer = new Deferred();\n    res = extend({}, {\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8',\n      processData: false\n    }, res);\n    var ajax = new Ajax(res);\n\n    ajax.beforeSend = function () {\n      _this.beforeSend(ajax.httpRequest, ajax);\n    };\n\n    ajax.onSuccess = function (record, request) {\n      try {\n        DataUtil.parse.parseJson(record);\n      } catch (e) {\n        record = [];\n      }\n\n      record = _this.adaptor.processResponse(DataUtil.parse.parseJson(record), _this, null, request.httpRequest, request);\n      defer.resolve(record);\n    };\n\n    ajax.onFailure = function (e) {\n      defer.reject([{\n        error: e\n      }]);\n    };\n\n    ajax.send().catch(function (e) {\n      return true;\n    }); // to handle the failure requests.\n\n    return defer.promise;\n  };\n\n  return DataManager;\n}();\n\nexport { DataManager };\n/**\n * Deferred is used to handle asynchronous operation.\n */\n\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n    /**\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n     */\n\n\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    /**\n     * Defines the callback function triggers when the Deferred object is resolved.\n     */\n\n    this.then = this.promise.then.bind(this.promise);\n    /**\n     * Defines the callback function triggers when the Deferred object is rejected.\n     */\n\n    this.catch = this.promise.catch.bind(this.promise);\n  }\n\n  return Deferred;\n}();\n\nexport { Deferred };","map":{"version":3,"sources":["D:/developing/projects/whiteboard/node_modules/@syncfusion/ej2-data/src/manager.js"],"names":["Ajax","extend","isNullOrUndefined","DataUtil","Query","ODataAdaptor","JsonAdaptor","CacheAdaptor","RemoteSaveAdaptor","DataManager","dataSource","query","adaptor","_this","dateParse","timeZoneHandling","requests","data","Array","json","offline","url","insertUrl","removeUrl","updateUrl","crudUrl","batchUrl","headers","accept","timeTillExpiration","cachingPageSize","enableCaching","requestType","key","crossDomain","jsonp","dataType","undefined","requiresFormat","throwError","isCors","defaultQuery","length","isDataAvailable","ready","executeQuery","then","e","result","prototype","setDefaultQuery","executeLocal","processQuery","subQuery","from","fromTable","lookup","lookups","res","isCountRequired","buildHierarchy","fKey","j","processResponse","using","slice","done","fail","always","makeRequest","deffered","Deferred","args","getDeferedArgs","resolve","nextTick","promise","count","aggregates","fn","window","setImmediate","setTimeout","extendRequest","fnSuccess","fnFail","type","cache","processData","onSuccess","onFailure","isSelector","subQuerySelector","error","reject","process","xhr","request","actual","virtualSelectRecords","parseInt","toString","fnQueryChild","selector","subDeffer","childArgs","parent","isChild","subUrl","childReq","subData","httpRequest","getResponseHeader","indexOf","parse","parseJson","virtualRecords","req","ajax","beforeSend","send","catch","push","call","Promise","all","_i","arguments","pResult","cResult","settings","props","i","keys","Object","keys_1","prop","setRequestHeader","saveChanges","changes","tableName","original","batchRequest","doAjaxRequest","deff_1","ajax_1","insert","position","remove","keyField","value","getObject","update","defer","contentType","record","bind"],"mappings":"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","sourcesContent":["import { Ajax } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataUtil } from './util';\nimport { Query } from './query';\nimport { ODataAdaptor, JsonAdaptor, CacheAdaptor, RemoteSaveAdaptor } from './adaptors';\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nvar DataManager = /** @class */ (function () {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    function DataManager(dataSource, query, adaptor) {\n        var _this = this;\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        var data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then(function (e) {\n                _this.dataSource.offline = true;\n                _this.isDataAvailable = true;\n                data.json = e.result;\n                _this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    DataManager.prototype.setDefaultQuery = function (query) {\n        this.defaultQuery = query;\n        return this;\n    };\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    DataManager.prototype.executeLocal = function (query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        var result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            var from = query.subQuery.fromTable;\n            var lookup = query.subQuery.lookups;\n            var res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (var j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    };\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    DataManager.prototype.executeQuery = function (query, done, fail, always) {\n        var _this = this;\n        var makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        var deffered = new Deferred();\n        var args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest]))) {\n            var result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(function () {\n                var res = _this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    };\n    DataManager.getDeferedArgs = function (query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    };\n    DataManager.nextTick = function (fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    };\n    DataManager.prototype.extendRequest = function (url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    };\n    DataManager.prototype.makeRequest = function (url, deffered, args, query) {\n        var _this = this;\n        var isSelector = !!query.subQuerySelector;\n        var fnFail = function (e) {\n            args.error = e;\n            deffered.reject(args);\n        };\n        var process = function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        var fnQueryChild = function (data, selector) {\n            var subDeffer = new Deferred();\n            var childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);\n            var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then(function (subData) {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        var fnSuccess = function (data, request) {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            var result = _this.adaptor.processResponse(data, _this, query, request.httpRequest, request);\n            var count = 0;\n            var aggregates = null;\n            var virtualSelectRecords = 'virtualSelectRecords';\n            var virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        var req = this.extendRequest(url, fnSuccess, fnFail);\n        var ajax = new Ajax(req);\n        ajax.beforeSend = function () {\n            _this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch(function (e) { return true; }); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            var promise = void 0;\n            var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then(function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var result = args[0];\n                    var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);\n                    var count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, _this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    };\n    DataManager.prototype.beforeSend = function (request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        var headers = this.dataSource.headers;\n        var props;\n        for (var i = 0; headers && i < headers.length; i++) {\n            props = [];\n            var keys = Object.keys(headers[i]);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var prop = keys_1[_i];\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    };\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.saveChanges = function (changes, key, tableName, query, original) {\n        var _this = this;\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        var doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            var deff_1 = new Deferred();\n            var ajax_1 = new Ajax(req);\n            ajax_1.beforeSend = function () {\n                _this.beforeSend(ajax_1.httpRequest, ajax_1);\n            };\n            ajax_1.onSuccess = function (data, request) {\n                deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));\n            };\n            ajax_1.onFailure = function (e) {\n                deff_1.reject([{ error: e }]);\n            };\n            ajax_1.send().catch(function (e) { return true; }); // to handle the failure requests.        \n            return deff_1.promise;\n        }\n    };\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.insert = function (data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var req = this.adaptor.insert(this, data, tableName, query, position);\n        var doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req);\n        }\n    };\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.remove = function (keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var res = this.adaptor.remove(this, keyField, value, tableName, query);\n        var doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    };\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    DataManager.prototype.update = function (keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        var res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        var doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    };\n    DataManager.prototype.doAjaxRequest = function (res) {\n        var _this = this;\n        var defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        var ajax = new Ajax(res);\n        ajax.beforeSend = function () {\n            _this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = function (record, request) {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = _this.adaptor.processResponse(DataUtil.parse.parseJson(record), _this, null, request.httpRequest, request);\n            defer.resolve(record);\n        };\n        ajax.onFailure = function (e) {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch(function (e) { return true; }); // to handle the failure requests.\n        return defer.promise;\n    };\n    return DataManager;\n}());\nexport { DataManager };\n/**\n * Deferred is used to handle asynchronous operation.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n    return Deferred;\n}());\nexport { Deferred };\n"]},"metadata":{},"sourceType":"module"}