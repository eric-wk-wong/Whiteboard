{"ast":null,"code":"/**\n * Template Engine\n */\nvar LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nvar QUOTES = new RegExp(/'|\"/g);\nvar IF_STMT = new RegExp('if ?\\\\(');\nvar ELSEIF_STMT = new RegExp('else if ?\\\\(');\nvar ELSE_STMT = new RegExp('else');\nvar FOR_STMT = new RegExp('for ?\\\\(');\nvar IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nvar CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nvar NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nvar WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nvar DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nvar WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar exp = new RegExp('\\\\${([^}]*)}', 'g'); // let cachedTemplate: Object = {};\n\nvar ARR_OBJ = /^\\..*/gm;\nvar SINGLE_SLASH = /\\\\/gi;\nvar DOUBLE_SLASH = /\\\\\\\\/gi;\nvar WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n\nexport function expression(value) {\n  if (value) {\n    exp = value;\n  }\n\n  return exp;\n} // /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n\nexport function compile(template, helper) {\n  var argName = 'data';\n  var evalExpResult = evalExp(template, argName, helper);\n  var fnCode = \"var str=\\\"\" + evalExpResult + \"\\\"; return str;\"; // tslint:disable-next-line:no-function-constructor-with-string-args\n\n  var fn = new Function(argName, fnCode);\n  return fn.bind(helper);\n} // function used to evaluate the function expression\n\nfunction evalExp(str, nameSpace, helper) {\n  var varCOunt = 0;\n  /**\n   * Variable containing Local Keys\n   */\n\n  var localKeys = [];\n  var isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n  var singleSpace = '';\n\n  if (isClass) {\n    isClass.forEach(function (value) {\n      singleSpace = value.replace(/\\s\\s+/g, ' ');\n      str = str.replace(value, singleSpace);\n    });\n  }\n\n  return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, function (match, cnt, offset, matchStr) {\n    var SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n    var matches = cnt.match(CALL_FUNCTION); // matches to detect any function calls\n\n    if (matches) {\n      var rlStr = matches[1];\n\n      if (ELSEIF_STMT.test(cnt)) {\n        //handling else-if condition\n        cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function (str) {\n          str = str.trim();\n          return addNameSpace(str, !QUOTES.test(str) && localKeys.indexOf(str) === -1, nameSpace, localKeys);\n        })) + '{ \\n str = str + \"';\n      } else if (IF_STMT.test(cnt)) {\n        //handling if condition\n        cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function (strs) {\n          return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n        })) + '{ \\n str = str + \"';\n      } else if (FOR_STMT.test(cnt)) {\n        //handling for condition\n        var rlStr_1 = matches[1].split(' of '); // replace for each into actual JavaScript\n\n        cnt = '\"; ' + cnt.replace(matches[1], function (mtc) {\n          localKeys.push(rlStr_1[0]);\n          localKeys.push(rlStr_1[0] + 'Index');\n          varCOunt = varCOunt + 1; // tslint:disable-next-line\n\n          return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n        }) + '{ \\n ' + rlStr_1[0] + '= ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '[i' + varCOunt + ']; \\n var ' + rlStr_1[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n      } else {\n        //helper function handling\n        var fnStr = cnt.split('(');\n        var fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';\n        fNameSpace = /\\./.test(fnStr[0]) ? '' : fNameSpace;\n        var ftArray = matches[1].split(',');\n\n        if (matches[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {\n          matches[1] = fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1];\n        }\n\n        var splRegexp = /\\@|\\$|\\#/gm;\n        var arrObj = /\\]\\./gm;\n\n        if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n          var splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n\n          if (splArrRegexp.test(cnt)) {\n            // tslint:disable-next-line\n            cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function (strs) {\n              return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n            })) + '+ \"';\n          }\n        } else {\n          cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), fNameSpace === 'global' ? false : true, nameSpace, localKeys)) + '+\"';\n        }\n      }\n    } else if (ELSE_STMT.test(cnt)) {\n      // handling else condition\n      cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n    } else if (!!cnt.match(IF_OR_FOR)) {\n      // close condition \n      cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n    } else if (SPECIAL_CHAR.test(cnt)) {\n      // template string with double slash with special character\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n      }\n\n      cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n    } else {\n      // template string with double slash\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n        cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n      } else {\n        // evaluate normal expression\n        cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '+\"';\n      }\n    }\n\n    return cnt;\n  });\n}\n\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '.' + str : str;\n}\n\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n  var arrObjReg = /^\\..*/gm;\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !arrObjReg.test(str) ? nameSpace + '.' + str : str;\n} // // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\n\n\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '[\"' + str : str;\n} // tslint:disable-next-line\n\n\nfunction SlashReplace(tempStr) {\n  // tslint:disable-next-line\n  var double = \"\\\\\\\\\";\n\n  if (tempStr.match(DOUBLE_SLASH)) {\n    tempStr = tempStr;\n  } else {\n    tempStr = tempStr.replace(SINGLE_SLASH, double);\n  }\n\n  return tempStr;\n}\n\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n  str = str.trim();\n  var windowFunc = /\\window\\./gm;\n\n  if (!windowFunc.test(str)) {\n    var quotes = /'|\"/gm;\n    var splRegexp = /\\@|\\$|\\#/gm;\n\n    if (splRegexp.test(str)) {\n      str = NameSpaceForspecialChar(str, keys.indexOf(str) === -1, nameSpaceNew, keys) + '\"]';\n    }\n\n    if (ARR_OBJ.test(str)) {\n      return NameSpaceArrObj(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);\n    } else {\n      return addNameSpace(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);\n    }\n  } else {\n    return str;\n  }\n}","map":{"version":3,"sources":["D:/developing/projects/whiteboard2.0/node_modules/@syncfusion/ej2-base/src/template.js"],"names":["LINES","RegExp","QUOTES","IF_STMT","ELSEIF_STMT","ELSE_STMT","FOR_STMT","IF_OR_FOR","CALL_FUNCTION","NOT_NUMBER","WORD","DBL_QUOTED_STR","WORDIF","exp","ARR_OBJ","SINGLE_SLASH","DOUBLE_SLASH","WORDFUNC","WINDOWFUNC","expression","value","compile","template","helper","argName","evalExpResult","evalExp","fnCode","fn","Function","bind","str","nameSpace","varCOunt","localKeys","isClass","match","singleSpace","forEach","replace","cnt","offset","matchStr","SPECIAL_CHAR","matches","rlStr","test","trim","addNameSpace","indexOf","strs","HandleSpecialCharArrObj","rlStr_1","split","mtc","push","fnStr","fNameSpace","hasOwnProperty","ftArray","length","splRegexp","arrObj","splArrRegexp","SlashReplace","NameSpaceForspecialChar","addNS","ignoreList","NameSpaceArrObj","arrObjReg","tempStr","double","nameSpaceNew","keys","windowFunc","quotes"],"mappings":"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","sourcesContent":["/**\n * Template Engine\n */\nvar LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nvar QUOTES = new RegExp(/'|\"/g);\nvar IF_STMT = new RegExp('if ?\\\\(');\nvar ELSEIF_STMT = new RegExp('else if ?\\\\(');\nvar ELSE_STMT = new RegExp('else');\nvar FOR_STMT = new RegExp('for ?\\\\(');\nvar IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nvar CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nvar NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nvar WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nvar DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nvar WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar exp = new RegExp('\\\\${([^}]*)}', 'g');\n// let cachedTemplate: Object = {};\nvar ARR_OBJ = /^\\..*/gm;\nvar SINGLE_SLASH = /\\\\/gi;\nvar DOUBLE_SLASH = /\\\\\\\\/gi;\nvar WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nvar WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\nexport function expression(value) {\n    if (value) {\n        exp = value;\n    }\n    return exp;\n}\n// /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\nexport function compile(template, helper) {\n    var argName = 'data';\n    var evalExpResult = evalExp(template, argName, helper);\n    var fnCode = \"var str=\\\"\" + evalExpResult + \"\\\"; return str;\";\n    // tslint:disable-next-line:no-function-constructor-with-string-args\n    var fn = new Function(argName, fnCode);\n    return fn.bind(helper);\n}\n// function used to evaluate the function expression\nfunction evalExp(str, nameSpace, helper) {\n    var varCOunt = 0;\n    /**\n     * Variable containing Local Keys\n     */\n    var localKeys = [];\n    var isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n    var singleSpace = '';\n    if (isClass) {\n        isClass.forEach(function (value) {\n            singleSpace = value.replace(/\\s\\s+/g, ' ');\n            str = str.replace(value, singleSpace);\n        });\n    }\n    return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, function (match, cnt, offset, matchStr) {\n        var SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n        var matches = cnt.match(CALL_FUNCTION);\n        // matches to detect any function calls\n        if (matches) {\n            var rlStr = matches[1];\n            if (ELSEIF_STMT.test(cnt)) {\n                //handling else-if condition\n                cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function (str) {\n                    str = str.trim();\n                    return addNameSpace(str, !(QUOTES.test(str)) && (localKeys.indexOf(str) === -1), nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (IF_STMT.test(cnt)) {\n                //handling if condition\n                cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, function (strs) {\n                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (FOR_STMT.test(cnt)) {\n                //handling for condition\n                var rlStr_1 = matches[1].split(' of ');\n                // replace for each into actual JavaScript\n                cnt = '\"; ' + cnt.replace(matches[1], function (mtc) {\n                    localKeys.push(rlStr_1[0]);\n                    localKeys.push(rlStr_1[0] + 'Index');\n                    varCOunt = varCOunt + 1;\n                    // tslint:disable-next-line\n                    return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n                }) + '{ \\n ' + rlStr_1[0] + '= ' + addNameSpace(rlStr_1[1], true, nameSpace, localKeys)\n                    + '[i' + varCOunt + ']; \\n var ' + rlStr_1[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n            }\n            else {\n                //helper function handling\n                var fnStr = cnt.split('(');\n                var fNameSpace = (helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global');\n                fNameSpace = (/\\./.test(fnStr[0]) ? '' : fNameSpace);\n                var ftArray = matches[1].split(',');\n                if (matches[1].length !== 0 && !(/data/).test(ftArray[0]) && !(/window./).test(ftArray[0])) {\n                    matches[1] = (fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1]);\n                }\n                var splRegexp = /\\@|\\$|\\#/gm;\n                var arrObj = /\\]\\./gm;\n                if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n                    var splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n                    if (splArrRegexp.test(cnt)) {\n                        // tslint:disable-next-line\n                        cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, function (strs) {\n                            return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                        })) + '+ \"';\n                    }\n                }\n                else {\n                    cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) +\n                        cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), (fNameSpace === 'global' ? false : true), nameSpace, localKeys)) +\n                        '+\"';\n                }\n            }\n        }\n        else if (ELSE_STMT.test(cnt)) {\n            // handling else condition\n            cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n        }\n        else if (!!cnt.match(IF_OR_FOR)) {\n            // close condition \n            cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n        }\n        else if (SPECIAL_CHAR.test(cnt)) {\n            // template string with double slash with special character\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n            }\n            cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n        }\n        else {\n            // template string with double slash\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n                cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n            }\n            else {\n                // evaluate normal expression\n                cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '+\"';\n            }\n        }\n        return cnt;\n    });\n}\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '.' + str : str);\n}\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n    var arrObjReg = /^\\..*/gm;\n    return ((addNS && !(NOT_NUMBER.test(str)) &&\n        ignoreList.indexOf(str.split('.')[0]) === -1 && !(arrObjReg.test(str))) ? nameSpace + '.' + str : str);\n}\n// // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '[\"' + str : str);\n}\n// tslint:disable-next-line\nfunction SlashReplace(tempStr) {\n    // tslint:disable-next-line\n    var double = \"\\\\\\\\\";\n    if (tempStr.match(DOUBLE_SLASH)) {\n        tempStr = tempStr;\n    }\n    else {\n        tempStr = tempStr.replace(SINGLE_SLASH, double);\n    }\n    return tempStr;\n}\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n    str = str.trim();\n    var windowFunc = /\\window\\./gm;\n    if (!windowFunc.test(str)) {\n        var quotes = /'|\"/gm;\n        var splRegexp = /\\@|\\$|\\#/gm;\n        if (splRegexp.test(str)) {\n            str = NameSpaceForspecialChar(str, (keys.indexOf(str) === -1), nameSpaceNew, keys) + '\"]';\n        }\n        if (ARR_OBJ.test(str)) {\n            return NameSpaceArrObj(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n        else {\n            return addNameSpace(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n    }\n    else {\n        return str;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}