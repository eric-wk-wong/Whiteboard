{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor, getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTICON = 'e-list-icon';\nvar LISTIMG = 'e-list-img';\nvar LISTURL = 'e-list-url';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar CONTENT = 'e-content';\nvar DOWNTAIL = 'e-downtail';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\n\nvar FieldsSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\n\nvar ActionSettings =\n/** @class */\nfunction (_super) {\n  __extends(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\n\nvar NodeAnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\n\nvar TreeView =\n/** @class */\nfunction (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = [];\n    _this.parentNodeCheck = [];\n    _this.validArr = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\n   * Initialize the event handler\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.checkActionNodes = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNOU(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   * @hidden\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding();\n    this.setExpandOnType();\n    this.setRipple();\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEvents();\n    this.initialRender = false;\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('tabindex', '0');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.isBlazorPlatform = isBlazor();\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    isEnabled ? addClass([this.element], FULLROWWRAP) : removeClass([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  };\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      var e = void 0;\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function () {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          if (_this.fields.dataSource instanceof DataManager && _this.fields.dataSource.dataSource.offline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          _this.renderItems(true);\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNOU(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNOU(value) && !isNOU(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNOU(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    this.listBaseOption.ariaAttributes.level = 1;\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : this.getSortedData(this.rootData), this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n\n    if (this.loadOnDemand === false) {\n      var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n      var i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    } else {\n      this.finalizeNode(this.element);\n    }\n\n    if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n      this.updateBlazorTemplate();\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n  /**\n   * Update the checkedNodes from datasource at initial rendering\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof DataManager && !this.loadOnDemand) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * To check whether the list data has sub child and to change the parent check state accordingly\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems) {\n        this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      textEle.innerHTML = '';\n      var tempArr = this.nodeTemplateFn(e.curData, undefined, undefined, this.element.id + 'nodeTemplate', this.isStringTemplate);\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNOU(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNOU(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNOU(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNOU(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n            var childId = childCheck[index].getAttribute('data-uid');\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNOU(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNOU(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof DataManager && !this.loadOnDemand) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE) && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNOU(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n    firstUl.setAttribute('role', treeAriaAttr.treeRole);\n    this.setMultiSelect(this.allowMultiSelection);\n    var firstNode = select('.' + LISTITEM, this.element);\n\n    if (firstNode) {\n      addClass([firstNode], FOCUS);\n      this.updateIdAttr(null, firstNode);\n    }\n\n    this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n    this.doExpandAction();\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true); // tslint:disable\n\n      if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNOU(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNOU(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNOU(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if (!this.isLoaded || this.isFieldChange) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNOU(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n      if (this.isBlazorPlatform) {\n        this.setProperties({\n          expandedNodes: [].concat([], this.expandedNodes, [id])\n        }, true);\n      } else {\n        this.expandedNodes.push(id);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      if (this.isBlazorPlatform) {\n        var removeVal = this.expandedNodes.slice(0);\n        removeVal.splice(index, 1);\n        this.setProperties({\n          expandedNodes: [].concat([], removeVal)\n        }, true);\n      } else {\n        this.expandedNodes.splice(index, 1);\n      }\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNOU(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems; // tslint:disable\n\n    if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.dataSource.offline || this.fields.dataSource instanceof DataManager && !this.loadOnDemand) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n          this.updateBlazorTemplate();\n        }\n      } else if (this.fields.dataSource instanceof DataManager && this.loadOnDemand) {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n\n          if (_this.nodeTemplate && _this.isBlazorPlatform && !_this.isStringTemplate) {\n            _this.updateBlazorTemplate();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = childItems;\n\n      if (isNOU(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.getSortedData(childItems), this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n\n        if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n          this.updateBlazorTemplate();\n        }\n\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNOU(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.fields.dataSource.dataSource.offline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\n   * Sets the child Item in selectedState while rendering the child node\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    var childData;\n\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNOU(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n          var dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNOU(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNOU(li) || !this.allowMultiSelection && this.isActive(li) && !isNOU(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNOU(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList = icon.classList;\n\n      if (classList.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNOU(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNOU(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNOU(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n      var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n      child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n          newCheck.push(childId.toString());\n        } //Gets if any next level children are available for child nodes\n\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || getValue(this.fields.child.toString(), child[length_1])) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = this.getChildNodes(this.treeData, id.toString());\n\n          if (childId_1) {\n            isNOU(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNOU(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNOU(fNode) ? isNOU(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNOU(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNOU(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function () {\n    removeClass([this.getFocusedNode()], HOVER);\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) && !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') === null ? false : true;\n      var checked = null;\n\n      if (this.showCheckBox) {\n        checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.destroyTemplate = function (nodeTemplate) {\n    this.clearTemplate(['nodeTemplate']);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n\n    if (this.isBlazorPlatform && this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.destroyTemplate(this.nodeTemplate);\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding();\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = select('.' + TREEINPUT, textEle);\n        _this.inputObj = Input.createInput({\n          element: inpEle,\n          properties: {\n            enableRtl: _this.enableRtl\n          }\n        }, _this.createElement);\n\n        _this.inputObj.container.setAttribute('style', style);\n\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n\n        _this.wireInputEvents(inpEle);\n      }\n    });\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n    this.appendNewText(liEle, txtEle, newText, true);\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n      var newData = setValue(_this.editFields.text, newText, _this.editData);\n\n      if (!isNOU(_this.nodeTemplateFn)) {\n        txtEle.innerText = '';\n\n        var tempArr = _this.nodeTemplateFn(newData, undefined, undefined, _this.element.id + 'nodeTemplate', _this.isStringTemplate);\n\n        tempArr = Array.prototype.slice.call(tempArr);\n        append(tempArr, txtEle);\n\n        _this.updateBlazorTemplate();\n      } else {\n        txtEle.innerText = newText;\n      }\n\n      if (isInput) {\n        removeClass([liEle], EDITING);\n        txtEle.focus();\n      }\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent();\n      }\n    });\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNOU(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNOU(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n\n            if (isBlazor()) {\n              e.bindEvents(getElement(e.dragElement));\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNOU(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        if (_this.isBlazorPlatform && _this.dragStartAction || !_this.isBlazorPlatform) {\n          _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n            _this.dragParent = observedArgs.draggedParentNode;\n            _this.preventExpand = observedArgs.preventTargetExpand;\n\n            if (observedArgs.cancel) {\n              if (e.helper.parentNode) {\n                detach(e.helper);\n              }\n\n              document.body.style.cursor = '';\n            }\n\n            _this.dragStartAction = false;\n\n            if (_this.isBlazorPlatform) {\n              _this.dropAction(e, true);\n            }\n          });\n        }\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        if (!_this.isBlazorPlatform) {\n          _this.dropAction(e);\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n          addClass([icon], DROPNEXT);\n          var virEle = this.createElement('div', {\n            className: SIBLING\n          });\n          var index = this.fullRowSelect ? 1 : 0;\n          dropLi.insertBefore(virEle, dropLi.children[index]);\n        } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n          addClass([icon], DROPNEXT);\n          var virEle = this.createElement('div', {\n            className: SIBLING\n          });\n          var index = this.fullRowSelect ? 2 : 1;\n          dropLi.insertBefore(virEle, dropLi.children[index]);\n        } else {\n          addClass([icon], DROPIN);\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  }; // tslint:disable\n\n\n  TreeView.prototype.dropAction = function (e, isBlazorDrop) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n\n    if (!isBlazorDrop) {\n      dragInstance = e.dragData.draggable;\n    } else {\n      dragInstance = e.element;\n    }\n\n    for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      if (!isBlazorDrop) {\n        detach(e.droppedElement);\n      } else {\n        detach(e.helper);\n      }\n\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    if (!isBlazorDrop) {\n      this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n    } else {\n      this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNOU(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNOU(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNOU(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNOU(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNOU(dropUl) && this.preventExpand === true) {\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNOU(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNOU(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateInstance();\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    var sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (var i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNOU(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    var refNode = dropUl.childNodes[index];\n\n    for (var i = 0; i < li.length; i++) {\n      dropUl.insertBefore(li[i], refNode);\n    }\n\n    var id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNOU(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNOU(id)) {\n      index = isNOU(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n          index = isNOU(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNOU(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNOU(obj) || isNOU(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNOU(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n    var removedData;\n\n    if (isNOU(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function () {\n    if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n      this.updateBlazorTemplate();\n    }\n\n    var eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.updateBlazorTemplate = function () {\n    updateBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    if (toBind) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n    this.keyboardModule.destroy();\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNOU(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNOU(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {TreeView} newProp\n   * @param  {TreeView} oldProp\n   * @returns void\n   * @private\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n\n          if (!this.isBlazorPlatform) {\n            this.setProperties({\n              expandedNodes: []\n            }, true);\n          }\n\n          this.collapseAll();\n          this.isInitalExpand = true;\n\n          if (!this.isBlazorPlatform) {\n            this.setProperties({\n              expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes\n            }, true);\n          }\n\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.updateListProp(this.fields);\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              this.renderChildNodes(nodes[i], true, null, true);\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n    this.rippleFn();\n    this.rippleIconFn();\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNOU(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      var dropUl_1;\n      var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n      var proxy_5 = this;\n\n      if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n        proxy_5.renderChildNodes(dropLi, null, function () {\n          dropUl_1 = dropLi.querySelector('.' + PARENTITEM);\n          proxy_5.addGivenNodes(nodes, dropLi, index, true, dropUl_1);\n          proxy_5.triggerEvent();\n        });\n      } else {\n        this.addGivenNodes(nodes, dropLi, index, true);\n        this.triggerEvent();\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false || this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName === 'BlazorAdaptor') {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  };\n  /**\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n   * will be created for the particular node thus allowing us to edit it.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (!isNOU(ele)) {\n      this.createTextbox(ele, null);\n    }\n  };\n  /**\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n   * a specific level of nodes, set **level** as argument to collapseAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\n   * Ensures visibility of the TreeView node by using node ID or node element.\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var liEle = this.getElement(node);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(function () {\n      liEle.scrollIntoView(true);\n    }, 450);\n  };\n  /**\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   * @param  {number} level - TreeView nodes will expand up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Gets all the checked nodes including child, whether it is loaded or not.\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\n  * Gets all the disabled nodes including child, whether it is loaded or not.\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @BlazorType NodeData\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n   * * The updated data source also contains custom attributes if you specified in data source.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @isGenericType true\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNOU(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNOU(data) ? [] : [data];\n    }\n  };\n  /**\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n\n    if (isNOU(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  };\n  /**\n   * Refreshes a particular node of the TreeView.\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNOU(target) || isNOU(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNOU(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData)); // tslint:disable\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNOU(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNOU(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNOU(childItems)) {\n      liEle.innerHTML = newliEle[0].innerHTML;\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      txtEle.innerHTML = newTextEle.innerHTML;\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  };\n  /**\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      for (var i = 0, len = nodes.length; i < len; i++) {\n        var liEle = this.getElement(nodes[i]);\n\n        if (isNOU(liEle)) {\n          continue;\n        }\n\n        this.removeNode(liEle);\n      }\n\n      if (this.dataType === 1) {\n        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      }\n\n      this.triggerEvent();\n    }\n  };\n  /**\n   * Replaces the text of the TreeView node with the given text.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {string} newText - Specifies the new text of TreeView node.\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.appendNewText(liEle, txtEle, newText, false);\n      }\n    });\n  };\n  /**\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n\nexport { TreeView };","map":{"version":3,"sources":["/Users/jay/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","isUndefined","Browser","compile","isNullOrUndefined","Property","NotifyPropertyChanges","ChildProperty","Complex","Event","EventHandler","KeyboardEvents","rippleEffect","Animation","Draggable","Droppable","updateBlazorTemplate","resetBlazorTemplate","isBlazor","getElement","addClass","removeClass","closest","matches","detach","select","selectAll","isVisible","append","DataManager","Query","isNOU","Touch","getValue","setValue","extend","merge","attributes","ListBase","createCheckBox","rippleMouseHandler","Input","createSpinner","showSpinner","hideSpinner","ROOT","CONTROL","COLLAPSIBLE","EXPANDABLE","LISTITEM","LISTTEXT","LISTICON","LISTIMG","LISTURL","PARENTITEM","HOVER","ACTIVE","LOAD","PROCESS","ICON","TEXTWRAP","INPUT","INPUTGROUP","TREEINPUT","EDITING","RTL","DRAGITEM","DROPPABLE","DRAGGING","SIBLING","DROPIN","DROPNEXT","DROPOUT","NODROP","FULLROWWRAP","FULLROW","SELECTED","EXPANDED","NODECOLLAPSED","DISABLE","CONTENT","DOWNTAIL","DROPCOUNT","CHECK","INDETERMINATE","CHECKBOXWRAP","CHECKBOXFRAME","CHECKBOXRIPPLE","RIPPLE","RIPPLEELMENT","FOCUS","IMAGE","BIGGER","SMALL","CHILD","ITEM_ANIMATION_ACTIVE","treeAriaAttr","treeRole","itemRole","listRole","itemText","wrapperRole","FieldsSettings","_super","apply","ActionSettings","NodeAnimationSettings","effect","duration","easing","TreeView","options","element","_this","call","isRefreshed","preventExpand","checkedElement","disableNode","parentNodeCheck","validArr","expandChildren","isFieldChange","mouseDownStatus","TreeView_1","getModuleName","preRender","checkActionNodes","dragStartAction","isAnimate","keyConfigs","escape","end","enter","f2","home","moveDown","moveLeft","moveRight","moveUp","ctrlDown","ctrlUp","ctrlEnter","ctrlHome","ctrlEnd","ctrlA","shiftDown","shiftUp","shiftEnter","shiftHome","shiftEnd","csDown","csUp","csEnter","csHome","csEnd","space","listBaseOption","expandCollapse","showIcon","expandIconClass","ariaAttributes","expandIconPosition","itemCreated","e","beforeNodeCreate","enableHtmlSanitizer","updateListProp","fields","aniObj","treeList","isLoaded","isInitalExpand","index","setTouchClass","selectedNodes","setProperties","checkedNodes","expandedNodes","getPersistData","keyEntity","addOnPersist","render","initialRender","initialize","setDataBinding","setExpandOnType","setRipple","wireEditingEvents","allowEditing","setDragAndDrop","allowDragAndDrop","wireEvents","renderComplete","setAttribute","id","isBlazorPlatform","setCssClass","cssClass","setEnableRtl","setFullRow","fullRowSelect","nodeTemplateFn","templateComplier","nodeTemplate","enableRtl","tempStr","rippleModel","selector","ignore","rippleFn","iconModel","isCenterRipple","rippleIconFn","isEnabled","setMultiSelect","firstUl","removeAttribute","template","document","querySelectorAll","querySelector","innerHTML","trim","undefined","push","dataSource","ready","then","offline","pop","treeData","result","isNumberTypeId","getType","setRootData","renderItems","finalize","catch","trigger","error","executeQuery","getQuery","rootData","JSON","parse","stringify","mapper","value","columns","query","prop","getActualProperties","_i","_a","keys","col","indexOf","from","tableName","clone","addSorting","sortOrder","text","parentID","where","parseFloat","dataType","getDataType","groupedData","getGroupedData","rootItems","getChildNodes","isSorted","level","ulElement","createList","createElement","getSortedData","appendChild","loadOnDemand","rootNodes","renderChildNodes","finalizeNode","isStringTemplate","parentCheckData","updateCheckedStateFromDS","autoCheck","showCheckBox","updateParentCheckState","resultData","executeLocal","isChecked","resultId","toString","resultPId","hasChildren","id_1","childData","child","childId","mapper_1","checkState","getCheckedNodeDetails","checkIndeterminateState","checkedData","checkedId","fieldId","childItems","updateChildCheckState","checkNodes","count","parentEle","len","childNodes","preElement","check","changeState","indeterminate","childCheckedElement","node","nodeId","getAttribute","j","nodeCheck","data","ariaChecked","checkedParent","checkedChild","subChildItems","checkboxEle","touchClass","icon","item","insertBefore","checkValue","curData","classList","add","addCheck","frame","frameMouseHandler","createFullRow","allowMultiSelection","contains","addActionClass","selected","expanded","textEle","tempArr","slice","eventArgs","nodeData","rippleSpan","parentElement","action","actionValue","ds","groupBy","cusQuery","group","getDataSource","grpItem","itemObj","items","list","iNodes","k","sNodes","selectNode","cNodes","disableExpandAttr","eNodes","updateList","updateCheckedProp","nodes","concat","ensureIndeterminate","liElement","ensureParentCheckState","ensureChildCheckState","remove","indeterminateNodes","checkBoxEle","getElementsByClassName","parentUL","currentParent","childElement","checkBoxes","parentCheck","childCheck","expandState","checkedState","currentLoadData","ele","isNodeChecked","splice","doCheckBoxAction","doCheck","li","liEle","setValidCheckedNode","dynamicCheckState","updateField","checkBox","validateCheckNode","updateFieldChecked","checkbox","currLi","nodeDetails","getNodeData","parent_1","updateIndeterminate","subChild","updateChildIndeterminate","indeterminateData","getTreeData","parent","subId","childElementCheck","innerChild","wrapper","state","isPrevent","isAdd","getCheckEvent","observedArgs","cancel","nodeCheckAction","ariaState","frameSpan","removeCheck","ensureStateChange","checked","isInteracted","firstNode","updateIdAttr","hasPid","doExpandAction","eUids","adaptorName","expandGivenNodes","eNode","expandAction","afterFinalized","arr","proxy","expandCallback","eUid","callback","doSelectionAction","sUids","sNode","selectGivenNodes","clickHandler","event","originalEvent","preventContextMenu","which","rippleElement","rippleIcons","removeHover","setFocusElement","checkWrapper","checkElement","triggerClickEvent","collapseNode","toggleSelect","nodeCheckedEvent","isCheck","expandNode","loaded","start_1","end_1","proxy_1","ul_1","liEle_1","setHeight","activeElement_1","animate","name","animation","expand","timingFunction","begin","args","style","overflow","HTMLElement","offsetHeight","progress","display","animateHeight","expandedNode","ul","height","addExpand","expandArgs","getExpandEvent","colArgs","nodeCollapseAction","start","activeElement","collapse","collapsedNode","removeExpand","toRemove","removeVal","visibility","remaining","timeStamp","currentHeight","parentLi","expandChild","eicon","parents","mapper_2","getChildFields","loadChild","setSelectionForChildNodes","ensureCheckNode","disableTreeNodes","renderSubChild","getNodeObject","doDisableAction","getFields","nodeLevel","dataLevel","getChildMapper","obj","parentId","isRoot","getChildGroup","objlen","dataId","cIcons","curLi","multiSelect","ctrlKey","isActive","unselectNode","getSelectEvent","nodeSelectAction","removeSelectAll","shiftKey","startNode","startIndex","liList","endIndex","temp","currNode","addSelect","nodeUnselectAction","removeSelect","focusedNode","getFocusedNode","selectedLI","selectedLI_1","expandOnType","expandOn","isDevice","expandHandler","expandCollapseAction","nodeExpandAction","nodeName","liEles","getId","icon_1","keyActionHandler","inpEle","blur","focus","oldText","preventDefault","checkNode","openNode","shiftKeySelect","navigateNode","navigateRootNode","createTextbox","navigateToFocus","isUp","focusNode","pos","getBoundingClientRect","getScrollParent","parentPos","bottom","scrollTop","top","isVisibleInViewport","scrollIntoView","txtWrap","left","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","scrollHeight","isTowards","nextNode","getNextNode","getPrevNode","checkWrap","nodeCheckingAction","allCheckNode","parentIndex","getChildItems","childStateChange","childIsCheck","newCheck","validateCheck","length_1","childId_1","toBeOpened","focusNextNode","setFocus","isBackwards","rootNode","getRootNode","getEndNode","selectedItem","fNode","firstElementChild","lastChild","previousSibling","nextSibling","prevNode","endNode","preNode","focusIn","focusOut","onMouseOver","currentLi","setHover","onMouseLeave","hoveredNode","fromDS","getText","pNode","parentNode","pid","nodeFields","textContent","destroyTemplate","clearTemplate","reRenderNodes","removeChild","oldClass","newClass","split","editingHandler","oldInpEle","updateOldText","innerEle","className","attrs","getEditEvent","outerHTML","inpWidth","offsetWidth","innerHtml","inputObj","createInput","properties","container","inputEle","setSelectionRange","wireInputEvents","editData","editFields","inputFocusOut","newText","txtEle","appendNewText","isInput","newData","innerText","triggerEvent","getChildNodeObject","newList","toBind","initializeDrag","destroyDrag","virtualEle","dragObj","enableTailMode","enableAutoScroll","dragTarget","helper","sender","dragRoot","dragWrap","dragLi","nextElementSibling","isSameNode","cloneEle","cloneNode","children","nLen","cNode","body","cursor","dragData","dragStart","listItem","parseInt","getDragEvent","draggedNode","intDestroy","dragCancelAction","bindEvents","dragElement","drag","cursorAt","targetTouches","dragAction","dragStop","removeVirtualEle","dropTarget","preventTargetExpand","dropRoot","dragParent","draggedParentNode","dropAction","dropObj","out","over","drop","dropWrap","dropLi","isDescendant","offsetY","offsetX","virEle","renderVirtualEle","dropIndicator","isBlazorDrop","dragInstance","draggable","ej2_instances","droppedElement","appendNode","draggedElement","dropAsSiblingNode","dropAsChildNode","dropUl","dragParentUl","dragParentLi","pre","moveData","updateElement","updateAriaLevel","updateInstance","dropParentUl","expandParent","childLi","dropParentLi","removedData","updateChildField","refId","getDataPos","currPid","removeChildNodes","addChildData","dropIcon","generateIcon","generateUL","childElementCount","dragIcon","updateChildAriaLevel","sibEle","destroy","dragNode","dropData","draggedNodeData","newParent","dragLiParent","targetParent","indexValue","iconCss","iconClass","dropTar","parent_2","parent_3","hasAttribute","clonedNode","droppedNode","droppedNodeData","dropIndex","dropLevel","addFullRow","toAdd","rowDiv","addMultiSelect","liEles_1","liEles_2","collapseByLevel","excludeHiddenNodes","getVisibleNodes","collapseAllNodes","expandByLevel","expandAllNodes","eIcons","vNodes","removeNode","removeData","updateSelectedNodes","updateExpandedNodes","dm","newId","currId","doGivenAction","toExpand","addGivenNodes","isRemote","dropEle","updateMapper","createListItemFromJson","refNode","url","navigateUrl","updated","childObj","validNodes","nodeType","validID","checkValidId","doEnableAction","strNodes","filter","filterNestedChild","updatePersistProp","removeField","sleNodes","l","slelen","enodes","nodelen","cnodes","m","names","field","getMapperProp","fieldName","proxy_2","touchEditObj","tap","tapCount","wireClickEvent","proxy_3","touchClickObj","wireExpandOnEvent","proxy_4","touchExpandObj","mouseDownHandler","keyboardModule","keyAction","bind","eventName","unWireEvents","matched","el","width","setCheckedNodes","uncheckAll","setIndeterminate","checkAll","setChildCheckState","parent_4","a","updatePosition","isRefreshChild","childValue","updateChildPosition","currID","found","onPropertyChanged","newProp","oldProp","collapseAll","onLoaded","addNodes","dropUl_1","proxy_5","beginEdit","disableNodes","enableNodes","ensureVisible","expandAll","setTimeout","getAllCheckedNodes","getDisabledNodes","disabledNodes","getNode","moveNodes","sourceNodes","refreshNode","updatedChildValue","refreshData","newNodeData","parentData","newliEle","newTextEle","newIcon","tooltip","htmlAttributes","attr","class","removeNodes","updateNode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor, getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTICON = 'e-list-icon';\nvar LISTIMG = 'e-list-img';\nvar LISTURL = 'e-list-url';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar CONTENT = 'e-content';\nvar DOWNTAIL = 'e-downtail';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar treeAriaAttr = {\n    treeRole: 'tree',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: '',\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nvar FieldsSettings = /** @class */ (function (_super) {\n    __extends(FieldsSettings, _super);\n    function FieldsSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('child')\n    ], FieldsSettings.prototype, \"child\", void 0);\n    __decorate([\n        Property([])\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property('expanded')\n    ], FieldsSettings.prototype, \"expanded\", void 0);\n    __decorate([\n        Property('hasChildren')\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\n    __decorate([\n        Property('htmlAttributes')\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        Property('iconCss')\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\n    __decorate([\n        Property('id')\n    ], FieldsSettings.prototype, \"id\", void 0);\n    __decorate([\n        Property('imageUrl')\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        Property('isChecked')\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\n    __decorate([\n        Property('parentID')\n    ], FieldsSettings.prototype, \"parentID\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"query\", void 0);\n    __decorate([\n        Property('selected')\n    ], FieldsSettings.prototype, \"selected\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"tableName\", void 0);\n    __decorate([\n        Property('text')\n    ], FieldsSettings.prototype, \"text\", void 0);\n    __decorate([\n        Property('tooltip')\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\n    __decorate([\n        Property('navigateUrl')\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\n    return FieldsSettings;\n}(ChildProperty));\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\nvar ActionSettings = /** @class */ (function (_super) {\n    __extends(ActionSettings, _super);\n    function ActionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('SlideDown')\n    ], ActionSettings.prototype, \"effect\", void 0);\n    __decorate([\n        Property(400)\n    ], ActionSettings.prototype, \"duration\", void 0);\n    __decorate([\n        Property('linear')\n    ], ActionSettings.prototype, \"easing\", void 0);\n    return ActionSettings;\n}(ChildProperty));\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nvar NodeAnimationSettings = /** @class */ (function (_super) {\n    __extends(NodeAnimationSettings, _super);\n    function NodeAnimationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\n    __decorate([\n        Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\n    return NodeAnimationSettings;\n}(ChildProperty));\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\nvar TreeView = /** @class */ (function (_super) {\n    __extends(TreeView, _super);\n    function TreeView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isRefreshed = false;\n        _this.preventExpand = false;\n        _this.checkedElement = [];\n        _this.disableNode = [];\n        _this.parentNodeCheck = [];\n        _this.validArr = [];\n        _this.expandChildren = [];\n        _this.isFieldChange = false;\n        _this.mouseDownStatus = false;\n        return _this;\n    }\n    TreeView_1 = TreeView;\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    TreeView.prototype.getModuleName = function () {\n        return 'treeview';\n    };\n    /**\n     * Initialize the event handler\n     */\n    TreeView.prototype.preRender = function () {\n        var _this = this;\n        this.checkActionNodes = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: function (e) {\n                _this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        if (isNOU(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if (isNOU(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if (isNOU(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @hidden\n     */\n    TreeView.prototype.getPersistData = function () {\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    TreeView.prototype.render = function () {\n        this.initialRender = true;\n        this.initialize();\n        this.setDataBinding();\n        this.setExpandOnType();\n        this.setRipple();\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEvents();\n        this.initialRender = false;\n        this.renderComplete();\n    };\n    TreeView.prototype.initialize = function () {\n        this.element.setAttribute('role', 'tree');\n        this.element.setAttribute('tabindex', '0');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n        this.isBlazorPlatform = isBlazor();\n        this.setCssClass(null, this.cssClass);\n        this.setEnableRtl();\n        this.setFullRow(this.fullRowSelect);\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    };\n    TreeView.prototype.setEnableRtl = function () {\n        this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n    };\n    TreeView.prototype.setRipple = function () {\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        var rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = rippleEffect(this.element, rippleModel);\n        var iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true,\n        };\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\n    };\n    TreeView.prototype.setFullRow = function (isEnabled) {\n        isEnabled ? addClass([this.element], FULLROWWRAP) : removeClass([this.element], FULLROWWRAP);\n    };\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (isEnabled) {\n            firstUl.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n    };\n    TreeView.prototype.templateComplier = function (template) {\n        if (template) {\n            var e = void 0;\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        return undefined;\n    };\n    TreeView.prototype.setDataBinding = function () {\n        var _this = this;\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof DataManager) {\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then(function (e) {\n                    if (_this.fields.dataSource instanceof DataManager && _this.fields.dataSource.dataSource.offline) {\n                        _this.treeList.pop();\n                        _this.treeData = e.result;\n                        _this.isNumberTypeId = _this.getType();\n                        _this.setRootData();\n                        _this.renderItems(true);\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\n                            _this.finalize();\n                        }\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n                    _this.treeList.pop();\n                    _this.treeData = e.result;\n                    _this.isNumberTypeId = _this.getType();\n                    _this.setRootData();\n                    _this.renderItems(true);\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\n                        _this.finalize();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if (isNOU(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.getQuery = function (mapper, value) {\n        if (value === void 0) { value = null; }\n        var columns = [];\n        var query;\n        if (!mapper.query) {\n            query = new Query();\n            var prop = this.getActualProperties(mapper);\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n                var col = _a[_i];\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\n                    && columns.indexOf(mapper[col]) === -1) {\n                    columns.push(mapper[col]);\n                }\n            }\n            query.select(columns);\n            if (prop.hasOwnProperty('tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!isNOU(value) && !isNOU(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    };\n    TreeView.prototype.getType = function () {\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    };\n    TreeView.prototype.setRootData = function () {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if (isNOU(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    };\n    TreeView.prototype.renderItems = function (isSorted) {\n        this.listBaseOption.ariaAttributes.level = 1;\n        this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : this.getSortedData(this.rootData), this.listBaseOption);\n        this.element.appendChild(this.ulElement);\n        if (this.loadOnDemand === false) {\n            var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n            var i = 0;\n            while (i < rootNodes.length) {\n                this.renderChildNodes(rootNodes[i], true, null, true);\n                i++;\n            }\n        }\n        else {\n            this.finalizeNode(this.element);\n        }\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    };\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     */\n    TreeView.prototype.updateCheckedStateFromDS = function (id) {\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                var mapper = this.fields;\n                var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < resultData.length; i++) {\n                    var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                    var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkedNodes.push(resultId);\n                    }\n                    if (resultData[i][this.fields.hasChildren]) {\n                        var id_1 = resultData[i][this.fields.id];\n                        var childData = new DataManager(this.treeData).\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n                        for (var child = 0; child < childData.length; child++) {\n                            var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkedNodes.push(childId);\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < this.checkedNodes.length; i++) {\n                    var mapper_1 = this.fields;\n                    var checkState = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper_1, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    var checkedData = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n                    for (var index = 0; index < checkedData.length; index++) {\n                        var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkedNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n                this.fields.dataSource.dataSource.offline) || (this.fields.dataSource instanceof DataManager &&\n                !this.loadOnDemand)) {\n                for (var index = 0; index < this.treeData.length; index++) {\n                    var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkedNodes.push(fieldId);\n                    }\n                    var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[index]);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     */\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        var count = 0;\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            var childNodes = this.getChildNodes(this.treeData, id);\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkedNodes.push(id);\n                }\n            }\n            var preElement = new DataManager(this.treeData).\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            var check = select('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     */\n    TreeView.prototype.updateParentCheckState = function () {\n        var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n        var childCheckedElement;\n        for (var i = 0; i < indeterminate.length; i++) {\n            var node = closest(indeterminate[i], '.' + LISTITEM);\n            var nodeId = node.getAttribute('data-uid').toString();\n            if (this.dataType === 1) {\n                childCheckedElement = new DataManager(this.treeData).\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n            }\n            var count = 0;\n            if (childCheckedElement) {\n                for (var j = 0; j < childCheckedElement.length; j++) {\n                    var childId = childCheckedElement[j][this.fields.id].toString();\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                }\n                if (count === childCheckedElement.length) {\n                    var nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkedNodes.push(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     */\n    TreeView.prototype.checkIndeterminateState = function (data) {\n        var element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     */\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n        var count = 0;\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (var index = 0; index < childItems.length; index++) {\n            var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n            if (subChildItems) {\n                this.parentCheckData.push(treeData);\n                this.updateChildCheckState(subChildItems, childItems[index]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkedNodes.push(checkedParent);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (var len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\n                    this.checkIndeterminateState(this.parentCheckData[len]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    };\n    TreeView.prototype.beforeNodeCreate = function (e) {\n        if (this.showCheckBox) {\n            var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.setAttribute('role', 'checkbox');\n            var icon = select('div.' + ICON, e.item);\n            var id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n            var checkValue = getValue(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                checkboxEle.setAttribute('aria-checked', 'false');\n            }\n            var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        var fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        if (!isNOU(this.nodeTemplateFn)) {\n            var textEle = e.item.querySelector('.' + LISTTEXT);\n            textEle.innerHTML = '';\n            var tempArr = this.nodeTemplateFn(e.curData, undefined, undefined, this.element.id + 'nodeTemplate', this.isStringTemplate);\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, textEle);\n        }\n        var eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text,\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n        }\n    };\n    TreeView.prototype.frameMouseHandler = function (e) {\n        var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        rippleMouseHandler(e, rippleSpan);\n    };\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\n        var data = e.curData;\n        var actionValue = getValue(action, data);\n        if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    };\n    TreeView.prototype.getDataType = function (ds, mapper) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (var i = 0; i < ds.length; i++) {\n                if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (var i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && !isNOU(getValue(mapper.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    };\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n        var cusQuery = new Query().group(groupBy);\n        var ds = ListBase.getDataSource(dataSource, cusQuery);\n        var grpItem = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[j].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    };\n    TreeView.prototype.getSortedData = function (list) {\n        if (list && this.sortOrder !== 'None') {\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    };\n    TreeView.prototype.finalizeNode = function (element) {\n        var iNodes = selectAll('.' + IMAGE, element);\n        for (var k = 0; k < iNodes.length; k++) {\n            iNodes[k].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            var sNodes = selectAll('.' + SELECTED, element);\n            for (var i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[i], null);\n                break;\n            }\n            removeClass(sNodes, SELECTED);\n        }\n        var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (var j = 0; j < cNodes.length; j++) {\n            var icon = select('div.' + ICON, cNodes[j]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[j]);\n            }\n        }\n        var eNodes = selectAll('.' + EXPANDED, element);\n        if (!this.isInitalExpand) {\n            for (var i = 0; i < eNodes.length; i++) {\n                this.renderChildNodes(eNodes[i]);\n            }\n        }\n        removeClass(eNodes, EXPANDED);\n        this.updateList();\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    };\n    TreeView.prototype.updateCheckedProp = function () {\n        if (this.showCheckBox) {\n            var nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    };\n    TreeView.prototype.ensureIndeterminate = function () {\n        if (this.autoCheck) {\n            var liElement = selectAll('li', this.element);\n            var ulElement = void 0;\n            for (var i = 0; i < liElement.length; i++) {\n                if (liElement[i].classList.contains(LISTITEM)) {\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[i]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[i]);\n                    }\n                }\n            }\n        }\n        else {\n            var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n            for (var i = 0; i < indeterminate.length; i++) {\n                indeterminate[i].classList.remove(INDETERMINATE);\n            }\n        }\n    };\n    TreeView.prototype.ensureParentCheckState = function (element) {\n        if (!isNOU(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            var ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = select('.' + PARENTITEM, element);\n            }\n            var checkedNodes = selectAll('.' + CHECK, ulElement);\n            var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n            var nodes = selectAll('.' + LISTITEM, ulElement);\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            if (nodes.length === checkedNodes.length) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedNodes.length === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            var parentUL = closest(element, '.' + PARENTITEM);\n            if (!isNOU(parentUL)) {\n                var currentParent = closest(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    };\n    TreeView.prototype.ensureChildCheckState = function (element, e) {\n        if (!isNOU(element)) {\n            var childElement = select('.' + PARENTITEM, element);\n            var checkBoxes = void 0;\n            if (!isNOU(childElement)) {\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                var childCheck = childElement.querySelectorAll('li');\n                var expandState = childElement.parentElement.getAttribute('aria-expanded');\n                var checkedState = void 0;\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                    }\n                    else {\n                        var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                        var childId = childCheck[index].getAttribute('data-uid');\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded) {\n                this.updateParentCheckState();\n            }\n        }\n    };\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n        var li = selectAll('.' + LISTITEM, this.element);\n        if (!isNOU(nodes)) {\n            for (var len = nodes.length; len >= 0; len--) {\n                var liEle = void 0;\n                if (nodes.length === 1) {\n                    liEle = this.getElement(nodes[len - 1]);\n                }\n                else {\n                    liEle = this.getElement(nodes[len]);\n                }\n                if (isNOU(liEle)) {\n                    var node = void 0;\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        var childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (var i = 0; i < childItems.length; i++) {\n                                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                }\n            }\n            else {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n                }\n            }\n        }\n        if (nodes) {\n            for (var j = 0; j < nodes.length; j++) {\n                var node = nodes[j] ? nodes[j].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n        var currLi = closest(checkbox, '.' + LISTITEM);\n        var id = currLi.getAttribute('data-uid');\n        var nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    };\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     */\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n        if (this.dataType === 1) {\n            var count = 0;\n            var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n                var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n                var check = parentElement ? select('.' + CHECK, parentElement) : null;\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\n                if (childNodes) {\n                    for (var i = 0; i < childNodes.length; i++) {\n                        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n            this.fields.dataSource.dataSource.offline) || (this.fields.dataSource instanceof DataManager &&\n            !this.loadOnDemand)) {\n            var id = void 0;\n            var parentElement = void 0;\n            var check = void 0;\n            for (var i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     */\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n        var indeterminateData = this.getTreeData(node);\n        var count = 0;\n        var parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        var childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     */\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n        var count = 0;\n        for (var j = 0; j < subChild.length; j++) {\n            var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n            var check = parentElement ? select('.' + CHECK, parentElement) : null;\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            var childElementCheck = element ? select('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkedNodes.push(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    };\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n        var _this = this;\n        var eventArgs;\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    };\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        var ariaState;\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE) && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNOU(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            var data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if (isUndefined(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!isNOU(ariaState)) {\n                wrapper.setAttribute('aria-checked', ariaState);\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    };\n    TreeView.prototype.addCheck = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeCheck = function (liEle) {\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        var nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, data: nodeData };\n    };\n    TreeView.prototype.finalize = function () {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        firstUl.setAttribute('role', treeAriaAttr.treeRole);\n        this.setMultiSelect(this.allowMultiSelection);\n        var firstNode = select('.' + LISTITEM, this.element);\n        if (firstNode) {\n            addClass([firstNode], FOCUS);\n            this.updateIdAttr(null, firstNode);\n        }\n        this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n        this.doExpandAction();\n    };\n    TreeView.prototype.doExpandAction = function () {\n        var eUids = this.expandedNodes;\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            // tslint:disable\n            if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (var i = 0; i < eUids.length; i++) {\n                    var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n                    if (!isNOU(eNode)) {\n                        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n                        if (!isNOU(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n                            this.expandChildren.push(eUids[i].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    };\n    TreeView.prototype.expandGivenNodes = function (arr) {\n        var proxy = this;\n        this.expandCallback(arr[this.index], function () {\n            proxy.index++;\n            if (proxy.index < arr.length) {\n                proxy.expandGivenNodes(arr);\n            }\n            else {\n                proxy.afterFinalized();\n            }\n        });\n    };\n    TreeView.prototype.expandCallback = function (eUid, callback) {\n        var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n            if (!isNOU(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            callback();\n        }\n    };\n    TreeView.prototype.afterFinalized = function () {\n        this.doSelectionAction();\n        this.updateCheckedProp();\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if (!this.isLoaded || this.isFieldChange) {\n            var eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n    };\n    TreeView.prototype.doSelectionAction = function () {\n        var sNodes = selectAll('.' + SELECTED, this.element);\n        var sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (var i = 0; i < sUids.length; i++) {\n                var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[i]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        removeClass(sNodes, SELECTED);\n    };\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\n        for (var i = 0; i < sNodes.length; i++) {\n            if (!sNodes[i].classList.contains('e-disable')) {\n                this.selectNode(sNodes[i], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    };\n    TreeView.prototype.clickHandler = function (event) {\n        var target = event.originalEvent.target;\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            var classList = target.classList;\n            var li = closest(target, '.' + LISTITEM);\n            if (!li) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                var rippleElement = select('.' + RIPPLEELMENT, li);\n                var rippleIcons = select('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n                    if (!isNOU(checkWrapper)) {\n                        var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    };\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    };\n    TreeView.prototype.triggerClickEvent = function (e, li) {\n        var eventArgs = {\n            event: e,\n            node: li,\n        };\n        this.trigger('nodeClicked', eventArgs);\n    };\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n        var _this = this;\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                removeClass([icon], EXPANDABLE);\n                addClass([icon], COLLAPSIBLE);\n                var start_1 = 0;\n                var end_1 = 0;\n                var proxy_1 = this;\n                var ul_1 = select('.' + PARENTITEM, currLi);\n                var liEle_1 = currLi;\n                this.setHeight(liEle_1, ul_1);\n                var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.aniObj.animate(ul_1, {\n                        name: this.animation.expand.effect,\n                        duration: this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: function (args) {\n                            liEle_1.style.overflow = 'hidden';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start_1 = liEle_1.offsetHeight;\n                            end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: function (args) {\n                            args.element.style.display = 'block';\n                            proxy_1.animateHeight(args, start_1, end_1);\n                        },\n                        end: function (args) {\n                            args.element.style.display = 'block';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            _this.expandedNode(liEle_1, ul_1, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle_1, ul_1, icon);\n                }\n            }\n        }\n        else {\n            var ul = select('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    };\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        removeClass([icon], PROCESS);\n        this.addExpand(currLi);\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n    };\n    TreeView.prototype.addExpand = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        removeClass([liEle], NODECOLLAPSED);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n            if (this.isBlazorPlatform) {\n                this.setProperties({ expandedNodes: [].concat([], this.expandedNodes, [id]) }, true);\n            }\n            else {\n                this.expandedNodes.push(id);\n            }\n        }\n    };\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        var colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    };\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n        var _this = this;\n        removeClass([icon], COLLAPSIBLE);\n        addClass([icon], EXPANDABLE);\n        var start = 0;\n        var end = 0;\n        var proxy = this;\n        var ul = select('.' + PARENTITEM, currLi);\n        var liEle = currLi;\n        var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: function (args) {\n                    liEle.style.overflow = 'hidden';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: function (args) {\n                    proxy.animateHeight(args, start, end);\n                },\n                end: function (args) {\n                    args.element.style.display = 'none';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    };\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        removeClass([icon], PROCESS);\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    };\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            if (this.isBlazorPlatform) {\n                var removeVal = this.expandedNodes.slice(0);\n                removeVal.splice(index, 1);\n                this.setProperties({ expandedNodes: [].concat([], removeVal) }, true);\n            }\n            else {\n                this.expandedNodes.splice(index, 1);\n            }\n        }\n    };\n    TreeView.prototype.disableExpandAttr = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        addClass([liEle], NODECOLLAPSED);\n    };\n    TreeView.prototype.setHeight = function (currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    };\n    TreeView.prototype.animateHeight = function (args, start, end) {\n        var remaining = (args.duration - args.timeStamp) / args.duration;\n        var currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    };\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n        var _this = this;\n        var eicon = select('div.' + ICON, parentLi);\n        if (isNOU(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        var childItems;\n        // tslint:disable\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\n            if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if ((this.fields.dataSource instanceof DataManager && (this.fields.dataSource.dataSource.offline)) ||\n                (this.fields.dataSource instanceof DataManager && !this.loadOnDemand)) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n                    this.updateBlazorTemplate();\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && this.loadOnDemand) {\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n                    _this.treeList.pop();\n                    childItems = e.result;\n                    if (_this.dataType === 1) {\n                        _this.dataType = 2;\n                    }\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                    if (_this.nodeTemplate && _this.isBlazorPlatform && !_this.isStringTemplate) {\n                        _this.updateBlazorTemplate();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n            this.currentLoadData = childItems;\n            if (isNOU(childItems) || childItems.length === 0) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                parentLi.appendChild(ListBase.createList(this.createElement, this.getSortedData(childItems), this.listBaseOption));\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi);\n                this.finalizeNode(parentLi);\n                if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n                    this.updateBlazorTemplate();\n                }\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded);\n            }\n        }\n    };\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if (isNOU(childItems) || childItems.length === 0) {\n            detach(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof DataManager && !this.fields.dataSource.dataSource.offline) {\n                var id = parentLi.getAttribute('data-uid');\n                var nodeData = this.getNodeObject(id);\n                setValue('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.disableTreeNodes = function (childItems) {\n        var i = 0;\n        while (i < childItems.length) {\n            var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    };\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     */\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n        var i;\n        for (i = 0; i < nodes.length; i++) {\n            var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    };\n    TreeView.prototype.ensureCheckNode = function (element) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element);\n                this.ensureParentCheckState(element);\n            }\n        }\n        this.currentLoadData = null;\n    };\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n        var childData;\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildMapper = function (mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    };\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n        if (isRoot === void 0) { isRoot = false; }\n        var childNodes;\n        if (isNOU(obj)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        else {\n            if (typeof this.fields.child === 'string') {\n                for (var i = 0, objlen = obj.length; i < objlen; i++) {\n                    var dataId = getValue(this.fields.id, obj[i]);\n                    if (dataId && dataId.toString() === parentId) {\n                        return getValue(this.fields.child, obj[i]);\n                    }\n                    else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n        var childNodes;\n        if (isNOU(data)) {\n            return childNodes;\n        }\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\n            if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n                    return data[i];\n                }\n            }\n            else if (isRoot) {\n                return data[i];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n        if (expandChild) {\n            var cIcons = selectAll('.' + EXPANDABLE, element);\n            for (var i = 0, len = cIcons.length; i < len; i++) {\n                var icon = cIcons[i];\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\n                    var curLi = closest(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\n                }\n            }\n        }\n    };\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    };\n    TreeView.prototype.isActive = function (li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    };\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\n        var _this = this;\n        if (isNOU(li) || (!this.allowMultiSelection && this.isActive(li) && !isNOU(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    };\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            var startIndex = this.liList.indexOf(this.startNode);\n            var endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex; i <= endIndex; i++) {\n                var currNode = this.liList[i];\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.unselectNode = function (li, e) {\n        var _this = this;\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    };\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.setFocusElement = function (li) {\n        if (!isNOU(li)) {\n            var focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                removeClass([focusedNode], FOCUS);\n            }\n            addClass([li], FOCUS);\n            this.updateIdAttr(focusedNode, li);\n        }\n    };\n    TreeView.prototype.addSelect = function (liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        addClass([liEle], ACTIVE);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeSelect = function (liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        removeClass([liEle], ACTIVE);\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.removeSelectAll = function () {\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n            var ele = selectedLI_1[_i];\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        removeClass(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    };\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData };\n    };\n    TreeView.prototype.setExpandOnType = function () {\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    };\n    TreeView.prototype.expandHandler = function (e) {\n        var target = e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n        }\n    };\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\n        var icon = select('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            var classList = icon.classList;\n            if (classList.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    };\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n    };\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n        var ul = select('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.renderChildNodes(currLi, expandChild, callback);\n            var liEles = selectAll('.' + LISTITEM, currLi);\n            for (var i = 0; i < liEles.length; i++) {\n                var id = this.getId(liEles[i]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n                    if (!isNOU(icon_1)) {\n                        this.expandAction(liEles[i], icon_1, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    };\n    TreeView.prototype.keyActionHandler = function (e) {\n        var _this = this;\n        var target = e.target;\n        var focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            var inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            return;\n        }\n        e.preventDefault();\n        var eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode,\n        };\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (_this.showCheckBox) {\n                            _this.checkNode(e);\n                        }\n                        break;\n                    case 'moveRight':\n                        _this.openNode(_this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        _this.openNode(_this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        _this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        _this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        _this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        _this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        _this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        _this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        _this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            _this.createTextbox(focusedNode, e);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (_this.allowMultiSelection) {\n                            var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n                            _this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    };\n    TreeView.prototype.navigateToFocus = function (isUp) {\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        var pos = focusNode.getBoundingClientRect();\n        var parent = this.getScrollParent(this.element);\n        if (!isNOU(parent)) {\n            var parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        var isVisible = this.isVisibleInViewport(focusNode);\n        if (!isVisible) {\n            focusNode.scrollIntoView(isUp);\n        }\n    };\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n        var pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    };\n    TreeView.prototype.getScrollParent = function (node) {\n        if (isNOU(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    };\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n        if (this.allowMultiSelection) {\n            var focusedNode = this.getFocusedNode();\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    };\n    TreeView.prototype.checkNode = function (e) {\n        var focusedNode = this.getFocusedNode();\n        var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n        var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    };\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n        var _this = this;\n        var currLi = closest(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        var ariaState = !isCheck ? 'true' : 'false';\n        if (!isNOU(ariaState)) {\n            checkWrap.setAttribute('aria-checked', ariaState);\n        }\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    };\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n            (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n            var doCheck = void 0;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     */\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\n        var childElement = select('.' + PARENTITEM, li);\n        var parentIndex = li.getAttribute('data-uid');\n        var mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n            for (var i = 0; i < resultData.length; i++) {\n                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkedNodes.push(resultId);\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < checkedData.length; i++) {\n                    var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (var i = 0; i < this.treeData.length; i++) {\n                    var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkedNodes.push(checkedId);\n                    }\n                }\n            }\n        }\n        else {\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    };\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\n                null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkedNodes.push(childId);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            var subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     */\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n            var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkedNodes.push(checkedChild);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n            }\n            var subChild = this.getChildNodes([childItems[i]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    };\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\n                var childId = getValue(this.fields.id, child[length_1]);\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        (child[length_1][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\n                            : childCheck = null;\n                        childCheck = (child[length_1][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                //Gets if any next level children are available for child nodes\n                if (getValue(this.fields.hasChildren, child[length_1]) === true ||\n                    getValue(this.fields.child.toString(), child[length_1])) {\n                    var id = getValue(this.fields.id, child[length_1]);\n                    var childId_1 = this.getChildNodes(this.treeData, id.toString());\n                    if (childId_1) {\n                        (isNOU(validateCheck)) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) :\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    };\n    TreeView.prototype.openNode = function (toBeOpened, e) {\n        var focusedNode = this.getFocusedNode();\n        var icon = select('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    };\n    TreeView.prototype.navigateNode = function (isTowards) {\n        var focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    };\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\n        var focusedNode = this.getFocusedNode();\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    };\n    TreeView.prototype.getFocusedNode = function () {\n        var selectedItem;\n        var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n        if (isNOU(fNode)) {\n            selectedItem = select('.' + LISTITEM, this.element);\n        }\n        return isNOU(fNode) ? (isNOU(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    };\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            var lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    };\n    TreeView.prototype.getNextNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var nextNode;\n        do {\n            index++;\n            nextNode = this.liList[index];\n            if (isNOU(nextNode)) {\n                return li;\n            }\n        } while (!isVisible(nextNode));\n        return nextNode;\n    };\n    TreeView.prototype.getPrevNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var prevNode;\n        do {\n            index--;\n            prevNode = this.liList[index];\n            if (isNOU(prevNode)) {\n                return li;\n            }\n        } while (!isVisible(prevNode));\n        return prevNode;\n    };\n    TreeView.prototype.getRootNode = function () {\n        var index = 0;\n        var rootNode;\n        do {\n            rootNode = this.liList[index];\n            index++;\n        } while (!isVisible(rootNode));\n        return rootNode;\n    };\n    TreeView.prototype.getEndNode = function () {\n        var index = this.liList.length - 1;\n        var endNode;\n        do {\n            endNode = this.liList[index];\n            index--;\n        } while (!isVisible(endNode));\n        return endNode;\n    };\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\n        removeClass([preNode], [HOVER, FOCUS]);\n        if (!nextNode.classList.contains('e-disable')) {\n            addClass([nextNode], [HOVER, FOCUS]);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    };\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    };\n    TreeView.prototype.focusIn = function () {\n        if (!this.mouseDownStatus) {\n            addClass([this.getFocusedNode()], HOVER);\n        }\n        this.mouseDownStatus = false;\n    };\n    TreeView.prototype.focusOut = function () {\n        removeClass([this.getFocusedNode()], HOVER);\n    };\n    TreeView.prototype.onMouseOver = function (e) {\n        var target = e.target;\n        var classList = target.classList;\n        var currentLi = closest(target, '.' + LISTITEM);\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    };\n    TreeView.prototype.setHover = function (li) {\n        if (!li.classList.contains(HOVER)) {\n            this.removeHover();\n            addClass([li], HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.onMouseLeave = function (e) {\n        this.removeHover();\n    };\n    TreeView.prototype.removeHover = function () {\n        var hoveredNode = selectAll('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            removeClass(hoveredNode, HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\n        if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) &&\n            !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            var id = currLi.getAttribute('data-uid');\n            var text = this.getText(currLi, fromDS);\n            var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\n            var selected = currLi.classList.contains(ACTIVE);\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            var hasChildren = (currLi.getAttribute('aria-expanded') === null) ? false : true;\n            var checked = null;\n            if (this.showCheckBox) {\n                checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    };\n    TreeView.prototype.getText = function (currLi, fromDS) {\n        if (fromDS) {\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            var level = parseFloat(currLi.getAttribute('aria-level'));\n            var nodeFields = this.getFields(this.fields, level, 1);\n            return getValue(nodeFields.text, nodeData);\n        }\n        return select('.' + LISTTEXT, currLi).textContent;\n    };\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    };\n    TreeView.prototype.destroyTemplate = function (nodeTemplate) {\n        this.clearTemplate(['nodeTemplate']);\n    };\n    TreeView.prototype.reRenderNodes = function () {\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        if (this.isBlazorPlatform && this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.destroyTemplate(this.nodeTemplate);\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding();\n    };\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\n        if (!isNOU(oldClass) && oldClass !== '') {\n            removeClass([this.element], oldClass.split(' '));\n        }\n        if (!isNOU(newClass) && newClass !== '') {\n            addClass([this.element], newClass.split(' '));\n        }\n    };\n    TreeView.prototype.editingHandler = function (e) {\n        var target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            var liEle = closest(target, '.' + LISTITEM);\n            this.createTextbox(liEle, e);\n        }\n    };\n    TreeView.prototype.createTextbox = function (liEle, e) {\n        var _this = this;\n        var oldInpEle = select('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        var textEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                var inpWidth = textEle.offsetWidth + 5;\n                var style = 'width:' + inpWidth + 'px';\n                addClass([liEle], EDITING);\n                textEle.innerHTML = eventArgs.innerHtml;\n                var inpEle = select('.' + TREEINPUT, textEle);\n                _this.inputObj = Input.createInput({\n                    element: inpEle,\n                    properties: {\n                        enableRtl: _this.enableRtl,\n                    }\n                }, _this.createElement);\n                _this.inputObj.container.setAttribute('style', style);\n                inpEle.focus();\n                var inputEle = inpEle;\n                inputEle.setSelectionRange(0, inputEle.value.length);\n                _this.wireInputEvents(inpEle);\n            }\n        });\n    };\n    TreeView.prototype.updateOldText = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = getValue(this.editFields.text, this.editData);\n    };\n    TreeView.prototype.inputFocusOut = function (e) {\n        if (!select('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        var target = e.target;\n        var newText = target.value;\n        var txtEle = closest(target, '.' + LISTTEXT);\n        var liEle = closest(target, '.' + LISTITEM);\n        detach(this.inputObj.container);\n        this.appendNewText(liEle, txtEle, newText, true);\n    };\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n        var _this = this;\n        var eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            var newData = setValue(_this.editFields.text, newText, _this.editData);\n            if (!isNOU(_this.nodeTemplateFn)) {\n                txtEle.innerText = '';\n                var tempArr = _this.nodeTemplateFn(newData, undefined, undefined, _this.element.id + 'nodeTemplate', _this.isStringTemplate);\n                tempArr = Array.prototype.slice.call(tempArr);\n                append(tempArr, txtEle);\n                _this.updateBlazorTemplate();\n            }\n            else {\n                txtEle.innerText = newText;\n            }\n            if (isInput) {\n                removeClass([liEle], EDITING);\n                txtEle.focus();\n            }\n            if (observedArgs.oldText !== newText) {\n                _this.triggerEvent();\n            }\n        });\n    };\n    TreeView.prototype.getElement = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return getElement(ele);\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getId = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return (getElement(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n        var data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    };\n    TreeView.prototype.getNodeObject = function (id) {\n        var childNodes;\n        if (isNOU(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                var dataId = getValue(this.fields.id, this.treeData[i]);\n                if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n                    return this.treeData[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n        var newList;\n        if (isNOU(obj)) {\n            return newList;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var dataId = getValue(mapper.id, obj[i]);\n            if (obj[i] && dataId && dataId.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var child = 'child';\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    };\n    TreeView.prototype.setDragAndDrop = function (toBind) {\n        if (toBind) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    };\n    // tslint:disable-next-line:max-func-body-length\n    TreeView.prototype.initializeDrag = function () {\n        var _this = this;\n        var virtualEle;\n        var proxy = this;\n        this.dragObj = new Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragTarget: '.' + TEXTWRAP,\n            helper: function (e) {\n                _this.dragTarget = e.sender.target;\n                var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n                var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n                _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = _this.dragTarget.nextElementSibling;\n                }\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                var cloneEle = (dragWrap.cloneNode(true));\n                if (isNOU(select('div.' + ICON, cloneEle))) {\n                    var icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n                virtualEle = proxy.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                var nLen = _this.selectedNodes.length;\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n                    var cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                _this.dragData = _this.getNodeData(_this.dragLi);\n                return virtualEle;\n            },\n            dragStart: function (e) {\n                addClass([_this.element], DRAGGING);\n                var listItem = closest(e.target, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    _this.dragObj.intDestroy(e.event);\n                    _this.dragCancelAction(virtualEle);\n                }\n                else {\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n                        if (observedArgs.cancel) {\n                            _this.dragObj.intDestroy(e.event);\n                            _this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            _this.dragStartAction = true;\n                        }\n                        if (isBlazor()) {\n                            e.bindEvents(getElement(e.dragElement));\n                        }\n                    });\n                }\n            },\n            drag: function (e) {\n                _this.dragObj.setProperties({ cursorAt: { top: (!isNOU(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\n                _this.dragAction(e, virtualEle);\n            },\n            dragStop: function (e) {\n                removeClass([_this.element], DRAGGING);\n                _this.removeVirtualEle();\n                var dropTarget = e.target;\n                var preventTargetExpand = false;\n                var dropRoot = (closest(dropTarget, '.' + DROPPABLE));\n                if (!dropTarget || !dropRoot) {\n                    detach(e.helper);\n                    document.body.style.cursor = '';\n                }\n                var listItem = closest(dropTarget, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                if ((_this.isBlazorPlatform && _this.dragStartAction) || !_this.isBlazorPlatform) {\n                    _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n                        _this.dragParent = observedArgs.draggedParentNode;\n                        _this.preventExpand = observedArgs.preventTargetExpand;\n                        if (observedArgs.cancel) {\n                            if (e.helper.parentNode) {\n                                detach(e.helper);\n                            }\n                            document.body.style.cursor = '';\n                        }\n                        _this.dragStartAction = false;\n                        if (_this.isBlazorPlatform) {\n                            _this.dropAction(e, true);\n                        }\n                    });\n                }\n            }\n        });\n        this.dropObj = new Droppable(this.element, {\n            out: function (e) {\n                if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: function (e) {\n                document.body.style.cursor = '';\n            },\n            drop: function (e) {\n                if (!_this.isBlazorPlatform) {\n                    _this.dropAction(e);\n                }\n            }\n        });\n    };\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\n        detach(virtualEle);\n        removeClass([this.element], DRAGGING);\n        this.dragStartAction = false;\n    };\n    TreeView.prototype.dragAction = function (e, virtualEle) {\n        var dropRoot = closest(e.target, '.' + DROPPABLE);\n        var dropWrap = closest(e.target, '.' + TEXTWRAP);\n        var icon = select('div.' + ICON, virtualEle);\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        var classList = e.target.classList;\n        if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            var dropLi = closest(e.target, '.' + LISTITEM);\n            var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n            var collapse = closest(e.target, '.' + COLLAPSIBLE);\n            var expand = closest(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                    addClass([icon], DROPNEXT);\n                    var virEle = this.createElement('div', { className: SIBLING });\n                    var index = this.fullRowSelect ? (1) : (0);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\n                    addClass([icon], DROPNEXT);\n                    var virEle = this.createElement('div', { className: SIBLING });\n                    var index = this.fullRowSelect ? (2) : (1);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else {\n                    addClass([icon], DROPIN);\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                addClass([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                addClass([icon], DROPNEXT);\n            }\n            else {\n                addClass([icon], DROPOUT);\n            }\n        }\n        else {\n            addClass([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            removeClass([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            addClass([icon], eventArgs.dropIndicator);\n        }\n    };\n    // tslint:disable\n    TreeView.prototype.dropAction = function (e, isBlazorDrop) {\n        var offsetY = e.event.offsetY;\n        var dropTarget = e.target;\n        var dragObj;\n        var level;\n        var drop = false;\n        var dragInstance;\n        if (!isBlazorDrop) {\n            dragInstance = e.dragData.draggable;\n        }\n        else {\n            dragInstance = e.element;\n        }\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[i];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            var dragTarget = dragObj.dragTarget;\n            var dragLi = (closest(dragTarget, '.' + LISTITEM));\n            var dropLi = (closest(dropTarget, '.' + LISTITEM));\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            if (!isBlazorDrop) {\n                detach(e.droppedElement);\n            }\n            else {\n                detach(e.helper);\n            }\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (var i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        if (!isBlazorDrop) {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        }\n        else {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n        var collapse = closest(e.target, '.' + COLLAPSIBLE);\n        var expand = closest(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n        }\n    };\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n        var dropUl = closest(dropLi, '.' + PARENTITEM);\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            var target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n        if (e && (pos < 7) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            var dropUl = this.expandParent(dropLi);\n            var childLi = dropUl.childNodes[index];\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n        var dropParentLi = closest(dropUl, '.' + LISTITEM);\n        var id = this.getId(dragLi);\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        var refId = this.getId(dropLi);\n        var index = this.getDataPos(this.treeData, this.fields, refId);\n        var parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            var pos = isNOU(index) ? this.treeData.length : (pre ? index : index + 1);\n            if (isNOU(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                setValue(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                var childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (var i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[i]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    };\n    TreeView.prototype.expandParent = function (dropLi) {\n        var dropIcon = select('div.' + ICON, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        var dropUl = select('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = select('.' + PARENTITEM, dropLi);\n        if (!isNOU(dropUl) && this.preventExpand === true) {\n            dropUl.style.display = 'none';\n        }\n        if (!isNOU(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if (isNOU(dropUl) && this.preventExpand === true) {\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                removeClass([icon], COLLAPSIBLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if (isNOU(dropUl)) {\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                removeClass([icon], EXPANDABLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = select('div.' + ICON, dropLi);\n                removeClass([icon], EXPANDABLE);\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        return dropUl;\n    };\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            var dragIcon = select('div.' + ICON, dragParentLi);\n            detach(dragParentUl);\n            detach(dragIcon);\n            var parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    };\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n    };\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\n        if (!isNOU(element)) {\n            var cNodes = element.childNodes;\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    };\n    TreeView.prototype.renderVirtualEle = function (e) {\n        var pre;\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        var virEle = this.createElement('div', { className: SIBLING });\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[index]);\n    };\n    TreeView.prototype.removeVirtualEle = function () {\n        var sibEle = select('.' + SIBLING);\n        if (sibEle) {\n            detach(sibEle);\n        }\n    };\n    TreeView.prototype.destroyDrag = function () {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    };\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\n        var draggedNode = obj ? obj.dragLi : dragNode;\n        var draggedNodeData = obj ? obj.dragData : null;\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        var dragLiParent = obj.dragLi.parentElement;\n        var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n        var targetParent = null;\n        var indexValue = null;\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        var iconClass = null;\n        var node = (drop === true) ? draggedNode : dropLi;\n        var index = node ? closest(node, '.e-list-parent') : null;\n        var i = 0;\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n                    iconClass = iconCss[i];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            var dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[i] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n                indexValue = (parent_2) ? parent_2.children.length : 0;\n                if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent_3) ? parent_3.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n        };\n    };\n    TreeView.prototype.addFullRow = function (toAdd) {\n        var len = this.liList.length;\n        if (toAdd) {\n            for (var i = 0; i < len; i++) {\n                this.createFullRow(this.liList[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var rowDiv = select('.' + FULLROW, this.liList[i]);\n                detach(rowDiv);\n            }\n        }\n    };\n    TreeView.prototype.createFullRow = function (item) {\n        var rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    };\n    TreeView.prototype.addMultiSelect = function (toAdd) {\n        if (toAdd) {\n            var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n                var ele = liEles_1[_i];\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n                var ele = liEles_2[_a];\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    };\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n        for (var i = 0, len = cIcons.length; i < len; i++) {\n            var icon = cIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    };\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                var liEle = eNodes[i];\n                var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n        for (var i = 0, len = eIcons.length; i < len; i++) {\n            var icon = eIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true);\n        }\n    };\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n        var vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (var i = 0; i < vNodes.length; i++) {\n                if (!isVisible(vNodes[i])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    };\n    TreeView.prototype.removeNode = function (node) {\n        var dragParentUl = closest(node, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        detach(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateInstance();\n        this.removeData(node);\n    };\n    TreeView.prototype.updateInstance = function () {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n    };\n    TreeView.prototype.updateList = function () {\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n    };\n    TreeView.prototype.updateSelectedNodes = function () {\n        this.setProperties({ selectedNodes: [] }, true);\n        var sNodes = selectAll('.' + ACTIVE, this.element);\n        this.selectGivenNodes(sNodes);\n    };\n    TreeView.prototype.updateExpandedNodes = function () {\n        this.setProperties({ expandedNodes: [] }, true);\n        var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n        for (var i = 0, len = eNodes.length; i < len; i++) {\n            this.addExpand(eNodes[i]);\n        }\n    };\n    TreeView.prototype.removeData = function (node) {\n        if (this.dataType === 1) {\n            var dm = new DataManager(this.treeData);\n            var id = this.getId(node);\n            var data = {};\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            var id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    };\n    TreeView.prototype.removeChildNodes = function (parentId) {\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        var childData = [];\n        if (cNodes) {\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var dm = new DataManager(this.treeData);\n                var id = getValue(this.fields.id, cNodes[i]).toString();\n                var data = {};\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                var nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    };\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n            if (!isNOU(icon)) {\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n            }\n        }\n    };\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        var sNodes = this.getSortedData(nodes);\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        var dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        var refNode = dropUl.childNodes[index];\n        for (var i = 0; i < li.length; i++) {\n            dropUl.insertBefore(li[i], refNode);\n        }\n        var id = this.getId(dropLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            var refId = this.getId(refNode);\n            var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (var j = 0; j < nodes.length; j++) {\n                if (!isNOU(id)) {\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    setValue(this.fields.parentID, currId, nodes[j]);\n                }\n                this.treeData.splice(pos, 0, nodes[j]);\n                pos++;\n            }\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n        }\n        this.finalizeNode(dropUl);\n    };\n    TreeView.prototype.updateMapper = function (level) {\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    };\n    TreeView.prototype.updateListProp = function (mapper) {\n        var prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    };\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\n        var pos = null;\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var data = getValue(mapper.child, obj[i]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var items = getValue('child', obj[i]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    };\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n        var updated;\n        if (isNOU(id)) {\n            index = isNOU(index) ? obj.length : index;\n            for (var k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[k]);\n                index++;\n            }\n            return updated;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child)) ||\n                    (this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child'))) {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    var childData = getValue(key, obj[i]);\n                    index = isNOU(index) ? childData.length : index;\n                    for (var k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[k]);\n                        index++;\n                    }\n                }\n                else {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[i][key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childObj = getValue(mapper.child, obj[i]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var childData = getValue('child', obj[i]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    };\n    TreeView.prototype.doDisableAction = function (nodes) {\n        var validNodes = this.nodeType(nodes);\n        var validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (var i = 0, len = validID.length; i < len; i++) {\n            var id = validID[i][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            var liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                addClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.doEnableAction = function (nodes) {\n        var strNodes = this.nodeType(nodes);\n        for (var i = 0, len = strNodes.length; i < len; i++) {\n            var liEle = this.getElement(strNodes[i]);\n            var id = strNodes[i];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                removeClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.nodeType = function (nodes) {\n        var validID = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var id = void 0;\n            if (typeof nodes[i] == \"string\") {\n                id = (nodes[i]) ? nodes[i].toString() : null;\n            }\n            else if (typeof nodes[i] === \"object\") {\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n            }\n            if (validID.indexOf(id) == -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    };\n    TreeView.prototype.checkValidId = function (node) {\n        var _this = this;\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter(function (data) {\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (var k = 0; k < this.treeData.length; k++) {\n                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[k]);\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    };\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n        for (var k = 0; k < treeData.length; k++) {\n            var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[k]);\n            }\n            var childItems = getValue(this.fields.child.toString(), treeData[k]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    };\n    TreeView.prototype.setTouchClass = function () {\n        var ele = closest(this.element, '.' + BIGGER);\n        this.touchClass = isNOU(ele) ? '' : SMALL;\n    };\n    TreeView.prototype.updatePersistProp = function () {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        var sleNodes = this.selectedNodes;\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n        }\n        var enodes = this.expandedNodes;\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            var cnodes = this.checkedNodes;\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n            }\n        }\n    };\n    TreeView.prototype.removeField = function (obj, mapper, names) {\n        if (isNOU(obj) || isNOU(mapper)) {\n            return;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            for (var j = 0; j < names.length; j++) {\n                var field = this.getMapperProp(mapper, names[j]);\n                if (!isNOU(obj[i][field])) {\n                    delete obj[i][field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n            }\n        }\n    };\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    };\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n        var childNodes;\n        if (isNOU(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    };\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n        var removedData;\n        if (isNOU(obj)) {\n            return removedData;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if (remove) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var childItems = getValue('child', obj[i]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    };\n    TreeView.prototype.triggerEvent = function () {\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n        var eventArgs = { data: this.treeData };\n        this.trigger('dataSourceChanged', eventArgs);\n    };\n    TreeView.prototype.updateBlazorTemplate = function () {\n        updateBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);\n    };\n    TreeView.prototype.wireInputEvents = function (inpEle) {\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    };\n    TreeView.prototype.wireEditingEvents = function (toBind) {\n        if (toBind) {\n            var proxy_2 = this;\n            this.touchEditObj = new Touch(this.element, {\n                tap: function (e) {\n                    if (e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        proxy_2.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireClickEvent = function (toBind) {\n        if (toBind) {\n            var proxy_3 = this;\n            this.touchClickObj = new Touch(this.element, {\n                tap: function (e) {\n                    proxy_3.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            var proxy_4 = this;\n            this.touchExpandObj = new Touch(this.element, {\n                tap: function (e) {\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        proxy_4.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.mouseDownHandler = function (e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    };\n    ;\n    TreeView.prototype.preventContextMenu = function (e) {\n        e.preventDefault();\n    };\n    TreeView.prototype.wireEvents = function () {\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    };\n    TreeView.prototype.unWireEvents = function () {\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        EventHandler.remove(this.element, 'focus', this.focusIn);\n        EventHandler.remove(this.element, 'blur', this.focusOut);\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        this.keyboardModule.destroy();\n    };\n    TreeView.prototype.parents = function (element, selector) {\n        var matched = [];\n        var el = element.parentNode;\n        while (!isNOU(el)) {\n            if (matches(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    };\n    TreeView.prototype.isDescendant = function (parent, child) {\n        var node = child.parentNode;\n        while (!isNOU(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    };\n    TreeView.prototype.showSpinner = function (element) {\n        addClass([element], LOAD);\n        createSpinner({\n            target: element,\n            width: Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        showSpinner(element);\n    };\n    TreeView.prototype.hideSpinner = function (element) {\n        hideSpinner(element);\n        element.innerHTML = '';\n        removeClass([element], LOAD);\n    };\n    TreeView.prototype.setCheckedNodes = function (nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     */\n    TreeView.prototype.setValidCheckedNode = function (node) {\n        if (this.dataType === 1) {\n            var mapper = this.fields;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0]);\n                if (this.autoCheck) {\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\n                    var count = 0;\n                    for (var len = 0; len < childNodes.length; len++) {\n                        var childId = childNodes[len][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n                        this.checkedNodes.push(parent_4);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (var a = 0; a < this.treeData.length; a++) {\n                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                    break;\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\n                }\n            }\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     */\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n        var checkedParent;\n        var count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkedNodes.push(checkNode);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkedNodes.push(checkedParent);\n                }\n            }\n        }\n    };\n    TreeView.prototype.setIndeterminate = function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[i]);\n        }\n    };\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            var pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (var j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[j]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    };\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n        var found;\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, treeData[i]);\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\n                treeData[i] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n                var childObj = getValue(mapper.child, treeData[i]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n                var childData = getValue('child', treeData[i]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {TreeView} newProp\n     * @param  {TreeView} oldProp\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        var sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'checkedNodes':\n                    if (this.showCheckBox) {\n                        this.checkedNodes = oldProp.checkedNodes;\n                        this.setCheckedNodes(newProp.checkedNodes);\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: [] }, true);\n                    }\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    }\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None') {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    this.updateListProp(this.fields);\n                    this.reRenderNodes();\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        var nodes = this.element.querySelectorAll('li');\n                        var i = 0;\n                        while (i < nodes.length) {\n                            this.renderChildNodes(nodes[i], true, null, true);\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     */\n    TreeView.prototype.destroy = function () {\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        this.element.removeAttribute('aria-activedescendant');\n        this.element.removeAttribute('tabindex');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        this.rippleFn();\n        this.rippleIconFn();\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n        if (isNOU(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        var dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            var dropUl_1;\n            var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n            var proxy_5 = this;\n            if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n                dropLi.querySelector('.' + PARENTITEM) === null) {\n                proxy_5.renderChildNodes(dropLi, null, function () {\n                    dropUl_1 = dropLi.querySelector('.' + PARENTITEM);\n                    proxy_5.addGivenNodes(nodes, dropLi, index, true, dropUl_1);\n                    proxy_5.triggerEvent();\n                });\n            }\n            else {\n                this.addGivenNodes(nodes, dropLi, index, true);\n                this.triggerEvent();\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (var i = 0; i < nodes.length; i++) {\n                    var pid = getValue(this.fields.parentID, nodes[i]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    this.addGivenNodes([nodes[i]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof DataManager === false) || (this.fields.dataSource instanceof DataManager) && (this.fields.dataSource.adaptorName === 'BlazorAdaptor')) {\n            this.preventExpand = false;\n            this.triggerEvent();\n        }\n    };\n    /**\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.beginEdit = function (node) {\n        var ele = this.getElement(node);\n        if (!isNOU(ele)) {\n            this.createTextbox(ele, null);\n        }\n    };\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.checkAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    };\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     */\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.disableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    };\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.enableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    };\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     */\n    TreeView.prototype.ensureVisible = function (node) {\n        var liEle = this.getElement(node);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n        setTimeout(function () { liEle.scrollIntoView(true); }, 450);\n    };\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     */\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     */\n    TreeView.prototype.getAllCheckedNodes = function () {\n        var checkNodes = this.checkedNodes;\n        return checkNodes;\n    };\n    /**\n    * Gets all the disabled nodes including child, whether it is loaded or not.\n    */\n    TreeView.prototype.getDisabledNodes = function () {\n        var disabledNodes = this.disableNode;\n        return disabledNodes;\n    };\n    /**\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @BlazorType NodeData\n     */\n    TreeView.prototype.getNode = function (node) {\n        var ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    };\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     */\n    TreeView.prototype.getTreeData = function (node) {\n        var id = this.getId(node);\n        this.updatePersistProp();\n        if (isNOU(id)) {\n            return this.treeData;\n        }\n        else {\n            var data = this.getNodeObject(id);\n            return isNOU(data) ? [] : [data];\n        }\n    };\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n        var dropLi = this.getElement(target);\n        if (isNOU(dropLi)) {\n            return;\n        }\n        for (var i = 0; i < sourceNodes.length; i++) {\n            var dragLi = this.getElement(sourceNodes[i]);\n            if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index);\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent();\n    };\n    /**\n     * Refreshes a particular node of the TreeView.\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n     */\n    TreeView.prototype.refreshNode = function (target, newData) {\n        if (isNOU(target) || isNOU(newData)) {\n            return;\n        }\n        var id;\n        var isRefreshChild = false;\n        if (this.dataType == 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType == 2 && newData.length === 1) {\n            var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n            if (!isNOU(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        var liEle = this.getElement(target);\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        // tslint:disable\n        var newNodeData;\n        var parentData;\n        if (this.dataType == 1 && isRefreshChild) {\n            for (var k = 0; k < newData.length; k++) {\n                if (isNOU(newData[k][this.fields.parentID])) {\n                    parentData = newData[k];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = extend({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = extend({}, this.refreshData, newData[0]);\n        }\n        if (isNOU(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        var ul = select('.' + PARENTITEM, liEle);\n        var childItems = getValue(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNOU(childItems))) {\n            liEle.innerHTML = newliEle[0].innerHTML;\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            var txtEle = select('.' + TEXTWRAP, liEle);\n            var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n            var icon = select('div.' + ICON, txtEle);\n            var newIcon = select('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    removeClass([newIcon], EXPANDABLE);\n                    addClass([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    removeClass([newIcon], COLLAPSIBLE);\n                    addClass([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    addClass([newIcon], 'interaction');\n                }\n            }\n            txtEle.innerHTML = newTextEle.innerHTML;\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n        }\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            var attr = {};\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                addClass([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                attributes(liEle, attr);\n            }\n        }\n        this.isRefreshed = false;\n        this.triggerEvent();\n    };\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.removeNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            for (var i = 0, len = nodes.length; i < len; i++) {\n                var liEle = this.getElement(nodes[i]);\n                if (isNOU(liEle)) {\n                    continue;\n                }\n                this.removeNode(liEle);\n            }\n            if (this.dataType === 1) {\n                this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            }\n            this.triggerEvent();\n        }\n    };\n    /**\n     * Replaces the text of the TreeView node with the given text.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     */\n    TreeView.prototype.updateNode = function (target, newText) {\n        var _this = this;\n        if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n            return;\n        }\n        var liEle = this.getElement(target);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.appendNewText(liEle, txtEle, newText, false);\n            }\n        });\n    };\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.uncheckAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    };\n    var TreeView_1;\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowEditing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        Complex({}, NodeAnimationSettings)\n    ], TreeView.prototype, \"animation\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"checkedNodes\", void 0);\n    __decorate([\n        Property('')\n    ], TreeView.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"expandedNodes\", void 0);\n    __decorate([\n        Property('Auto')\n    ], TreeView.prototype, \"expandOn\", void 0);\n    __decorate([\n        Complex({}, FieldsSettings)\n    ], TreeView.prototype, \"fields\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"selectedNodes\", void 0);\n    __decorate([\n        Property('None')\n    ], TreeView.prototype, \"sortOrder\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"showCheckBox\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"autoCheck\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"drawNode\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"keyPress\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecking\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeClicked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragging\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDropped\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEdited\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEditing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\n    TreeView = TreeView_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeView);\n    return TreeView;\n}(Component));\nexport { TreeView };\n"]},"metadata":{},"sourceType":"module"}